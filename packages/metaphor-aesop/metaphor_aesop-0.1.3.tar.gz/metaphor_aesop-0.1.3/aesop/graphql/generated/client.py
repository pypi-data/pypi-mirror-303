# Generated by ariadne-codegen
# Source: aesop/graphql/queries

from typing import Any, Dict, List, Optional, Union

from .add_governed_tags import AddGovernedTags
from .add_webhook import AddWebhook
from .assign_governed_tags import AssignGovernedTags
from .attach_data_document_to_namespace import AttachDataDocumentToNamespace
from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .create_data_document import CreateDataDocument
from .create_knowledge_card import CreateKnowledgeCard
from .create_namespace import CreateNamespace
from .enums import WebhookTriggerType
from .get_custom_metadata_settings import GetCustomMetadataSettings
from .get_dataset_governed_tags import GetDatasetGovernedTags
from .get_governed_tags import GetGovernedTags
from .get_namespace import GetNamespace
from .get_non_prod_settings import GetNonProdSettings
from .get_setup_info import GetSetupInfo
from .get_soft_deletion_settings import GetSoftDeletionSettings
from .get_webhook_payload_schema import GetWebhookPayloadSchema
from .get_webhooks import GetWebhooks
from .input_types import (
    AssetGovernedTagsPatchInput,
    HashtagInput,
    KnowledgeCardInput,
    SettingsInput,
    UpdateCustomMetadataConfigInput,
    UserDefinedResourceDeleteInput,
    UserDefinedResourceInput,
)
from .remove_governed_tags import RemoveGovernedTags
from .remove_webhook import RemoveWebhook
from .unassign_governed_tags import UnassignGovernedTags
from .update_custom_metadata_config import UpdateCustomMetadataConfig
from .update_settings import UpdateSettings


def gql(q: str) -> str:
    return q


class Client(BaseClient):
    def create_knowledge_card(
        self, data: KnowledgeCardInput, **kwargs: Any
    ) -> CreateKnowledgeCard:
        query = gql(
            """
            mutation createKnowledgeCard($data: KnowledgeCardInput!) {
              createKnowledgeCard(data: $data) {
                knowledgeCardInfo {
                  detail {
                    type
                    changeRequest {
                      status {
                        status
                        lastModified {
                          time
                          actingPerson {
                            properties {
                              firstName
                            }
                          }
                        }
                        created {
                          time
                          actingPerson {
                            properties {
                              firstName
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"data": data}
        response = self.execute(
            query=query,
            operation_name="createKnowledgeCard",
            variables=variables,
            **kwargs
        )
        _data = self.get_data(response)
        return CreateKnowledgeCard.model_validate(_data)

    def attach_data_document_to_namespace(
        self, namespace_id: str, data_document_id: str, **kwargs: Any
    ) -> AttachDataDocumentToNamespace:
        query = gql(
            """
            mutation attachDataDocumentToNamespace($namespaceId: ID!, $dataDocumentId: ID!) {
              updateNamespaceAssets(
                input: {entityIds: [$namespaceId], assetIdsToAdd: [$dataDocumentId]}
              ) {
                id
                namespaceAssets {
                  assets(first: 20) {
                    edges {
                      node {
                        __typename
                        id
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "namespaceId": namespace_id,
            "dataDocumentId": data_document_id,
        }
        response = self.execute(
            query=query,
            operation_name="attachDataDocumentToNamespace",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AttachDataDocumentToNamespace.model_validate(data)

    def create_data_document(
        self,
        name: str,
        content: str,
        publish: bool,
        hashtags: Union[Optional[List[HashtagInput]], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateDataDocument:
        query = gql(
            """
            mutation createDataDocument($name: String!, $content: String!, $publish: Boolean!, $hashtags: [HashtagInput!]) {
              createKnowledgeCard(
                data: {knowledgeCardInfo: {detail: {type: DATA_DOCUMENT, dataDocument: {title: $name, content: $content}}, hashtags: $hashtags}, isPublished: $publish}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "name": name,
            "content": content,
            "publish": publish,
            "hashtags": hashtags,
        }
        response = self.execute(
            query=query,
            operation_name="createDataDocument",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDataDocument.model_validate(data)

    def create_namespace(
        self,
        name: str,
        parent_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CreateNamespace:
        query = gql(
            """
            mutation createNamespace($name: String!, $parentId: ID) {
              createNamespace(
                data: {namespaceInfo: {name: $name, detail: {type: USER_DEFINED_SPACE}, parentId: $parentId}}
              ) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"name": name, "parentId": parent_id}
        response = self.execute(
            query=query, operation_name="createNamespace", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateNamespace.model_validate(data)

    def update_custom_metadata_config(
        self, input: UpdateCustomMetadataConfigInput, **kwargs: Any
    ) -> UpdateCustomMetadataConfig:
        query = gql(
            """
            mutation updateCustomMetadataConfig($input: UpdateCustomMetadataConfigInput!) {
              updateCustomMetadataConfig(input: $input) {
                key
                displayName
                dataType
                searchable
                highlight
                searchable
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="updateCustomMetadataConfig",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateCustomMetadataConfig.model_validate(data)

    def add_governed_tags(
        self, input: List[UserDefinedResourceInput], **kwargs: Any
    ) -> AddGovernedTags:
        query = gql(
            """
            mutation addGovernedTags($input: [UserDefinedResourceInput!]!) {
              createUserDefinedResource(input: $input) {
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="addGovernedTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AddGovernedTags.model_validate(data)

    def assign_governed_tags(
        self, input: List[AssetGovernedTagsPatchInput], **kwargs: Any
    ) -> AssignGovernedTags:
        query = gql(
            """
            mutation assignGovernedTags($input: [AssetGovernedTagsPatchInput!]!) {
              upsertAssetGovernedTags(input: $input) {
                __typename
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="assignGovernedTags",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AssignGovernedTags.model_validate(data)

    def remove_governed_tags(
        self, input: UserDefinedResourceDeleteInput, **kwargs: Any
    ) -> RemoveGovernedTags:
        query = gql(
            """
            mutation removeGovernedTags($input: UserDefinedResourceDeleteInput!) {
              deleteUserDefinedResource(input: $input) {
                deletedIds
                failedIds
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="removeGovernedTags",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveGovernedTags.model_validate(data)

    def unassign_governed_tags(
        self, input: List[AssetGovernedTagsPatchInput], **kwargs: Any
    ) -> UnassignGovernedTags:
        query = gql(
            """
            mutation unassignGovernedTags($input: [AssetGovernedTagsPatchInput!]!) {
              upsertAssetGovernedTags(input: $input) {
                __typename
                id
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query,
            operation_name="unassignGovernedTags",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UnassignGovernedTags.model_validate(data)

    def update_settings(self, input: SettingsInput, **kwargs: Any) -> UpdateSettings:
        query = gql(
            """
            mutation updateSettings($input: SettingsInput!) {
              updateSettings(input: $input) {
                __typename
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="updateSettings", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateSettings.model_validate(data)

    def add_webhook(
        self, trigger: WebhookTriggerType, url: str, **kwargs: Any
    ) -> AddWebhook:
        query = gql(
            """
            mutation addWebhook($trigger: WebhookTriggerType!, $url: String!) {
              addWebhook(input: {trigger: $trigger, url: $url}) {
                _id
              }
            }
            """
        )
        variables: Dict[str, object] = {"trigger": trigger, "url": url}
        response = self.execute(
            query=query, operation_name="addWebhook", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AddWebhook.model_validate(data)

    def remove_webhook(self, id: str, **kwargs: Any) -> RemoveWebhook:
        query = gql(
            """
            mutation removeWebhook($id: ID!) {
              deleteWebhooks(input: {ids: [$id]}) {
                deletedIds
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query, operation_name="removeWebhook", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return RemoveWebhook.model_validate(data)

    def get_namespace(
        self,
        name: str,
        parent_id: Union[Optional[List[str]], UnsetType] = UNSET,
        end_cursor: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetNamespace:
        query = gql(
            """
            query getNamespace($name: String!, $parentId: [ID!], $endCursor: String) {
              namespaces(
                first: 20
                filters: {name: $name, type: USER_DEFINED_SPACE, isChildOf: $parentId}
                after: $endCursor
              ) {
                edges {
                  node {
                    id
                    namespaceInfo {
                      name
                    }
                  }
                }
                pageInfo {
                  hasNextPage
                  endCursor
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "name": name,
            "parentId": parent_id,
            "endCursor": end_cursor,
        }
        response = self.execute(
            query=query, operation_name="getNamespace", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetNamespace.model_validate(data)

    def get_custom_metadata_settings(self, **kwargs: Any) -> GetCustomMetadataSettings:
        query = gql(
            """
            query getCustomMetadataSettings {
              settings {
                customMetadataConfig {
                  key
                  displayName
                  dataType
                  highlight
                  searchable
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query,
            operation_name="getCustomMetadataSettings",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetCustomMetadataSettings.model_validate(data)

    def get_dataset_governed_tags(
        self,
        id: str,
        end_cursor: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetDatasetGovernedTags:
        query = gql(
            """
            query getDatasetGovernedTags($id: ID!, $endCursor: String) {
              node(id: $id) {
                __typename
                ... on Dataset {
                  governedTags(first: 50, after: $endCursor) {
                    edges {
                      node {
                        id
                        userDefinedResourceInfo {
                          name
                          description {
                            text
                          }
                        }
                      }
                    }
                    pageInfo {
                      endCursor
                      hasNextPage
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id, "endCursor": end_cursor}
        response = self.execute(
            query=query,
            operation_name="getDatasetGovernedTags",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetDatasetGovernedTags.model_validate(data)

    def get_governed_tags(
        self,
        name: Union[Optional[str], UnsetType] = UNSET,
        end_cursor: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetGovernedTags:
        query = gql(
            """
            query getGovernedTags($name: String, $endCursor: String) {
              userDefinedResources(
                first: 50
                after: $endCursor
                filters: {name: $name, type: [GOVERNED_TAG]}
              ) {
                edges {
                  node {
                    id
                    userDefinedResourceInfo {
                      name
                      description {
                        text
                      }
                    }
                  }
                }
                pageInfo {
                  hasNextPage
                  endCursor
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"name": name, "endCursor": end_cursor}
        response = self.execute(
            query=query, operation_name="getGovernedTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetGovernedTags.model_validate(data)

    def get_non_prod_settings(self, **kwargs: Any) -> GetNonProdSettings:
        query = gql(
            """
            query getNonProdSettings {
              settings {
                nonProd {
                  datasetPatterns {
                    platform
                    account
                    database
                    schema
                    table
                    isCaseSensitive
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query,
            operation_name="getNonProdSettings",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetNonProdSettings.model_validate(data)

    def get_setup_info(self, **kwargs: Any) -> GetSetupInfo:
        query = gql(
            """
            query getSetupInfo {
              setupInfo {
                oidc {
                  signInRedirectUrl
                }
                saml {
                  entityId
                  replyACSUrl
                  signOnUrl
                }
                crawlerIpAddresses
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="getSetupInfo", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetSetupInfo.model_validate(data)

    def get_soft_deletion_settings(self, **kwargs: Any) -> GetSoftDeletionSettings:
        query = gql(
            """
            query getSoftDeletionSettings {
              settings {
                softDeletion {
                  enabled
                  thresholdHours
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query,
            operation_name="getSoftDeletionSettings",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetSoftDeletionSettings.model_validate(data)

    def get_webhook_payload_schema(
        self, trigger: WebhookTriggerType, **kwargs: Any
    ) -> GetWebhookPayloadSchema:
        query = gql(
            """
            query getWebhookPayloadSchema($trigger: WebhookTriggerType!) {
              webhookPayloadSchema(input: {trigger: $trigger})
            }
            """
        )
        variables: Dict[str, object] = {"trigger": trigger}
        response = self.execute(
            query=query,
            operation_name="getWebhookPayloadSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetWebhookPayloadSchema.model_validate(data)

    def get_webhooks(
        self,
        trigger: Union[Optional[WebhookTriggerType], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetWebhooks:
        query = gql(
            """
            query getWebhooks($trigger: WebhookTriggerType) {
              webhooks(input: {trigger: $trigger}) {
                _id
              }
            }
            """
        )
        variables: Dict[str, object] = {"trigger": trigger}
        response = self.execute(
            query=query, operation_name="getWebhooks", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetWebhooks.model_validate(data)
