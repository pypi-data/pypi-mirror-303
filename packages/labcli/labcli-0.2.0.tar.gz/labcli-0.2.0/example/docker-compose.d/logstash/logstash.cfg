input {
    # Syslog input plugin
    syslog {
        # Setting a port to receive syslog messages
        port => 1515
        type => syslog
    }
    gelf {
        port => 12201
        type => gelf
    }
}

filter {
    ####################################################################################
    # Syslog Data Processing
    ####################################################################################
    if [type] == "syslog" {
        # Filter to mutate the event
        mutate {
            # Rename the logsource field to device
            rename => { "logsource" => "device" }
            # Replace the value of the host field with logstash
            replace => { "host" => "logstash" }
        }
        grok {
            match => [
                ## Example Log
                ### %BGP-5-ADJCHANGE: peer 192.168.33.2 (AS 6003) old state OpenConfirm event RecvKeepAlive new state Established
                "message", "%%{WORD:vendor_facility}-%{INT}-%{WORD:vendor_facility_process}: ?%{GREEDYDATA:message}"
            ]
            overwrite => [ "message" ]
        }
        if [vendor_facility] == "LINEPROTO" and [vendor_facility_process] == "UPDOWN" {
            # Category to identify the event
            mutate {
                add_field => { "event_type" => "interface_status" }
            }
            # Grok the log message to extract the interface and status
            grok {
                match => [
                    "message", "Line protocol on Interface %{DATA:interface}, changed state to %{WORD:interface_status}"
                ]
            }
        }
        mutate {
            # Rename and lowercase the severity_label field to level to match the Loki schema
            rename => { "severity_label" => "level" }
            lowercase => [ "level" ]
        }
        # Add a field for metadata example
        mutate {
            add_field => {
                "netpanda" => "bethepacket"
            }
        }
    ####################################################################################
    # Docker Logs Data Processing ingested via GELF
    ####################################################################################
    } else if [type] == "gelf" {
        # Map the level int field value to its respective string representation
        translate {
            source => "[level]"
            destination => "[level]"
            dictionary => {
                "0" => "emergency"
                "1" => "alert"
                "2" => "critical"
                "3" => "error"
                "4" => "warning"
                "5" => "notice"
                "6" => "info"
                "7" => "debug"
            }
        }
    }
}

output {
    ####################################################################################
    # Parsed Syslog Data Outut
    ####################################################################################
    if [type] == "syslog" {
        # # Outputs to stdout for debugging
        # stdout {
        #     codec => rubydebug
        # }
        # # Outputs to Loki
        loki {
            url => "http://loki:3001/loki/api/v1/push"
            metadata_fields => ["netpanda"]
            include_fields => [
                "device",
                "level",
                "facility",
                "facility_label",
                "vendor_facility",
                "vendor_facility_process",
                "event_type",
                "interface",
                "interface_status",
                "priority",
                "severity",
                "type"
            ]
        }
    ####################################################################################
    # Parsed Docker Logs Data Output
    ####################################################################################
    } else if [type] == "gelf" {
        # if [container_name] == "telegraf-01" {
        #     # Outputs to stdout for debugging
        #     stdout {
        #         codec => rubydebug
        #     }
        # }
        # Outputs to Loki
        loki {
            url => "http://loki:3001/loki/api/v1/push"
            include_fields => [
                "container_name",
                "image_name",
                "type"
            ]
            metadata_fields => [
                "command",
                "contaiener_id",
                "image_id",
                "created",
                "host",
                "level",
                "source_host",
                "tags",
                "version"
            ]
        }
    }
}