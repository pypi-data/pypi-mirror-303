{"version":3,"file":"lib_index_js.9f2e5461ce1200a490ae.js","mappings":"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","sources":["webpack://m269_marking_plugin/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { NotebookPanel } from '@jupyterlab/notebook';\nimport { CodeCellModel, MarkdownCellModel } from '@jupyterlab/cells';\nimport { NotebookActions } from '@jupyterlab/notebook';\n\n//import { NotebookActions } from '@jupyterlab/notebook';\n\n/**\n * Initialization data for the m269_marking_plugin extension.\n */\nconst prep_command = 'm269_marking_plugin:prep';\nconst finish_command = 'm269_marking_plugin:finish'\nconst colourise = 'm269_marking_plugin:colourise';\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'm269_marking_plugin:plugin',\n  description: 'Marking plugin for the M269 Open University module',\n  autoStart: true,\n  requires: [ICommandPalette], // Inject the palette service\n  activate: (app: JupyterFrontEnd, palette: ICommandPalette) => {\n    //const { commands } = app;\n    console.log('M269 Marking Plugin is activated!');\n\n    app.commands.addCommand(prep_command, {\n      label: 'M269 Prep for Marking',\n      caption: 'M269 Prep for Marking',\n      execute: (args: any) => {\n        const currentWidget = app.shell.currentWidget;\n        if (currentWidget instanceof NotebookPanel) {\n          // Duplicate the file\n          const oldName = currentWidget.context.path;\n          const newName = oldName.replace(/\\.ipynb$/, '-UNMARKED.ipynb');\n          app.serviceManager.contents.copy(oldName, newName)\n          .then(() => {\n            console.log('Notebook copied successfully:', newName);\n            // Process the answer cells and insert markdown cells in sequence\n            processAnswerCells(app, currentWidget);\n          });\n        }\n      }\n    });\n\n    app.commands.addCommand(colourise, {\n      label: 'M269 Colourise',\n      caption: 'M269 Colourise',\n      execute: (ags: any) => {\n        console.log('Colourising');\n        injectStylesIfNeeded();\n        const currentWidget = app.shell.currentWidget;\n        if (currentWidget instanceof NotebookPanel) {\n          const notebook = currentWidget.content;\n          const model = notebook.model;\n          var cells = model?.cells;      \n          if (cells) {\n            for (let i = 0; i < cells.length; i++) {\n              const cell = cells.get(i);\n    \n              // Get the corresponding cell widget\n              const cellWidget = notebook.widgets[i]; \n    \n              if (cell instanceof CodeCellModel || cell instanceof MarkdownCellModel) {\n                const metadata = cell.metadata ? { ...cell.metadata } : {};\n        \n                if (metadata['TYPE'] === 'ANSWER' && cellWidget) {\n                  // Apply the class to the cell's DOM node\n                  cellWidget.node.classList.add('answercell');\n                  //console.log(`Applied \"answercell\" class to cell ${i}`);\n                }\n                if (metadata['TYPE'] === 'FEEDBACK' && cellWidget) {\n                  //Apply the class to the cell's DOM node\n                  cellWidget.node.classList.add('feedbackcell')\n                }\n                if (metadata['TYPE'] === 'GUIDANCE' && cellWidget) {\n                  //Apply the class to the cell's DOM node\n                  cellWidget.node.classList.add('guidancecell')\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n\n    app.commands.addCommand(finish_command, {\n      label: 'M269 Finish Marking',\n      caption: 'M269 Finish Marking',\n      execute: async (args: any) => {\n        console.log('Finalising marking');\n        const currentWidget = app.shell.currentWidget;\n        if (currentWidget instanceof NotebookPanel) {\n          // loop through cells\n          const notebook = currentWidget.content;\n          const model = notebook.model;\n          var cells = model?.cells;\n          let questionPartsList: string[] = [];\n          let outOfList: number[] = [];\n          let marksList: string[] = [];\n    \n          if (cells) {\n            for (let i = 0; i < cells.length; i++) {\n              const cell = cells.get(i);\n              // if hasmarks = true\n              // Get the corresponding cell widget\n              const cellWidget = notebook.widgets[i]; \n\n              if (cell instanceof CodeCellModel || cell instanceof MarkdownCellModel) {\n                const metadata = cell.metadata ? { ...cell.metadata } : {};\n        \n                if (metadata['HASMARKS'] === true && cellWidget) {\n                  \n                  console.log(metadata['QUESTION']);\n                  const question = metadata['QUESTION'];\n                  if (typeof question === 'string') {\n                    questionPartsList.push(question);\n                  }\n                  let m = cell.sharedModel.getSource().split('/');\n                  marksList.push(m[0]);\n                  outOfList.push(Number(m[1]));\n                  //console.log(cell.sharedModel.getSource());\n                }\n              }\n              \n              // then add to list of marks\n            }\n          }\n          console.log(questionPartsList);\n          console.log(outOfList);\n          console.log(marksList);\n          if (marksList.includes('?')) {\n            alert('At least one mark is missing');\n          } else {\n            // check if final cell is SUMMARY = true\n            const cell = cells?.get(cells.length-1);\n            const notebook = currentWidget.content;\n            if (cells) {\n              notebook.activeCellIndex = cells.length - 1;\n              notebook.activate();  \n              const metadata = cell?.metadata ? { ...cell.metadata } : {};\n              if (metadata['SUMMARY'] === true) {\n                // if so, delete it\n                alert('deleting!');\n                await app.commands.execute('notebook:delete-cell')\n              }\n            }\n            // insert final summary cell\n            // Set the active cell\n            if (cells) {\n              notebook.activeCellIndex = cells.length - 1;\n              notebook.activate();  \n              let marksTotal = 0;\n              let outOfTotal = 0;\n              // Insert a new cell below and wait for the command to complete\n              await app.commands.execute('notebook:insert-cell-below')\n              await app.commands.execute('notebook:change-cell-to-markdown');\n              // print table of marks\n              const newCell = notebook.activeCell;\n              let table = \"<b>Marks:</b><br>\"\n              table += \"<table>\";\n              table += \"<tr><td><b>Question</b></td><td><b>Marks</b></td><td><b>Out Of</b></td></tr>\";\n              for (let i = 0; i < questionPartsList.length; i++) {\n                marksTotal += Number(marksList[i]);\n                outOfTotal += outOfList[i];\n                table += \"<tr><td>\"+questionPartsList[i]+\"</td><td>\"+marksList[i]+\"</td><td>\"+outOfList[i]+\"</td></tr>\";\n              }\n              table += \"<tr><td><b>Total</b></td><td><b>\"+marksTotal+\"</b></td><td><b>\"+outOfTotal+\"</b></td></tr>\";\n              table += \"</table>\";\n              newCell?.model.sharedModel.setSource(table);\n              newCell?.model.setMetadata('SUMMARY', true);\n              const sessionContext = currentWidget.context.sessionContext;\n              NotebookActions.run(notebook, sessionContext);\n\n            }          \n          }\n        }\n      }\n    });\n\n    // Add the command to the command palette\n    const category = 'M269';\n    palette.addItem({ command: prep_command, category, args: { origin: 'from palette' } });\n    palette.addItem({ command: colourise, category, args: { origin: 'from palette' } });\n    palette.addItem({ command: finish_command, category, args: {origin: 'from palette' }});\n  }\n};\n\nasync function addFeedbackCell(cellNum: number, app: JupyterFrontEnd, currentWidget: NotebookPanel) {\n  const notebook = currentWidget.content;\n\n  // Set the active cell\n  notebook.activeCellIndex = cellNum;\n  notebook.activate();\n\n  // Insert a new cell below and wait for the command to complete\n  await app.commands.execute('notebook:insert-cell-below')\n  console.log('Feedback cell inserted');\n  await app.commands.execute('notebook:change-cell-to-markdown');\n  console.log('  Feedback cell changed to markdown successfully!');\n  // Access the newly inserted cell and set the text\n  const newCell = notebook.activeCell;\n  if (newCell) {\n    newCell.model.sharedModel.setSource(\"Feedback: \");\n    console.log('  \"Feedback\" inserted');\n    newCell.model.setMetadata('TYPE','FEEDBACK');\n    console.log('  Metadata set');\n  }\n}\n\nasync function addMarksCell(cellNum: number, app: JupyterFrontEnd, currentWidget: NotebookPanel, maxMarks: number, qp: string) {\n  const notebook = currentWidget.content;\n\n  // Set the active cell\n  notebook.activeCellIndex = cellNum;\n  notebook.activate();\n\n  // Insert a new cell below and wait for the command to complete\n  await app.commands.execute('notebook:insert-cell-below')\n  console.log('Marks cell inserted');\n  await app.commands.execute('notebook:change-cell-to-markdown');\n  console.log('  Marks cell changed to markdown successfully!');\n  // Access the newly inserted cell and set the text\n  const newCell = notebook.activeCell;\n  if (newCell) {\n    newCell.model.sharedModel.setSource(\"?/\"+(maxMarks.toString()));\n      console.log('  ?/? inserted');\n      newCell.model.setMetadata('TYPE','FEEDBACK');\n      newCell.model.setMetadata('QUESTION', qp);\n      newCell.model.setMetadata('HASMARKS',true);\n      console.log('  Metadata set');\n    }\n}\n\nasync function processAnswerCells(app: JupyterFrontEnd, currentWidget: NotebookPanel) {\n  const notebook = currentWidget.content;\n  const model = notebook.model;\n  var cells = model?.cells;\n  let questionCellList: number[] = [];\n  let marksList: number[] = []\n  let questionNumbers: string[] = [];\n\n  if (cells) {\n    for (let i = 0; i < cells.length; i++) {\n      const cell = cells.get(i);\n      if (cell instanceof CodeCellModel || cell instanceof MarkdownCellModel) {\n        const metadata = cell.metadata ? { ...cell.metadata } : {};\n\n        if (metadata['TYPE'] === 'ANSWER') {\n          questionCellList.push(i);\n          if (typeof metadata['MARKS'] === 'number') {\n            marksList.push(metadata['MARKS']);\n          }\n          if (typeof metadata['QUESTION'] === 'string') {\n            questionNumbers.push(metadata['QUESTION']);\n          }\n        }\n      }\n    }\n  } else {\n    console.error('No cells found in the notebook.');\n  }\n  questionCellList.reverse();\n  marksList.reverse();\n  questionNumbers.reverse();\n\n  console.log(questionCellList);\n\n//  for (const value of questionCellList) {\n  for (const [index, value] of questionCellList.entries()) {\n    console.log(`Inserting after: ${value}`);\n    await addMarksCell(value, app, currentWidget, marksList[index], questionNumbers[index]);\n    console.log('Marks done, now Feedback.');\n    await addFeedbackCell(value, app, currentWidget);\n    console.log('Done');\n    console.log();\n  }\n  await app.commands.execute(colourise);\n\n}\n\nfunction injectStylesIfNeeded() {\n  const styleId = 'm269-css'; // A unique ID for the style element\n\n  // Check if the style element already exists\n  if (!document.getElementById(styleId)) {\n    // If not, create and inject the CSS\n    const style = document.createElement('style');\n    style.id = styleId; // Assign the ID to the style element for future checks\n    style.innerHTML = `\n          .answercell{background-color: #ffffcc;}\n          .feedbackcell{background-color: #8d9aa1;}\n          .guidancecell{background-color: #f2c0d4;}\n        `;\n    document.head.appendChild(style);\n    console.log('Custom CSS injected');\n  } else {\n    console.log('Custom CSS already exists');\n  }\n}\n\nexport default plugin;"],"names":[],"sourceRoot":""}