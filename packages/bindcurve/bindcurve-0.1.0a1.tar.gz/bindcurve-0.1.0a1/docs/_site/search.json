[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BindCurve",
    "section": "",
    "text": "top menu: introduction tutorials API reference theory playground\nThis is a Quarto website.\nthis is a new sentence\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nmore stuff"
  },
  {
    "objectID": "theory.html",
    "href": "theory.html",
    "title": "Theory",
    "section": "",
    "text": "What function to use: fit_50\nLogistic models are implemented in the traditional sigmoid form. This model could be used broadly for any dose-response curve, where x corresponds to dose and y corresponds to response. In the context of BindCurve, x will commonly correspond to the total concentration of the titrated ligand. By fixing the slope in these models to a constant value (e.g.Â 1 for activation and -1 for inhibition), this four-parameter model is reduced to a three-parameter model.\n\n\nModel name: IC50\n\\(\\text{IC}_{50}\\) is fitted using the following equation:\n\\[\ny = ymin + (ymax - ymin) \\frac{1}{1 + \\left(\\frac{\\text{IC}_{50}}{x}\\right)^{\\text{slope}}}\n\\]\nwhere x is the dose, usually the total concentration of the titrated ligand\n\\[\nx = [L]_T\n\\]\n\n\n\nModel name: logIC50\nAnalogically, \\(\\text{logIC}_{50}\\) is fitted using:\n\\[\ny = ymin + (ymax - ymin) \\frac{1}{1 + 10^{\\text{slope}(\\text{logIC}_{50} - x)}}\n\\]\nwhere x is log transformed dose\n\\[\nx = \\log([L]_T)\n\\]\n\n\n\n\n\n\nNote\n\n\n\nOnce you have \\(\\text{logIC}_{50}\\) value, it can easily be converted to \\(\\text{pIC}_{50}\\) by multiplying with -1.",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "theory.html#model---direct-binding-simple",
    "href": "theory.html#model---direct-binding-simple",
    "title": "Theory",
    "section": "Model - Direct Binding, Simple",
    "text": "Model - Direct Binding, Simple\n\nModel A\n\n\nModel B\n\\[[R] = [R]_T\\]",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "theory.html#model---direct-binding-specific",
    "href": "theory.html#model---direct-binding-specific",
    "title": "Theory",
    "section": "Model - Direct Binding, Specific",
    "text": "Model - Direct Binding, Specific\nname: dir_specific\nTo properly describe direct binding beyond the simplified approximation above, let us look at an exact model. The dissociation constant \\(K_d^*\\) is defined as: \\[\nK_d^* = \\frac{[R][L^*]}{[RL^*]}\n\\]\nConservation of mass requires that: \\[\n[L^* ]_T = [L^*] + [RL^*]\n\\] \\[\n[R]_T = [R] + [RL^*]\n\\]\nwhere \\([R]_T\\) is the total concentration of the receptor and \\([L^*]\\) is the concentration of free labeled ligand. Thus, \\([RL^*]\\) is calculated as: \\[\n[RL^*] = \\frac{[R] [L^* ]_T}{K_d^* + [R]}\n\\]\nFrom the equations above, \\([R]\\) can be expressed in a quadratic equation: \\[\n[R]^2 + a[R] + b = 0\n\\]\nwhere the coefficients are calculated as: \\[\na = K_d^* + [L^*]_T - [R]_T\n\\] \\[\nb = -K_d^* [R]_T\n\\]\nThe physical solution for \\([R]\\) is calculated as the positive root using the quadratic formula: \\[\n[R] = \\frac{-a + \\sqrt{a^2 - 4b}}{2}\n\\]",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "theory.html#model---direct-binding-specific-nonspecific",
    "href": "theory.html#model---direct-binding-specific-nonspecific",
    "title": "Theory",
    "section": "Model - Direct Binding, Specific + Nonspecific",
    "text": "Model - Direct Binding, Specific + Nonspecific\nNonspecific binding (immobilization) of the labeled ligand \\(L^*\\) can be modeled by introducing a dimensionless, non-negative parameter \\(N^*\\). In this case, the dissociation constant \\(K_d^*\\) is defined in the same way as above: \\[\nK_d^* = \\frac{[R][L^*]}{[RL^*]}\n\\]\nNow, the conservation of mass requires that: \\[\n[L^* ]_T = [L^*] + [RL^*] + N^*[L^*]\n\\] \\[\n[R]_T = [R] + [RL^*]\n\\]\nThus, \\([RL^*]\\) is calculated as: \\[\n[RL^*] = \\frac{[R][L^*]_T}{K_d^*(1+N^*) + [R]}\n\\]\nAgain, \\([R]\\) can be expressed in a quadratic equation: \\[\n[R]^2 + a[R] + b = 0\n\\]\nwhere the coefficients are calculated as: \\[\na = K_d^*(1+N^*) + [L^*]_T - [R]_T\n\\] \\[\nb = -K_d^*[R]_T(1+N^*)\n\\]\nThe physical solution for \\([R]\\) is again calculated using the quadratic formula: \\[\n[R] = \\frac{-a + \\sqrt{a^2 - 4b}}{2}\n\\]\nClearly, the introduction of \\(N^*\\) leads to a model where the dissociation constant \\(K_d^*\\) is scaled by a factor of \\((1+N^*)\\). Thus, the total binding is modeled as specific binding defined by \\(K_d^*\\) and a nonspecific binding scaling term depending on \\(N^*\\). For example, if we consider \\(N^* = 0.5\\), the resulting effective dissociation constant for total binding in this model would be \\(1.5K_d^*\\) (total binding would be 150% of the specific binding). Finally, if \\(N^* = 0\\) (there is no nonspecific binding), the model collapses to the case for specific binding only.\n\nComplete competitive binding (three-state models)\n\n\n\n\n\n\nIn three-state models, the system is composed of receptor \\(R\\), labeled ligand \\(L^*\\), and unlabeled ligand \\(L\\). The formation of complex \\(RL^*\\) is described by a dissociation constant \\(K_d^*\\), while the formation of complex \\(RL\\) is described by a dissociation constant \\(K_d\\). For such a system, \\(F_b^*\\) could be related to the concentration of free receptor \\([R]\\) by the equation\n\\[\nF_b^* = \\frac{[RL^*]}{[L^*]_T} = \\frac{[R]}{K_d + [R]}\n\\]\nTo allow for a proper description of the dependent variable, the general framework for competitive binding is defined as\n\\[\ny = ymin + (ymax - ymin) \\frac{[R]}{K_d + [R]}\n\\]\nThe theory for the competitive binding models is based on:\n\nWang, 1995\nRoehrl, 2004",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "theory.html#symbols",
    "href": "theory.html#symbols",
    "title": "Theory",
    "section": "",
    "text": "\\([R]_T\\) \\([R]\\)\n\\([L^*]_T\\) \\([L^*]\\)\n\\([L]_T\\) \\([L]\\)\n\\([RL^*]\\) \\([RL]\\) \\([RLL^*]\\)\n\\(K_d^*\\) \\(K_d\\) \\(K_{d3}\\)"
  },
  {
    "objectID": "models.html",
    "href": "models.html",
    "title": "Models",
    "section": "",
    "text": "These models are calculated by the fit_50 function. You can use these models for any dose-response curves without knowing any concentrations in the system. Parameters ymin, ymax and slope could be fixed. If you fix slope to -1 (for inhibition) or 1 (for activation), the model will be reduced from a model with variable slope to a model with fixed slope.\n\n\n\n\n\n\n\n\n\n\nModel name\nDescription\nComplexity\nInput parameters\nFitted parameters\n\n\n\n\nIC50\nFits midpoint from c\nlogistic\n-\nymin, ymax, slope, IC50\n\n\nlogIC50\nFits midpoint from log(c)\nlogistic\n-\nymin, ymax, slope, logIC50",
    "crumbs": [
      "Home",
      "Models"
    ]
  },
  {
    "objectID": "models.html#symbols",
    "href": "models.html#symbols",
    "title": "Models",
    "section": "1 Symbols",
    "text": "1 Symbols\n\\([R]_T\\) \\([R]\\)\n\\([L^*]_T\\) \\([L^*]\\)\n\\([L]_T\\) \\([L]\\)\n\\([RL^*]\\) \\([RL]\\) \\([RLL^*]\\)\n\\(K_d^*\\) \\(K_d\\) \\(K_{d3}\\)\nfit_50, fit_Kd_direct, fit_Kd_competition, convert\n\n1.1 Direct binding models\nThese models are calculated by the fit_Kd_direct function. It is assumed that LsT is fixed and RT is titrated. Parameters min and max could be fixed.\n\n\n\n\n\n\n\n\n\n\nModel name\nDescription\nComplexity\nInput parameters\nFitted parameters\n\n\n\n\ndir_simple\nDirect binding - simple\n\\([R] = [R]_T\\)\n-\nmin, max, Kds\n\n\ndir_specific\nDirect binding - specific\nquadratic\nLsT\nmin, max, Kds\n\n\ndir_total\nDirect binding - total\nquadratic\nLsT, Ns\nmin, max, Kds\n\n\n\n\n\n1.2 Competitive binding - logistic models\nThese models are calculated by the fit_50 function. You can use these models for any dose-response curves without knowing any concentrations of the system components. Parameters min, max and slope could be fixed. If you fix slope to -1 or 1, the model will be reduced from a model with variable slope to a model with fixed slope.\n\n\n\n\n\n\n\n\n\n\nModel name\nDescription\nComplexity\nInput parameters\nFitted parameters\n\n\n\n\nIC50\nFits midpoint from c\nlogistic\n-\nmin, max, slope, IC50\n\n\nlogIC50\nFits midpoint from log(c)\nlogistic\n-\nmin, max, slope, logIC50\n\n\n\n\n\n1.3 Competitive binding - exact polynomial models\nThese models are calculated using the fit_Kd_competition function.\n\n\n1.4 IC50 -&gt; Kd conversion models\nThese models are calculated using the convert function."
  },
  {
    "objectID": "models.html#fixing",
    "href": "models.html#fixing",
    "title": "Models",
    "section": "2 Fixing",
    "text": "2 Fixing"
  },
  {
    "objectID": "models.html#fixing-parameters",
    "href": "models.html#fixing-parameters",
    "title": "Models",
    "section": "1 Fixing parameters",
    "text": "1 Fixing parameters\nBindCurve allows fixing certain parameters during fitting to user-defined value. In all models, you can fix both the ymin and/or ymax parameters which will constrain the lower and/or upper asymptote of the model. For example, if your data are normalized between 0 and 1, you can simply fix ymin to 0 and ymax to 1 and the fit will be constrained to these values. You can also fix these parameters to any other arbitrary value depending on your situation. The fit_50 function also allows fixing the slope parameter for the logistic models, which could be used to simplify the model. Typically, you might want to fix the slope to either -1 for inhibition, or 1 for activation.\nFixing of ymin and ymax parameters is controled by fix_min and fix_max arguments when calling any fitting function in BindCurve. The slope parameter can be fixed by fix_slope argument (only available for fit_50 function). All of these parameters are set to False by default, which means the parameter is fitted freely. When you change the fix_min, fix_max or fix_slope to any numerical value, the parameter will be fixed to the given value.\n\n# This will fix minimum to 0. Maximum and slope are fitted freely.\nIC50_results = bc.fit_50(input_data, model=\"IC50\", fix_min=0)\n\n# This will fix minimum to 0 and maximum to 1, slope is fitted variably\nIC50_results = bc.fit_50(input_data, model=\"IC50\", fix_min=0, fix_max=1)\n\n# This will fix minimum to 0, maximum to 1 and slope to -1\nIC50_results = bc.fit_50(input_data, model=\"IC50\", fix_min=0, fix_max=1, fix_slope=-1)\n\nFixing can also be useful when fitting Kd using the exact polynomial models. For example, if your competitive inhibition curve is not titrated all the way to the minimum asymptote, you can just fix the ymin parameter to the value of the lower asymptote, which you have determined previously from direct binding.\n\n# This will fix minimum to 20, maximum is fitted freely\nKd_results = bc.fit_Kd_competition(input_data, model=\"comp_3st_specific\", fix_min=20)\n\n# This will fix minimum to 20 and maximum to 140\nKd_results = bc.fit_Kd_competition(input_data, model=\"comp_3st_specific\", fix_min=20, fix_max=140)\n\n\n\n\n\n\n\nNote\n\n\n\nThe ymin and ymax parameters have different meaning for the logistic models and for the exact Kd models. In the logistic models, ymin and ymax will always correspont to the actual minimum and maximum of the curve, while for the exact Kd models these values define the asymptotes of the model, which might not be the same as the minimum and maximum of the observed curve."
  },
  {
    "objectID": "models.html#uncertainties",
    "href": "models.html#uncertainties",
    "title": "Models",
    "section": "Uncertainties",
    "text": "Uncertainties\nBindCurve offers two kinds of uncertainty estimates for the fitted parameters, both obtained from the underlying LMFIT library. For every fit, standard error (SE) is outputted. Additionally, the calculation of 95% confidence intervals is enabled by default, but could be disabled by setting ci=False. The 95% confidence interval is outputted as loCL and upCL, which correspond to lower and upper confidence limits. Please note that the 95% confidence interval can only be calculated if more than one parameter is freely fitted. In case only one parameter is freely fitted, BindCurve will automatically set ci=False and only SE will be calculated.",
    "crumbs": [
      "Home",
      "Models"
    ]
  },
  {
    "objectID": "models.html#goodness-of-fit",
    "href": "models.html#goodness-of-fit",
    "title": "Models",
    "section": "Goodness of fit",
    "text": "Goodness of fit\nTo quantify the goodness of fit, \\(\\chi^2\\) and \\(R^2\\) metrics are outputted for every fit. Good fit is characterized by low value of \\(\\chi^2\\) and high value (close to 1) of \\(R^2\\).",
    "crumbs": [
      "Home",
      "Models"
    ]
  },
  {
    "objectID": "models.html#parameter-fixing",
    "href": "models.html#parameter-fixing",
    "title": "Models",
    "section": "Parameter fixing",
    "text": "Parameter fixing\nBindCurve allows fixing certain parameters during fitting to user-defined value. In all models, you can fix both the ymin and/or ymax parameters which will constrain the lower and/or upper asymptote of the model. For example, if your data are normalized between 0 and 1, you can simply fix ymin to 0 and ymax to 1 and the fit will be constrained to these values. You can also fix these parameters to any other arbitrary value depending on your situation. The fit_50 function also allows fixing the slope parameter for the logistic models, which could be used to simplify the model. Typically, you might want to fix the slope to either -1 for inhibition, or 1 for activation.\nFixing of ymin and ymax parameters is controled by fix_ymin and fix_ymax arguments when calling any fitting function in BindCurve. The slope parameter can be fixed by fix_slope argument (only available for fit_50 function). All of these parameters are set to False by default, which means the parameter is fitted freely. When you change the fix_ymin, fix_ymax or fix_slope to any numerical value, the parameter will be fixed to the given value.\n\n# This will fix minimum to 0, maximum to 1 and slope to -1\nIC50_results = bc.fit_50(input_data, model=\"IC50\", fix_ymin=0, fix_ymax=1, fix_slope=-1)\n\nFixing can also be useful when fitting Kd using the exact polynomial models. For example, if your competitive inhibition curve is not titrated all the way to the minimum asymptote, you can just fix the ymin parameter to the value of the lower asymptote, which you have determined previously from direct binding.\n\n# This will fix minimum to 20, maximum is fitted freely\nKd_results = bc.fit_Kd_competition(input_data, model=\"comp_3st_specific\", fix_ymin=20)\n\n\n\n\n\n\n\nNote\n\n\n\nThe ymin and ymax parameters have different meaning for the logistic models and for the exact Kd models. In the logistic models, ymin and ymax will always correspont to the actual minimum and maximum of the curve. In the exact Kd models, ymin and ymax define the asymptotes of the model which is often not be the same as the minimum and maximum of the curve.",
    "crumbs": [
      "Home",
      "Models"
    ]
  },
  {
    "objectID": "symbols.html",
    "href": "symbols.html",
    "title": "BindCurve",
    "section": "",
    "text": "BindCurve uses the following symbols:\n\n\n\n\n\n\n\n\nSymbol\nSymbol in code\nMeaning\n\n\n\n\n\\([R]_T\\)\nRT\nTotal concentration of receptor.\n\n\n\\([R]\\)\nR\nConcentration of free receptor.\n\n\n\\([L^*]_T\\)\nLsT\nTotal concentration of labelled ligand.\n\n\n\\([L^*]\\)\nLs\nConcentration of free labelled ligand.\n\n\n\\([L]_T\\)\nLT\nTotal concentration of unlabelled ligand.\n\n\n\\([L]\\)\nL\nConcentration of free unlabelled ligand.\n\n\n\\([RL^*]\\)\nRLs\nConcentration of (receptor-labelled ligand) complex.\n\n\n\\([RL]\\)\nRL\nConcentration of (receptor-unlabelled ligand) complex.\n\n\n\\([RLL^*]\\)\nRLLs\nConcentration of (receptor-unlabelled ligand-labelled ligand) complex.\n\n\n\\(K_d^*\\)\nKds\nDissociation constant of labelled ligand.\n\n\n\\(K_d\\)\nKd\nDissociation constant of unlabelled ligand.\n\n\n\\(K_{d3}\\)\nKd3\nThe third dissociation constant in four-state models.\n\n\n\\(N^*\\)\nNs\nNonspecific binding parameter for the labeled ligand.\n\n\n\\(N\\)\nN\nNonspecific binding parameter for the unlabeled ligand.",
    "crumbs": [
      "Home",
      "Symbols"
    ]
  },
  {
    "objectID": "symbols.html#symbols",
    "href": "symbols.html#symbols",
    "title": "BindCurve",
    "section": "",
    "text": "BindCurve uses the following symbols:\n\n\n\n\n\n\n\n\nSymbol\nSymbol in code\nMeaning\n\n\n\n\n\\([R]_T\\)\nRT\nTotal concentration of receptor.\n\n\n\\([R]\\)\nR\nConcentration of free receptor.\n\n\n\\([L^*]_T\\)\nLsT\nTotal concentration of labelled ligand.\n\n\n\\([L^*]\\)\nLs\nConcentration of free labelled ligand.\n\n\n\\([L]_T\\)\nLT\nTotal concentration of unlabelled ligand.\n\n\n\\([L]\\)\nL\nConcentration of free unlabelled ligand.\n\n\n\\([RL^*]\\)\nRLs\nConcentration of (receptor-labelled ligand) complex.\n\n\n\\([RL]\\)\nRL\nConcentration of (receptor-unlabelled ligand) complex.\n\n\n\\([RLL^*]\\)\nRLLs\nConcentration of (receptor-unlabelled ligand-labelled ligand) complex.\n\n\n\\(K_d^*\\)\nKds\nDissociation constant of labelled ligand.\n\n\n\\(K_d\\)\nKd\nDissociation constant of unlabelled ligand.\n\n\n\\(K_{d3}\\)\nKd3\nThe third dissociation constant in four-state models.\n\n\n\\(N^*\\)\nNs\nNonspecific binding parameter for the labeled ligand.\n\n\n\\(N\\)\nN\nNonspecific binding parameter for the unlabeled ligand.",
    "crumbs": [
      "Home",
      "Symbols"
    ]
  },
  {
    "objectID": "theory.html#logistic-models",
    "href": "theory.html#logistic-models",
    "title": "Theory",
    "section": "",
    "text": "Logistic models are implemented in the traditional sigmoid form. This model could be used broadly for any dose-response curve, where x corresponds to dose and y corresponds to response. In the context of BindCurve, x will commonly correspond to the total concentration of the titrated ligand. By fixing the slope in these models to a constant value (e.g.Â 1 for activation and -1 for inhibition), this four-parameter model is reduced to a three-parameter model.\n\\(\\text{IC}_{50}\\) is fitted using the following equation:\n\\[\ny = ymin + (ymax - ymin) \\frac{1}{1 + \\left(\\frac{\\text{IC}_{50}}{x}\\right)^{\\text{slope}}}\n\\]\nwhere x is the dose, usually the total concentration of the titrated ligand\n\\[\nx = [L]_T\n\\]\nAnalogically, \\(\\text{logIC}_{50}\\) is fitted using:\n\\[\ny = ymin + (ymax - ymin) \\frac{1}{1 + 10^{\\text{slope}(\\text{logIC}_{50} - x)}}\n\\]\nwhere x is log transformed dose\n\\[\nx = \\log([L]_T)\n\\]",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "theory.html#exact-polynomial-models",
    "href": "theory.html#exact-polynomial-models",
    "title": "Theory",
    "section": "Exact polynomial models",
    "text": "Exact polynomial models\nBindCurve implements several exact models that allow for direct fitting of \\(K_d\\) from both direct and competitive binding experiments, given some crucial information about the system is known. These models are based on the assumption that the observed binding curve could be related to the bound fraction of the labeled ligand. This quantity is denoted as \\(F_b^*\\) and is defined as:\n\\[\nF_b^* = \\frac{[RL^*]}{[L^*]_T}\n\\]\nwhere \\([RL^*]\\) is the concentration of the complex of receptor and labeled ligand, and \\([L^*]_T\\) is the total concentration of the labeled ligand.\n\nDirect binding\n\n\n\n\n\n\nIn direct binding, the system is composed of receptor \\(R\\) and labeled ligand \\(L^*\\) which form complex \\(RL^*\\). This binding equilibrium is described by a dissociation constant \\(K_d^*\\). For such a system, \\(F_b^*\\) could be related to the concentration of free receptor \\([R]\\) by the equation\n\\[\nF_b^* = \\frac{[RL^*]}{[L^*]_T} = \\frac{[R]}{K_d^* + [R]}\n\\]\nTo allow for a proper description of the dependent variable, the general framework for direct binding is defined as\n\\[\ny = ymin + (ymax - ymin) \\frac{[R]}{K_d^* + [R]}\n\\]\n\nModel - Direct Binding - Simplified\nname: dir_simple\nIn this simplified model, the concentration of the free receptor \\([R]\\) is approximated by the total concentration of the receptor \\([R]_T\\). Thus, \\([R]\\) is simply given as: \\[\n[R] = [R]_T\n\\]",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "input_format.html",
    "href": "input_format.html",
    "title": "BindCurve",
    "section": "",
    "text": "BindCurve accepts the input data either from .csv file using the load_csv function, or from pandas dataframe using the load_df function. In both cases, the data should be formatted as follows:\n\nFirst row of the file should be a header. Names of columns do not matter, they will be standardized automatically.\nFirst column must contain compound names (for each row).\nSecond column must contain concentration in any units of your choosing. This unit will be retained throughout the workflow. When loading the data, concentration can be scaled by the c_scale argument. Concentration of 0 will raise error.\nThird to Nth columns are expected to contain your response values. There can be any number of replicates. The number of replicates can be different for each compound or for each concentration point.",
    "crumbs": [
      "Home",
      "Input format"
    ]
  },
  {
    "objectID": "input_format.html#input-format",
    "href": "input_format.html#input-format",
    "title": "BindCurve",
    "section": "",
    "text": "BindCurve accepts the input data either from .csv file using the load_csv function, or from pandas dataframe using the load_df function. In both cases, the data should be formatted as follows:\n\nFirst row of the file should be a header. Names of columns do not matter, they will be standardized automatically.\nFirst column must contain compound names (for each row).\nSecond column must contain concentration in any units of your choosing. This unit will be retained throughout the workflow. When loading the data, concentration can be scaled by the c_scale argument. Concentration of 0 will raise error.\nThird to Nth columns are expected to contain your response values. There can be any number of replicates. The number of replicates can be different for each compound or for each concentration point.",
    "crumbs": [
      "Home",
      "Input format"
    ]
  },
  {
    "objectID": "theory.html#model---direct-binding---simplified",
    "href": "theory.html#model---direct-binding---simplified",
    "title": "Theory",
    "section": "Model - Direct Binding - Simplified",
    "text": "Model - Direct Binding - Simplified\nname: dir_simple\nIn this simplified model, the concentration of the free receptor \\([R]\\) is approximated by the total concentration of the receptor \\([R]_T\\). Thus, \\([R]\\) is simply given as: \\[\n[R] = [R]_T\n\\]",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "theory.html#model---competitive-binding-specific-complete",
    "href": "theory.html#model---competitive-binding-specific-complete",
    "title": "Theory",
    "section": "Model - Competitive Binding, Specific, Complete",
    "text": "Model - Competitive Binding, Specific, Complete\nName: comp_3st_specific\nDissociation constants in the three-state model are defined as:\n\\[K_d^* = \\frac{[R][L^*]}{[RL^*]}\\]\n\\[K_d = \\frac{[R][L]}{[RL]}\\]\nConservation of mass requires that:\n\\[[L^* ]_T = [L^*] + [RL^*]\\]\n\\[[L]_T = [L] + [RL]\\]\n\\[[R]_T = [R] + [RL^*] + [RL]\\]\nThus, the concentrations of the complexes are calculated as:\n\\[[RL] = \\frac{[R][L]_T}{K_d + [R]}\\]\n\\[[RL^*] = \\frac{[R][L^*]_T}{K_d^* + [R]}\\]\nFrom the above equations, \\([R]\\) can be expressed in a cubic equation:\n\\[[R]^3 + a[R]^2 + b[R] + c = 0\\]\nWhere the coefficients are calculated as:\n\\[a = K_d^* + K_d + [L^*]_T + [L]_T - [R]_T\\]\n\\[b = K_d^*([L]_T - [R]_T) + K_d([L^*]_T - [R]_T) + K_d^* K_d\\]\n\\[c = - K_d^* K_d [R]_T\\]\nThe physical solution for \\([R]\\) can be calculated analytically using the equation:\n\\[\n[R] = -\\frac{a}{3} + \\frac{2}{3} \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right)\n\\]\nThe concentrations of both complexes are calculated as:\n\\[[RL^*] = \\frac{[L^*]_T \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}{3K_d^* + \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}\\]\n\\[[RL] = \\frac{[L]_T \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}{3K_d + \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}\\]\nThe angle \\(\\theta\\) is defined as:\n\\[\\theta = \\arccos\\left(\\frac{-2a^3 + 9ab - 27c}{2 \\sqrt{(a^2 - 3b)^3}}\\right)\\]",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "theory.html#ic50---kd-conversion-models",
    "href": "theory.html#ic50---kd-conversion-models",
    "title": "Theory",
    "section": "IC50 -> Kd conversion models",
    "text": "IC50 -&gt; Kd conversion models",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "theory.html#direct-binding",
    "href": "theory.html#direct-binding",
    "title": "Theory",
    "section": "Direct binding",
    "text": "Direct binding\nWhat function to use: fit_Kd_direct\n\n\n\n\n\nIn direct binding, the system is composed of receptor \\(R\\) and labeled ligand \\(L^*\\) which form complex \\(RL^*\\). This binding equilibrium is described by a dissociation constant \\(K_d^*\\). For such a system, \\(F_b^*\\) could be related to the concentration of free receptor \\([R]\\) by the equation\n\\[\nF_b^* = \\frac{[RL^*]}{[L^*]_T} = \\frac{[R]}{K_d^* + [R]}\n\\]\nTo allow for a proper description of the dependent variable, the general framework for direct binding is defined as\n\\[\ny = ymin + (ymax - ymin) \\frac{[R]}{K_d^* + [R]}\n\\]\n\nDirect binding - simplified\nModel name: dir_simple\nIn this simplified model, the concentration of the free receptor \\([R]\\) is approximated by the total concentration of the receptor \\([R]_T\\). Thus, \\([R]\\) is simply given as: \\[\n[R] = [R]_T\n\\]\n\n\nDirect binding - specific\nModel name: dir_specific\nTo properly describe direct binding beyond the simplified approximation above, let us look at an exact model. The dissociation constant \\(K_d^*\\) is defined as: \\[\nK_d^* = \\frac{[R][L^*]}{[RL^*]}\n\\]\nConservation of mass requires that: \\[\n[L^* ]_T = [L^*] + [RL^*]\n\\] \\[\n[R]_T = [R] + [RL^*]\n\\]\nwhere \\([R]_T\\) is the total concentration of the receptor and \\([L^*]\\) is the concentration of free labeled ligand. Thus, \\([RL^*]\\) is calculated as: \\[\n[RL^*] = \\frac{[R] [L^* ]_T}{K_d^* + [R]}\n\\]\nFrom the equations above, \\([R]\\) can be expressed in a quadratic equation: \\[\n[R]^2 + a[R] + b = 0\n\\]\nwhere the coefficients are calculated as: \\[\na = K_d^* + [L^*]_T - [R]_T\n\\] \\[\nb = -K_d^* [R]_T\n\\]\nThe physical solution for \\([R]\\) is calculated as the positive root using the quadratic formula:\n\\[\n[R] = \\frac{-a + \\sqrt{a^2 - 4b}}{2}\n\\]\n\n\nDirect binding - total\nModel name: dir_total\nNonspecific binding (immobilization) of the labeled ligand \\(L^*\\) can be modeled by introducing a dimensionless, non-negative parameter \\(N^*\\). In this case, the dissociation constant \\(K_d^*\\) is defined in the same way as above: \\[\nK_d^* = \\frac{[R][L^*]}{[RL^*]}\n\\]\nNow, the conservation of mass requires that: \\[\n[L^* ]_T = [L^*] + [RL^*] + N^*[L^*]\n\\] \\[\n[R]_T = [R] + [RL^*]\n\\]\nThus, \\([RL^*]\\) is calculated as: \\[\n[RL^*] = \\frac{[R][L^*]_T}{K_d^*(1+N^*) + [R]}\n\\]\nAgain, \\([R]\\) can be expressed in a quadratic equation: \\[\n[R]^2 + a[R] + b = 0\n\\]\nwhere the coefficients are calculated as: \\[\na = K_d^*(1+N^*) + [L^*]_T - [R]_T\n\\] \\[\nb = -K_d^*[R]_T(1+N^*)\n\\]\nThe physical solution for \\([R]\\) is again calculated using the quadratic formula: \\[\n[R] = \\frac{-a + \\sqrt{a^2 - 4b}}{2}\n\\]\nClearly, the introduction of \\(N^*\\) leads to a model where the dissociation constant \\(K_d^*\\) is scaled by a factor of \\((1+N^*)\\). Thus, the total binding is modeled as specific binding defined by \\(K_d^*\\) and a nonspecific binding scaling term depending on \\(N^*\\). For example, if we consider \\(N^* = 0.5\\), the resulting effective dissociation constant for total binding in this model would be \\(1.5K_d^*\\) (total binding would be 150% of the specific binding). Finally, if \\(N^* = 0\\) (there is no nonspecific binding), the model collapses to the case for specific binding only.",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "theory.html#complete-competitive-binding-three-state-models",
    "href": "theory.html#complete-competitive-binding-three-state-models",
    "title": "Theory",
    "section": "Complete competitive binding (three-state models)",
    "text": "Complete competitive binding (three-state models)\nWhat function to use: fit_Kd_competition\n\n\n\n\n\nIn three-state models, the system is composed of receptor \\(R\\), labeled ligand \\(L^*\\), and unlabeled ligand \\(L\\). The formation of complex \\(RL^*\\) is described by a dissociation constant \\(K_d^*\\), while the formation of complex \\(RL\\) is described by a dissociation constant \\(K_d\\). For such a system, \\(F_b^*\\) could be related to the concentration of free receptor \\([R]\\) by the equation\n\\[\nF_b^* = \\frac{[RL^*]}{[L^*]_T} = \\frac{[R]}{K_d + [R]}\n\\]\nTo allow for a proper description of the dependent variable, the general framework for competitive binding is defined as\n\\[\ny = ymin + (ymax - ymin) \\frac{[R]}{K_d + [R]}\n\\]\n\nComplete competitive binding - specific\nModel name: comp_3st_specific\nReferences: Wang 1995, Roehrl 2004\nDissociation constants in the three-state model are defined as:\n\\[\nK_d^* = \\frac{[R][L^*]}{[RL^*]}\n\\]\n\\[\nK_d = \\frac{[R][L]}{[RL]}\n\\]\nConservation of mass requires that:\n\\[\n[L^* ]_T = [L^*] + [RL^*]\n\\]\n\\[\n[L]_T = [L] + [RL]\n\\]\n\\[\n[R]_T = [R] + [RL^*] + [RL]\n\\]\nThus, the concentrations of the complexes are calculated as:\n\\[\n[RL] = \\frac{[R][L]_T}{K_d + [R]}\n\\]\n\\[\n[RL^*] = \\frac{[R][L^*]_T}{K_d^* + [R]}\n\\]\nFrom the above equations, \\([R]\\) can be expressed in a cubic equation:\n\\[\n[R]^3 + a[R]^2 + b[R] + c = 0\n\\]\nWhere the coefficients are calculated as:\n\\[\na = K_d^* + K_d + [L^*]_T + [L]_T - [R]_T\n\\]\n\\[\nb = K_d^*([L]_T - [R]_T) + K_d([L^*]_T - [R]_T) + K_d^* K_d\n\\]\n\\[\nc = - K_d^* K_d [R]_T\n\\]\nThe physical solution for \\([R]\\) can be calculated analytically using the equation:\n\\[\n[R] = -\\frac{a}{3} + \\frac{2}{3} \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right)\n\\]\nThe concentrations of both complexes are calculated as:\n\\[\n[RL^*] = \\frac{[L^*]_T \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}{3K_d^* + \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}\n\\]\n\\[\n[RL] = \\frac{[L]_T \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}{3K_d + \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}\n\\]\nThe angle \\(\\theta\\) is defined as:\n\\[\n\\theta = \\arccos\\left(\\frac{-2a^3 + 9ab - 27c}{2 \\sqrt{(a^2 - 3b)^3}}\\right)\n\\]\n\n\nComplete competitive binding - total\nModel name: comp_3st_total\nReferences: Roehrl 2004\nNonspecific binding of the unlabeled ligand can be modeled by introducing a dimensionless, non-negative parameter \\(N\\). In such case, the dissociation constants \\(K_d^*\\) and \\(K_d\\) are defined the same way as above, and the conservation of mass now requires that:\n\\[\n[L^* ]_T = [L^*] + [RL^*]\n\\]\n\\[\n[L]_T = [L] + [RL] + N[L]\n\\]\n\\[\n[R]_T = [R] + [RL^*] + [RL]\n\\]\nFrom the above equations, \\([R]\\) can again be expressed in a cubic equation:\n\\[\n[R]^3 + a[R]^2 + b[R] + c = 0\n\\]\nWhere the coefficients are calculated as:\n\\[\na = K_d^* + (1+N)K_d + [L^* ]_T + [L]_T - [R]_T\n\\] \\[\nb = K_d^* ([L]_T - [R]_T) + (1+N)K_d ([L^* ]_T - [R]_T) + (1+N)K_d^* K_d\n\\] \\[\nc = -(1+N) K_d^* K_d [R]_T\n\\]\nThe physical solution for \\([R]\\) can be calculated analytically using the same set of equations as above. Analogous to the direct binding case, the introduction of \\(N\\) leads to a model where \\(K_d\\) is scaled by a factor of \\((1+N)\\).\n\n\n\n\n\n\nNote\n\n\n\nIn models of competitive binding, the nonspecific binding of the labeled ligand (\\(N^*\\)) is neglected as it is assumed that labeled ligands with significant nonspecific immobilization would not be used for such experiments.",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "theory.html#incomplete-competitive-binding-four-state-models",
    "href": "theory.html#incomplete-competitive-binding-four-state-models",
    "title": "Theory",
    "section": "Incomplete competitive binding (four-state models)",
    "text": "Incomplete competitive binding (four-state models)\nWhat function to use: fit_Kd_competition\n\n\n\n\n\nIn four-state models, the system is also composed of receptor \\(R\\), labeled ligand \\(L^*\\), and unlabeled ligand \\(L\\). However, in addition to complexes \\(RL^*\\) and \\(RL\\), a ternary complex \\(RLL^*\\) is also considered. The dissociation constants \\(K_d^*\\) and \\(K_d\\) are defined as in the three-state model, and the formation of \\(RLL^*\\) from \\(RL\\) and \\(L^*\\) is described by dissociation constant \\(K_{d3}\\). The constant \\(K_{d4}\\) is not used in the model.\nFor the four-state models, \\(F_b^*\\) and the general framework of the model stay the same as for three-state systems and is written as\n\\[\nF_b^* = \\frac{[RL^*]}{[L^*]_T} = \\frac{[R]}{K_d + [R]}\n\\]\n\\[\ny = ymin + (ymax - ymin) \\frac{[R]}{K_d + [R]}\n\\]\n\nIncomplete competitive binding - specific\nModel name: comp_4st_specific\nReferences: Roehrl 2004\nDissociation constants in the four-state model are defined as:\n\\[\nK_d^* = \\frac{[R][L^*]}{[RL^*]}  \n\\]\n\\[\nK_d = \\frac{[R][L]}{[RL]}  \n\\]\n\\[\nK_{d3} = \\frac{[RL][L^*]}{[RLL^*]}  \n\\]\n\\[\nK_{d4} = \\frac{[RL^*][L]}{[RLL^*]} \\quad \\text{(not used)}  \n\\]\nConservation of mass requires that:\n\\[\n[L^*]_T = [L^*] + [RL^*] + [RLL^*]  \n\\]\n\\[\n[L]_T = [L] + [RL] + [RLL^*]  \n\\]\n\\[\n[R]_T = [R] + [RL^*] + [RL] + [RLL^*]  \n\\]\nThus, concentrations of the complexes are calculated as:\n\\[\n[RL^*] = \\frac{[R]([L^*_T] - [RLL^*])}{K_d^* + [R]} \\quad ???  \n\\]\n\\[\n[RL] = \\frac{[R]([L_T] - [RLL^*])}{K_d + [R]} \\quad ???  \n\\]\n\\[\n[RLL^*] = \\frac{[RL]([L^*_T] - [RL^*])}{K_{d3} + [RL]} \\quad ???  \n\\]\nFrom the above equations, \\([R]\\) can be expressed in a quintic equation:\n\\[\na[R]^5 + b[R]^4 + c[R]^3 + d[R]^2 + e[R] + f = 0  \n\\]\nThe coefficients \\(a\\), \\(b\\), \\(c\\), \\(d\\), \\(e\\), and \\(f\\) are quite lengthy and can be found in the source code. There is no analytical solution to the quintic equation, but it can be solved numerically.\n\n\nIncomplete competitive binding - total\nModel name: comp_4st_total\nReferences: Roehrl 2004\nIn analogy to the other models, total binding in the comp_4st_total model is modeled by scaling \\(K_d\\) by a factor of \\((1 + N)\\).",
    "crumbs": [
      "Home",
      "Theory"
    ]
  },
  {
    "objectID": "tutorials/basics.html",
    "href": "tutorials/basics.html",
    "title": "BindCurve",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport calculate\nimport data\nimport lmfit\nimport models\n\npd.set_option(\"display.precision\", 5)\npd.set_option('display.width', 200)\n\n\ninput_data = data.load_data(\"JZ/data/aktivni_pokus.csv\")\n\nprint(input_data)\n\nLoading data from JZ/data/aktivni_pokus.csv\n    compound         c    log c  n_reps   rep1   rep2   rep3   rep4   rep5   rep6   rep7   rep8  median        SD      SEM\n0      TD139  400.0000  2.60206       6    NaN    NaN   32.0   29.0   33.0   31.0   27.0   30.0    30.5   2.16025  0.88192\n1      TD139   40.0000  1.60206       6    NaN    NaN   23.0   26.0   27.0   25.0   26.0   30.0    26.0   2.31661  0.94575\n2      TD139    4.0000  0.60206       8   27.0   26.0   24.0   27.0   28.0   32.0   28.0   25.0    27.0   2.41646  0.85435\n3      TD139    2.0000  0.30103       2   26.0   27.0    NaN    NaN    NaN    NaN    NaN    NaN    26.5   0.70711  0.50000\n4      TD139    1.0000  0.00000       2   25.0   24.0    NaN    NaN    NaN    NaN    NaN    NaN    24.5   0.70711  0.50000\n5      TD139    0.5000 -0.30103       2   27.0   25.0    NaN    NaN    NaN    NaN    NaN    NaN    26.0   1.41421  1.00000\n6      TD139    0.4000 -0.39794       6    NaN    NaN   25.0   29.0   29.0   29.0   26.0   29.0    29.0   1.83485  0.74907\n7      TD139    0.2500 -0.60206       2   29.0   25.0    NaN    NaN    NaN    NaN    NaN    NaN    27.0   2.82843  2.00000\n8      TD139    0.1200 -0.92082       2   31.0   32.0    NaN    NaN    NaN    NaN    NaN    NaN    31.5   0.70711  0.50000\n9      TD139    0.0600 -1.22185       2   41.0   36.0    NaN    NaN    NaN    NaN    NaN    NaN    38.5   3.53553  2.50000\n10     TD139    0.0400 -1.39794       6    NaN    NaN   44.0   43.0   44.0   51.0   52.0   52.0    47.5   4.41210  1.80123\n11     TD139    0.0300 -1.52288       2   58.0   60.0    NaN    NaN    NaN    NaN    NaN    NaN    59.0   1.41421  1.00000\n12     TD139    0.0150 -1.82391       2   85.0   91.0    NaN    NaN    NaN    NaN    NaN    NaN    88.0   4.24264  3.00000\n13     TD139    0.0070 -2.15490       2   99.0  102.0    NaN    NaN    NaN    NaN    NaN    NaN   100.5   2.12132  1.50000\n14     TD139    0.0040 -2.39794       8   98.0   97.0   93.0   92.0   97.0  102.0   98.0  104.0    97.5   4.03334  1.42600\n15     TD139    0.0020 -2.69897       2  104.0  104.0    NaN    NaN    NaN    NaN    NaN    NaN   104.0   0.00000  0.00000\n16     TD139    0.0004 -3.39794       6    NaN    NaN  101.0   99.0   99.0  103.0  109.0  108.0   102.0   4.40076  1.79660\n17  JZ7-47-4  800.0000  2.90309       8   25.0   28.0   26.0   27.0   28.0   27.0   27.0   24.0    27.0   1.41421  0.50000\n18  JZ7-47-4  400.0000  2.60206       8   26.0   28.0   28.0   27.0   26.0   28.0   27.0   23.0    27.0   1.68502  0.59574\n19  JZ7-47-4  100.0000  2.00000       2   28.0   30.0    NaN    NaN    NaN    NaN    NaN    NaN    29.0   1.41421  1.00000\n20  JZ7-47-4   40.0000  1.60206       6    NaN    NaN   25.0   24.0   29.0   29.0   26.0   30.0    27.5   2.48328  1.01379\n21  JZ7-47-4   25.0000  1.39794       2   26.0   25.0    NaN    NaN    NaN    NaN    NaN    NaN    25.5   0.70711  0.50000\n22  JZ7-47-4    6.0000  0.77815       2   24.0   27.0    NaN    NaN    NaN    NaN    NaN    NaN    25.5   2.12132  1.50000\n23  JZ7-47-4    4.0000  0.60206       6    NaN    NaN   27.0   26.0   33.0   24.0   26.0   23.0    26.0   3.50714  1.43178\n24  JZ7-47-4    1.5000  0.17609       2   24.0   27.0    NaN    NaN    NaN    NaN    NaN    NaN    25.5   2.12132  1.50000\n25  JZ7-47-4    0.4000 -0.39794       8   26.0   32.0   32.0   30.0   31.0   27.0   26.0   27.0    28.5   2.64237  0.93422\n26  JZ7-47-4    0.1000 -1.00000       2   55.0   56.0    NaN    NaN    NaN    NaN    NaN    NaN    55.5   0.70711  0.50000\n27  JZ7-47-4    0.0400 -1.39794       6    NaN    NaN   94.0   98.0   97.0   63.0   67.0   67.0    80.5  16.91153  6.90411\n28  JZ7-47-4    0.0250 -1.60206       2   99.0   97.0    NaN    NaN    NaN    NaN    NaN    NaN    98.0   1.41421  1.00000\n29  JZ7-47-4    0.0060 -2.22185       2  102.0  101.0    NaN    NaN    NaN    NaN    NaN    NaN   101.5   0.70711  0.50000\n30  JZ7-47-4    0.0040 -2.39794       6    NaN    NaN  109.0  109.0  106.0   99.0   96.0  102.0   104.0   5.39444  2.20227\n31  JZ7-47-4    0.0015 -2.82391       2  104.0  108.0    NaN    NaN    NaN    NaN    NaN    NaN   106.0   2.82843  2.00000\n32  JZ7-47-4    0.0004 -3.39794       6    NaN    NaN  106.0  103.0  110.0  106.0  106.0  106.0   106.0   2.22860  0.90982\n33  JZ7-50-2  800.0000  2.90309       2   33.0   34.0    NaN    NaN    NaN    NaN    NaN    NaN    33.5   0.70711  0.50000\n34  JZ7-50-2  400.0000  2.60206       2   29.0   29.0    NaN    NaN    NaN    NaN    NaN    NaN    29.0   0.00000  0.00000\n35  JZ7-50-2  100.0000  2.00000       2   26.0   27.0    NaN    NaN    NaN    NaN    NaN    NaN    26.5   0.70711  0.50000\n36  JZ7-50-2   40.0000  1.60206       6    NaN    NaN   27.0   25.0   29.0   27.0   25.0   27.0    27.0   1.50555  0.61464\n37  JZ7-50-2   25.0000  1.39794       2   28.0   27.0    NaN    NaN    NaN    NaN    NaN    NaN    27.5   0.70711  0.50000\n38  JZ7-50-2    6.0000  0.77815       2   22.0   30.0    NaN    NaN    NaN    NaN    NaN    NaN    26.0   5.65685  4.00000\n39  JZ7-50-2    4.0000  0.60206       6    NaN    NaN   23.0   26.0   29.0   23.0   24.0   26.0    25.0   2.31661  0.94575\n40  JZ7-50-2    1.5000  0.17609       2   28.0   29.0    NaN    NaN    NaN    NaN    NaN    NaN    28.5   0.70711  0.50000\n41  JZ7-50-2    0.4000 -0.39794       8   29.0   28.0   26.0   34.0   32.0   30.0   29.0   30.0    29.5   2.43487  0.86086\n42  JZ7-50-2    0.1000 -1.00000       2   39.0   41.0    NaN    NaN    NaN    NaN    NaN    NaN    40.0   1.41421  1.00000\n43  JZ7-50-2    0.0400 -1.39794       6    NaN    NaN   77.0   69.0   74.0   65.0   73.0   71.0    72.0   4.18330  1.70783\n44  JZ7-50-2    0.0250 -1.60206       2   82.0   84.0    NaN    NaN    NaN    NaN    NaN    NaN    83.0   1.41421  1.00000\n45  JZ7-50-2    0.0060 -2.22185       2   99.0  103.0    NaN    NaN    NaN    NaN    NaN    NaN   101.0   2.82843  2.00000\n46  JZ7-50-2    0.0040 -2.39794       6    NaN    NaN  104.0  107.0  110.0  101.0   97.0  101.0   102.5   4.67618  1.90904\n47  JZ7-50-2    0.0015 -2.82391       2  103.0  103.0    NaN    NaN    NaN    NaN    NaN    NaN   103.0   0.00000  0.00000\n48  JZ7-50-2    0.0004 -3.39794       6    NaN    NaN  105.0  110.0  107.0  109.0  105.0  107.0   107.0   2.04124  0.83333\n\n\n\ncompounds = input_data[\"compound\"].unique()\nprint(\"Detected compounds:\", compounds)\nprint(\"No of compounds:\", len(compounds))\n\nDetected compounds: ['TD139' 'JZ7-47-4' 'JZ7-50-2']\nNo of compounds: 3\n\n\n\nRT = 0.03           # [R]T parameter\nLsT = 0.005           # [L]*T parameter\nKds = 0.02164        # Kd of the probe\n\n\nKd_results = calculate.fit_Kd(input_data, model=\"comp_3st_specific\", RT=RT, LsT=LsT, Kds=Kds, ci=True, fix_min=27, fix_max=False)\nKd_results = Kd_results.sort_values(by=['Kd'], ascending=False)\nprint(Kd_results)\nKd_results.to_clipboard(excel=True, sep=\",\")\n\nFitting comp_3st_specific ...\n   compound  n_points       Kd     loCL     upCL       SE              model  min        max    RT    LsT      Kds       Chi^2      R^2\n1  JZ7-47-4        70  0.01700  0.01316  0.02189  0.00233  comp_3st_specific   27  172.12952  0.03  0.005  0.02164  2442.67878  0.97116\n2  JZ7-50-2        58  0.00927  0.00790  0.01084  0.00075  comp_3st_specific   27  171.08798  0.03  0.005  0.02164   627.58237  0.99070\n0     TD139        66  0.00222  0.00182  0.00267  0.00021  comp_3st_specific   27  165.72488  0.03  0.005  0.02164   696.20233  0.98970\n\n\n\nplt.figure(figsize=(7, 6))\n\ndata.plot(input_data, Kd_results, compound_sel=False, show_all_data=True, show_medians=False)\n\nplt.xlabel(\"Log concentration\")\nplt.ylabel(\"Response\")\nplt.xscale(\"log\")\nplt.legend()\n#plt.savefig(\"actives_alldata.png\", dpi=150)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data setup\nx = np.linspace(0, 10, 100)\ny_list = [np.sin(x), np.cos(x), np.tan(x), np.exp(-x)]  # list of functions\n\n# Create a 2x2 grid of subplots\nfig, axes = plt.subplots(2, 2, figsize=(7, 5))  # 2 rows, 2 columns\n\n# Flatten the 2D axes array to iterate over it\naxes = axes.flatten()\n\n# Plot each function on a different subplot\nfor i, y in enumerate(y_list):\n    axes[i].plot(x, y)\n    axes[i].set_title(f\"Plot {i+1}\")\n\n# Adjust layout to avoid overlap\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nprint(compounds)\n\n['TD139' 'JZ7-47-4' 'JZ7-50-2']\n\n\n\ndata.plot(input_data, Kd_results, compound_sel=False, show_all_data=True, show_medians=False)\n\n\n# Create a 2x2 grid of subplots\nfig, axes = plt.subplots(2, 2, figsize=(7, 5))  # 2 rows, 2 columns\n\n# Flatten the 2D axes array to iterate over it\naxes = axes.flatten()\n\n# Plot each function on a different subplot\nfor i, compound in enumerate(compounds):\n    axes[i].plot\n    axes[i].set_title(f\"Plot {i+1}\")\n\n# Adjust layout to avoid overlap\nplt.tight_layout()\nplt.show()\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[12], line 12\n     10 # Plot each function on a different subplot\n     11 for i, compound in enumerate(compounds):\n---&gt; 12     axes[i].data.plot(input_data, Kd_results, compound_sel=False, show_all_data=True, show_medians=False)\n     13     axes[i].set_title(f\"Plot {i+1}\")\n     15 # Adjust layout to avoid overlap\n\nAttributeError: 'Axes' object has no attribute 'data'",
    "crumbs": [
      "Home",
      "Tutorials",
      "Basics"
    ]
  },
  {
    "objectID": "tutorials/tutorial2.html",
    "href": "tutorials/tutorial2.html",
    "title": "This is a tutorial",
    "section": "",
    "text": "print(\"hello\")",
    "crumbs": [
      "Home",
      "Tutorials",
      "tutorial2"
    ]
  },
  {
    "objectID": "theory_logistic.html",
    "href": "theory_logistic.html",
    "title": "Logistic models",
    "section": "",
    "text": "What function to use: fit_50\nLogistic models are implemented in the traditional sigmoid form. This model could be used broadly for any dose-response curve, where x corresponds to dose and y corresponds to response. In the context of BindCurve, x will commonly correspond to the total concentration of the titrated ligand. By fixing the slope in these models to a constant value (e.g.Â 1 for activation and -1 for inhibition), this four-parameter model is reduced to a three-parameter model.\n\nFitting midpoint\nModel name: IC50\n\\(\\text{IC}_{50}\\) is fitted using the following equation:\n\\[\ny = ymin + (ymax - ymin) \\frac{1}{1 + \\left(\\frac{\\text{IC}_{50}}{x}\\right)^{\\text{slope}}}\n\\]\nwhere x is the dose, usually the total concentration of the titrated ligand\n\\[\nx = [L]_T\n\\]\n\n\nFitting midpoint from log-transformed data\nModel name: logIC50\nAnalogically, \\(\\text{logIC}_{50}\\) is fitted using:\n\\[\ny = ymin + (ymax - ymin) \\frac{1}{1 + 10^{\\text{slope}(\\text{logIC}_{50} - x)}}\n\\]\nwhere x is log transformed dose\n\\[\nx = \\log([L]_T)\n\\]\n\n\n\n\n\n\nNote\n\n\n\nOnce you have \\(\\text{logIC}_{50}\\) value, it can easily be converted to \\(\\text{pIC}_{50}\\) by multiplying with -1.",
    "crumbs": [
      "Home",
      "Theory",
      "Logistic models"
    ]
  },
  {
    "objectID": "theory_exact.html",
    "href": "theory_exact.html",
    "title": "Exact Kd models",
    "section": "",
    "text": "BindCurve implements several exact models that allow for direct fitting of \\(K_d\\) from both direct and competitive binding experiments, given some crucial informations about the system are known. These models are based on the assumption that the observed binding curve could be related to the bound fraction of the labeled ligand. This quantity is denoted as \\(F_b^*\\) and is defined as:\n\\[\nF_b^* = \\frac{[RL^*]}{[L^*]_T}\n\\]\nwhere \\([RL^*]\\) is the concentration of the complex of receptor and labeled ligand, and \\([L^*]_T\\) is the total concentration of the labeled ligand.",
    "crumbs": [
      "Home",
      "Theory",
      "Exact Kd models"
    ]
  },
  {
    "objectID": "theory_exact.html#direct-binding",
    "href": "theory_exact.html#direct-binding",
    "title": "Exact Kd models",
    "section": "Direct binding",
    "text": "Direct binding\nWhat function to use: fit_Kd_direct\n\n\n\n\n\nIn direct binding, the system is composed of receptor \\(R\\) and labeled ligand \\(L^*\\) which form complex \\(RL^*\\). This binding equilibrium is described by a dissociation constant \\(K_d^*\\). For such a system, \\(F_b^*\\) could be related to the concentration of free receptor \\([R]\\) by the equation\n\\[\nF_b^* = \\frac{[RL^*]}{[L^*]_T} = \\frac{[R]}{K_d^* + [R]}\n\\]\nTo allow for a proper description of the dependent variable, the general framework for direct binding is defined as\n\\[\ny = ymin + (ymax - ymin) \\frac{[R]}{K_d^* + [R]}\n\\]\n\nDirect binding - simplified\nModel name: dir_simple\nIn this simplified model, the concentration of the free receptor \\([R]\\) is approximated by the total concentration of the receptor \\([R]_T\\). Thus, \\([R]\\) is simply given as: \\[\n[R] = [R]_T\n\\]\n\n\nDirect binding - specific\nModel name: dir_specific\nTo properly describe direct binding beyond the simplified approximation above, let us look at an exact model. The dissociation constant \\(K_d^*\\) is defined as: \\[\nK_d^* = \\frac{[R][L^*]}{[RL^*]}\n\\]\nConservation of mass requires that: \\[\n[L^* ]_T = [L^*] + [RL^*]\n\\] \\[\n[R]_T = [R] + [RL^*]\n\\]\nwhere \\([R]_T\\) is the total concentration of the receptor and \\([L^*]\\) is the concentration of free labeled ligand. Thus, \\([RL^*]\\) is calculated as: \\[\n[RL^*] = \\frac{[R] [L^* ]_T}{K_d^* + [R]}\n\\]\nFrom the equations above, \\([R]\\) can be expressed in a quadratic equation: \\[\n[R]^2 + a[R] + b = 0\n\\]\nwhere the coefficients are calculated as: \\[\na = K_d^* + [L^*]_T - [R]_T\n\\] \\[\nb = -K_d^* [R]_T\n\\]\nThe physical solution for \\([R]\\) is calculated as the positive root using the quadratic formula:\n\\[\n[R] = \\frac{-a + \\sqrt{a^2 - 4b}}{2}\n\\]\n\n\nDirect binding - total\nModel name: dir_total\nNonspecific binding (immobilization) of the labeled ligand \\(L^*\\) can be modeled by introducing a dimensionless, non-negative parameter \\(N^*\\). In this case, the dissociation constant \\(K_d^*\\) is defined in the same way as above: \\[\nK_d^* = \\frac{[R][L^*]}{[RL^*]}\n\\]\nNow, the conservation of mass requires that: \\[\n[L^* ]_T = [L^*] + [RL^*] + N^*[L^*]\n\\] \\[\n[R]_T = [R] + [RL^*]\n\\]\nThus, \\([RL^*]\\) is calculated as: \\[\n[RL^*] = \\frac{[R][L^*]_T}{K_d^*(1+N^*) + [R]}\n\\]\nAgain, \\([R]\\) can be expressed in a quadratic equation: \\[\n[R]^2 + a[R] + b = 0\n\\]\nwhere the coefficients are calculated as: \\[\na = K_d^*(1+N^*) + [L^*]_T - [R]_T\n\\] \\[\nb = -K_d^*[R]_T(1+N^*)\n\\]\nThe physical solution for \\([R]\\) is again calculated using the quadratic formula: \\[\n[R] = \\frac{-a + \\sqrt{a^2 - 4b}}{2}\n\\]\nClearly, the introduction of \\(N^*\\) leads to a model where the dissociation constant \\(K_d^*\\) is scaled by a factor of \\((1+N^*)\\). Thus, the total binding is modeled as specific binding defined by \\(K_d^*\\) and a nonspecific binding scaling term depending on \\(N^*\\). For example, if we consider \\(N^* = 0.5\\), the resulting effective dissociation constant for total binding in this model would be \\(1.5K_d^*\\) (total binding would be 150% of the specific binding). Finally, if \\(N^* = 0\\) (there is no nonspecific binding), the model collapses to the case for specific binding only.",
    "crumbs": [
      "Home",
      "Theory",
      "Exact Kd models"
    ]
  },
  {
    "objectID": "theory_exact.html#complete-competitive-binding-three-state-models",
    "href": "theory_exact.html#complete-competitive-binding-three-state-models",
    "title": "Exact Kd models",
    "section": "Complete competitive binding (three-state models)",
    "text": "Complete competitive binding (three-state models)\nWhat function to use: fit_Kd_competition\n\n\n\n\n\nIn three-state models, the system is composed of receptor \\(R\\), labeled ligand \\(L^*\\), and unlabeled ligand \\(L\\). The formation of complex \\(RL^*\\) is described by a dissociation constant \\(K_d^*\\), while the formation of complex \\(RL\\) is described by a dissociation constant \\(K_d\\). For such a system, \\(F_b^*\\) could be related to the concentration of free receptor \\([R]\\) by the equation\n\\[\nF_b^* = \\frac{[RL^*]}{[L^*]_T} = \\frac{[R]}{K_d + [R]}\n\\]\nTo allow for a proper description of the dependent variable, the general framework for competitive binding is defined as\n\\[\ny = ymin + (ymax - ymin) \\frac{[R]}{K_d + [R]}\n\\]\n\nComplete competitive binding - specific\nModel name: comp_3st_specific\nReferences: Wang 1995, Roehrl 2004\nDissociation constants in the three-state model are defined as:\n\\[\nK_d^* = \\frac{[R][L^*]}{[RL^*]}\n\\]\n\\[\nK_d = \\frac{[R][L]}{[RL]}\n\\]\nConservation of mass requires that:\n\\[\n[L^* ]_T = [L^*] + [RL^*]\n\\]\n\\[\n[L]_T = [L] + [RL]\n\\]\n\\[\n[R]_T = [R] + [RL^*] + [RL]\n\\]\nThus, the concentrations of the complexes are calculated as:\n\\[\n[RL] = \\frac{[R][L]_T}{K_d + [R]}\n\\]\n\\[\n[RL^*] = \\frac{[R][L^*]_T}{K_d^* + [R]}\n\\]\nFrom the above equations, \\([R]\\) can be expressed in a cubic equation:\n\\[\n[R]^3 + a[R]^2 + b[R] + c = 0\n\\]\nWhere the coefficients are calculated as:\n\\[\na = K_d^* + K_d + [L^*]_T + [L]_T - [R]_T\n\\]\n\\[\nb = K_d^*([L]_T - [R]_T) + K_d([L^*]_T - [R]_T) + K_d^* K_d\n\\]\n\\[\nc = - K_d^* K_d [R]_T\n\\]\nThe physical solution for \\([R]\\) can be calculated analytically using the equation:\n\\[\n[R] = -\\frac{a}{3} + \\frac{2}{3} \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right)\n\\]\nThe concentrations of both complexes are calculated as:\n\\[\n[RL^*] = \\frac{[L^*]_T \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}{3K_d^* + \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}\n\\]\n\\[\n[RL] = \\frac{[L]_T \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}{3K_d + \\left(2 \\sqrt{(a^2 - 3b)} \\cos\\left(\\frac{\\theta}{3}\\right) - a\\right)}\n\\]\nThe angle \\(\\theta\\) is defined as:\n\\[\n\\theta = \\arccos\\left(\\frac{-2a^3 + 9ab - 27c}{2 \\sqrt{(a^2 - 3b)^3}}\\right)\n\\]\n\n\nComplete competitive binding - total\nModel name: comp_3st_total\nReferences: Roehrl 2004\nNonspecific binding of the unlabeled ligand can be modeled by introducing a dimensionless, non-negative parameter \\(N\\). In such case, the dissociation constants \\(K_d^*\\) and \\(K_d\\) are defined the same way as above, and the conservation of mass now requires that:\n\\[\n[L^* ]_T = [L^*] + [RL^*]\n\\]\n\\[\n[L]_T = [L] + [RL] + N[L]\n\\]\n\\[\n[R]_T = [R] + [RL^*] + [RL]\n\\]\nFrom the above equations, \\([R]\\) can again be expressed in a cubic equation:\n\\[\n[R]^3 + a[R]^2 + b[R] + c = 0\n\\]\nWhere the coefficients are calculated as:\n\\[\na = K_d^* + (1+N)K_d + [L^* ]_T + [L]_T - [R]_T\n\\] \\[\nb = K_d^* ([L]_T - [R]_T) + (1+N)K_d ([L^* ]_T - [R]_T) + (1+N)K_d^* K_d\n\\] \\[\nc = -(1+N) K_d^* K_d [R]_T\n\\]\nThe physical solution for \\([R]\\) can be calculated analytically using the same set of equations as above. Analogous to the direct binding case, the introduction of \\(N\\) leads to a model where \\(K_d\\) is scaled by a factor of \\((1+N)\\).\n\n\n\n\n\n\nNote\n\n\n\nIn models of competitive binding, the nonspecific binding of the labeled ligand (\\(N^*\\)) is neglected as it is assumed that labeled ligands with significant nonspecific immobilization would not be used for such experiments.",
    "crumbs": [
      "Home",
      "Theory",
      "Exact Kd models"
    ]
  },
  {
    "objectID": "theory_exact.html#incomplete-competitive-binding-four-state-models",
    "href": "theory_exact.html#incomplete-competitive-binding-four-state-models",
    "title": "Exact Kd models",
    "section": "Incomplete competitive binding (four-state models)",
    "text": "Incomplete competitive binding (four-state models)\nWhat function to use: fit_Kd_competition\n\n\n\n\n\nIn four-state models, the system is also composed of receptor \\(R\\), labeled ligand \\(L^*\\), and unlabeled ligand \\(L\\). However, in addition to complexes \\(RL^*\\) and \\(RL\\), a ternary complex \\(RLL^*\\) is also considered. The dissociation constants \\(K_d^*\\) and \\(K_d\\) are defined as in the three-state model, and the formation of \\(RLL^*\\) from \\(RL\\) and \\(L^*\\) is described by dissociation constant \\(K_{d3}\\). The constant \\(K_{d4}\\) is not used in the model.\nFor the four-state models, \\(F_b^*\\) and the general framework of the model stay the same as for three-state systems and is written as\n\\[\nF_b^* = \\frac{[RL^*]}{[L^*]_T} = \\frac{[R]}{K_d + [R]}\n\\]\n\\[\ny = ymin + (ymax - ymin) \\frac{[R]}{K_d + [R]}\n\\]\n\nIncomplete competitive binding - specific\nModel name: comp_4st_specific\nReferences: Roehrl 2004\nDissociation constants in the four-state model are defined as:\n\\[\nK_d^* = \\frac{[R][L^*]}{[RL^*]}  \n\\]\n\\[\nK_d = \\frac{[R][L]}{[RL]}  \n\\]\n\\[\nK_{d3} = \\frac{[RL][L^*]}{[RLL^*]}  \n\\]\n\\[\nK_{d4} = \\frac{[RL^*][L]}{[RLL^*]} \\quad \\text{(not used)}  \n\\]\nConservation of mass requires that:\n\\[\n[L^*]_T = [L^*] + [RL^*] + [RLL^*]  \n\\]\n\\[\n[L]_T = [L] + [RL] + [RLL^*]  \n\\]\n\\[\n[R]_T = [R] + [RL^*] + [RL] + [RLL^*]  \n\\]\nThus, concentrations of the complexes are calculated as:\n\\[\n[RL^*] = \\frac{[R]([L^*_T] - [RLL^*])}{K_d^* + [R]} \\quad ???  \n\\]\n\\[\n[RL] = \\frac{[R]([L_T] - [RLL^*])}{K_d + [R]} \\quad ???  \n\\]\n\\[\n[RLL^*] = \\frac{[RL]([L^*_T] - [RL^*])}{K_{d3} + [RL]} \\quad ???  \n\\]\nFrom the above equations, \\([R]\\) can be expressed in a quintic equation:\n\\[\na[R]^5 + b[R]^4 + c[R]^3 + d[R]^2 + e[R] + f = 0  \n\\]\nThe coefficients \\(a\\), \\(b\\), \\(c\\), \\(d\\), \\(e\\), and \\(f\\) are quite lengthy and can be found in the source code. There is no analytical solution to the quintic equation, but it can be solved numerically.\n\n\nIncomplete competitive binding - total\nModel name: comp_4st_total\nReferences: Roehrl 2004\nIn analogy to the other models, total binding in the comp_4st_total model is modeled by scaling \\(K_d\\) by a factor of \\((1 + N)\\).",
    "crumbs": [
      "Home",
      "Theory",
      "Exact Kd models"
    ]
  },
  {
    "objectID": "theory_conversions.html",
    "href": "theory_conversions.html",
    "title": "IC50 -> Kd conversion models",
    "section": "",
    "text": "What function to use: convert\nThese models are used for converting \\(\\text{IC}_{50}\\) to \\(K_d\\) using more or less approximate formulas.\n\nNikolovska-Coleska\nModel name: coleska\nReferences: Nikolovska-Coleska 2004\nIn the model of Nikolovska-Coleska, \\(K_d\\) is calculated by the equation:\n\\[\nK_d = \\frac{[L_{50}]}{\\left(\\frac{[L_{50}^*] + [R_0]}{K_d^*}\\right) + 1}  \n\\]\nwhere \\([L_{50}^*]\\) is the concentration of labeled ligand at 50% inhibition, \\([L_{50}]\\) is the concentration of unlabeled ligand at 50% inhibition, \\(K_d^*\\) is the dissociation constant of the labeled ligand, \\(K_d\\) is the dissociation constant of the unlabeled ligand, and \\([R_0]\\) is the concentration of receptor at 0% inhibition.\nFollowing the equations for conservation of mass, \\([R_0]\\) could be expressed in a quadratic equation:\n\\[\n[R_0]^2 + a[R_0] + b = 0  \n\\]\nwhere the coefficients are calculated as:\n\\[\na = [L^*]_T + K_d^* - [R]_T  \n\\]\n\\[\nb = -K_d^* [R]_T  \n\\]\n\n\n\n\n\n\nNote\n\n\n\nPlease note that the coefficients of this quadratic equation are expressed incorrectly in Nikolovska-Coleska 2004.\n\n\nThe physical solution for \\([R_0]\\) is then calculated by the quadratic formula:\n\\[\n[R_0] = \\frac{-a + \\sqrt{a^2 - 4b}}{2}  \n\\]\nThe rest of the parameters are calculated as follows:\n\\[\n[L_0^*] = \\frac{[L^*]_T}{1 + \\frac{[R_0]}{K_d^*}}  \n\\]\n\\[\n[RL_0^*] = \\frac{[R]_T}{1 + \\frac{K_d^*}{[L_0^*]}}  \n\\]\n\\[\n[RL_{50}^*] = \\frac{[RL_0^*]}{2}  \n\\]\n\\[\n[L_{50}^*] = [L^*]_T - [RL_{50}^*]  \n\\]\n\\[\n[RL_{50}] = [R]_T + \\frac{K_d^* [RL_{50}^*]}{[L_{50}^*]} + [RL_{50}^*]  \n\\]\n\\[\n[L_{50}] = IC_{50} - [RL_{50}]  \n\\]\n\n\nCheng-Prusoff\nModel name: cheng_prusoff\n\\[\nK_d = \\frac{\\text{IC}_{50}}{1 + \\frac{[L^*]_T}{K_d^*}}  \n\\]\n\n\nCheng-Prusoff Corrected\nModel name: cheng_prusoff_corr\nReferences: Munson 2008\n\\[\nK_d = \\frac{\\text{IC}_{50}}{1 + \\left(\\frac{[L^*]_T(Y_0 + 2)}{2K_d^*(Y_0 + 1)}\\right) + Y_0} + \\frac{K_d^* Y_0}{Y_0 + 2}  \n\\]",
    "crumbs": [
      "Home",
      "Theory",
      "IC50->Kd conversion"
    ]
  },
  {
    "objectID": "api.html",
    "href": "api.html",
    "title": "API reference",
    "section": "",
    "text": "Python API will be added here.",
    "crumbs": [
      "Home",
      "API reference"
    ]
  },
  {
    "objectID": "interactive.html",
    "href": "interactive.html",
    "title": "Interactive Function Plot (Matplotlib)",
    "section": "",
    "text": "import numpy as np import matplotlib.pyplot as plt from io import BytesIO import base64 from shiny import Inputs, Outputs, App, render\n\nDefine the function to plot\ndef quadratic_function(a, b, c, x): return a * x**2 + b * x + c\n\n\nFunction to create the plot (with matplotlib)\ndef create_plot(a, b, c): x = np.linspace(-10, 10, 400) y = quadratic_function(a, b, c, x)\n# Create the figure and axis using matplotlib\nfig, ax = plt.subplots()\nax.plot(x, y, label=f'Quadratic: {a}xÂ² + {b}x + {c}')\nax.set_title(\"Interactive Plot of a Quadratic Function\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"f(x)\")\nax.grid(True)\nax.legend()\n\n# Convert the plot to a PNG image and then to a base64-encoded string\nbuf = BytesIO()\nplt.savefig(buf, format=\"png\")\nplt.close(fig)\nbuf.seek(0)\nimg_base64 = base64.b64encode(buf.getvalue()).decode('utf-8')\nreturn img_base64\n\n\nDefine UI with sliders\ndef ui(): return\n\n    &lt;label&gt;a:&lt;/label&gt;\n    &lt;input id=\"a\" type=\"range\" min=\"-10\" max=\"10\" value=\"1\" step=\"0.1\" /&gt;\n    &lt;label&gt;b:&lt;/label&gt;\n    &lt;input id=\"b\" type=\"range\" min=\"-10\" max=\"10\" value=\"1\" step=\"0.1\" /&gt;\n    &lt;label&gt;c:&lt;/label&gt;\n    &lt;input id=\"c\" type=\"range\" min=\"-10\" max=\"10\" value=\"1\" step=\"0.1\" /&gt;\n&lt;/div&gt;\n&lt;div id=\"plot\"&gt;&lt;img id=\"plot-img\" src=\"\" /&gt;&lt;/div&gt;\n\nDefine server logic\ndef server(input, output, session): @output @render.text def plot(): a = input.a() b = input.b() c = input.c() img_base64 = create_plot(a, b, c) return fââ\n\n\nRun the app\napp = App(ui, server) app.run()"
  },
  {
    "objectID": "interactive.html#interactive-plot",
    "href": "interactive.html#interactive-plot",
    "title": "Interactive Function Plot",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interact\n\ndef plot_function(a, b):\n    x = np.linspace(0, 10, 100)\n    y = a * np.sin(b * x)\n    \n    plt.figure(figsize=(8, 4))\n    plt.plot(x, y)\n    plt.title(f'Plot of y = {a} * sin({b} * x)')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()\n\n\ninteract(plot_function, a=(0.1, 5.0, 0.1), b=(0.1, 5.0, 0.1))\n\n\n\n\n&lt;function __main__.plot_function(a, b)&gt;"
  },
  {
    "objectID": "interactive_function_plot.html",
    "href": "interactive_function_plot.html",
    "title": "BindCurve",
    "section": "",
    "text": "# Interactive Function Plot\n\nThis notebook demonstrates an interactive plot using `ipywidgets` and `matplotlib` where the parameters of the function can be adjusted with sliders.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interact\n\n# Define the function to visualize\ndef plot_function(a, b):\n    x = np.linspace(0, 10, 100)\n    y = a * np.sin(b * x)\n\n    plt.figure(figsize=(8, 4))\n    plt.plot(x, y)\n    plt.title(f'Plot of y = {a} * sin({b} * x)')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()\n\n# Create interactive sliders for 'a' and 'b' parameters\ninteract(plot_function, a=(0.1, 5.0, 0.1), b=(0.1, 5.0, 0.1))"
  },
  {
    "objectID": "reference/jointplot.html",
    "href": "reference/jointplot.html",
    "title": "jointplot",
    "section": "",
    "text": "jointplot\njointplot(\n    data=None\n    *\n    x=None\n    y=None\n    hue=None\n    kind='scatter'\n    height=6\n    ratio=5\n    space=0.2\n    dropna=False\n    xlim=None\n    ylim=None\n    color=None\n    palette=None\n    hue_order=None\n    hue_norm=None\n    marginal_ticks=False\n    joint_kws=None\n    marginal_kws=None\n    **kwargs\n)"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "load_csv\nLoads and preprocesses data from csv file.\n\n\nload_df\nLoads and preprocesses data from existing DataFrame.\n\n\n\n\n\n\n\n\n\nfit_50\nFunction for fitting the IC50 and logIC50 models.\n\n\nfit_Kd_direct\nFunction for fitting the dir_simple, dir_specific and dir_total models.\n\n\nfit_Kd_competition\nFunction for fitting the comp_3st_specific, comp_3st_total, comp_4st_specific and comp_4st_total models.\n\n\nconvert\nFunction for converting IC50 to Kd using coleska, cheng_prusoff and cheng_prusoff_corr models.\n\n\nreport\nProvides the results as a formatted report.\n\n\n\n\n\n\n\n\n\nplot\nPlots one or more curves into an initiated matplotlib plot.\n\n\nplot_grid\nPlots a grid of binding curves.\n\n\nplot_asymptotes\nPlots lower and/or upper asymptote of the model as a horizontal line.\n\n\nplot_traces\nPlots traces to indicate a specific value on the curve.\n\n\nplot_value\nPlots a marker to indicate a specific value on the curve, optionally with text annotation.",
    "crumbs": [
      "Home",
      "API reference"
    ]
  },
  {
    "objectID": "reference/index.html#some-functions",
    "href": "reference/index.html#some-functions",
    "title": "Function reference",
    "section": "",
    "text": "Functions to inspect docstrings.\n\n\n\nget_object\nFetch a griffe object.\n\n\npreview\nPrint a friendly representation of a griffe object (e.g.Â function, docstring)"
  },
  {
    "objectID": "reference/preview.html",
    "href": "reference/preview.html",
    "title": "preview",
    "section": "",
    "text": "preview(ast, max_depth=999, compact=False, as_string=False)\nPrint a friendly representation of a griffe object (e.g.Â function, docstring)\n\n\n&gt;&gt;&gt; from quartodoc import get_object\n&gt;&gt;&gt; obj = get_object(\"quartodoc\", \"get_object\")\n&gt;&gt;&gt; preview(obj.docstring.parsed)\n...\n&gt;&gt;&gt; preview(obj)\n..."
  },
  {
    "objectID": "reference/preview.html#examples",
    "href": "reference/preview.html#examples",
    "title": "preview",
    "section": "",
    "text": "&gt;&gt;&gt; from quartodoc import get_object\n&gt;&gt;&gt; obj = get_object(\"quartodoc\", \"get_object\")\n&gt;&gt;&gt; preview(obj.docstring.parsed)\n...\n&gt;&gt;&gt; preview(obj)\n..."
  },
  {
    "objectID": "reference/get_object.html",
    "href": "reference/get_object.html",
    "title": "get_object",
    "section": "",
    "text": "get_object(\n    path\n    object_name=None\n    parser='numpy'\n    load_aliases=True\n    dynamic=False\n    loader=None\n)\nFetch a griffe object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nstr\nAn import path to the object. This should have the form path.to.module:object. For example, quartodoc:get_object or quartodoc:MdRenderer.render.\nrequired\n\n\nobject_name\n'str | None'\n(Deprecated). A function name.\nNone\n\n\nparser\nstr\nA docstring parser to use.\n'numpy'\n\n\nload_aliases\n\nFor aliases that were imported from other modules, should we load that module?\nTrue\n\n\ndynamic\n\nWhether to dynamically import object. Useful if docstring is not hard-coded, but was set on object by running python code.\nFalse\n\n\n\n\n\n\npreview: print a user-friendly preview of a griffe object.\n\n\n\n&gt;&gt;&gt; get_function(\"quartodoc\", \"get_function\")\n&lt;Function('get_function', ...\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nx\ndc.Object\nabc"
  },
  {
    "objectID": "reference/get_object.html#parameters",
    "href": "reference/get_object.html#parameters",
    "title": "get_object",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npath\nstr\nAn import path to the object. This should have the form path.to.module:object. For example, quartodoc:get_object or quartodoc:MdRenderer.render.\nrequired\n\n\nobject_name\n'str | None'\n(Deprecated). A function name.\nNone\n\n\nparser\nstr\nA docstring parser to use.\n'numpy'\n\n\nload_aliases\n\nFor aliases that were imported from other modules, should we load that module?\nTrue\n\n\ndynamic\n\nWhether to dynamically import object. Useful if docstring is not hard-coded, but was set on object by running python code.\nFalse"
  },
  {
    "objectID": "reference/get_object.html#see-also",
    "href": "reference/get_object.html#see-also",
    "title": "get_object",
    "section": "",
    "text": "preview: print a user-friendly preview of a griffe object."
  },
  {
    "objectID": "reference/get_object.html#examples",
    "href": "reference/get_object.html#examples",
    "title": "get_object",
    "section": "",
    "text": "&gt;&gt;&gt; get_function(\"quartodoc\", \"get_function\")\n&lt;Function('get_function', ..."
  },
  {
    "objectID": "reference/get_object.html#returns",
    "href": "reference/get_object.html#returns",
    "title": "get_object",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nx\ndc.Object\nabc"
  },
  {
    "objectID": "reference/index.html#one-section",
    "href": "reference/index.html#one-section",
    "title": "Function reference",
    "section": "",
    "text": "Functions to inspect docstrings.\n\n\n\nload_csv\nLoads and preprocesses data from csv file.",
    "crumbs": [
      "Home",
      "API reference"
    ]
  },
  {
    "objectID": "reference/index.html#another-section",
    "href": "reference/index.html#another-section",
    "title": "Function reference",
    "section": "",
    "text": "another Functions to inspect docstrings.\n\n\n\nload_csv\nLoads and preprocesses data from csv file.\n\n\nload_df\nLoads and preprocesses data from existing DataFrame.\n\n\nfit_Kd_direct\nFunction for fitting the âdir_simpleâ dir_specific and dir_total models.",
    "crumbs": [
      "Home",
      "API reference"
    ]
  },
  {
    "objectID": "reference/load_csv.html",
    "href": "reference/load_csv.html",
    "title": "load_csv",
    "section": "",
    "text": "load_csv(csvfile, c_scale=1)\nLoads and preprocesses data from csv file.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncsvfile\nstr\nPath to the csv file.\nrequired\n\n\nc_scale\nfloat or int\nFactor for scaling concentration. Used for unit conversion.\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing preprocessed input data."
  },
  {
    "objectID": "reference/load_df.html",
    "href": "reference/load_df.html",
    "title": "load_df",
    "section": "",
    "text": "load_df(df, c_scale=1)\nLoads and preprocesses data from existing DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndf\nDataFrame\nDataFrame object with data.\nrequired\n\n\nc_scale\nfloat or int\nFactor for scaling concentration. Used for unit conversion.\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing preprocessed input data."
  },
  {
    "objectID": "reference/load_df.html#parameters",
    "href": "reference/load_df.html#parameters",
    "title": "load_df",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndf\nDataFrame\nDataFrame object with data.\nrequired\n\n\nc_scale\nfloat or int\nFactor for scaling concentration. Used for unit conversion.\n1"
  },
  {
    "objectID": "reference/load_df.html#returns",
    "href": "reference/load_df.html#returns",
    "title": "load_df",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing preprocessed input data."
  },
  {
    "objectID": "reference/load_csv.html#parameters",
    "href": "reference/load_csv.html#parameters",
    "title": "load_csv",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncsvfile\nstr\nPath to the csv file.\nrequired\n\n\nc_scale\nfloat or int\nFactor for scaling concentration. Used for unit conversion.\n1"
  },
  {
    "objectID": "reference/load_csv.html#returns",
    "href": "reference/load_csv.html#returns",
    "title": "load_csv",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing preprocessed input data."
  },
  {
    "objectID": "reference/fit_Kd_direct.html",
    "href": "reference/fit_Kd_direct.html",
    "title": "fit_Kd_direct",
    "section": "",
    "text": "fit_Kd_direct(\n    input_df\n    model\n    LsT\n    Ns=None\n    compound_sel=False\n    fix_ymin=False\n    fix_ymax=False\n    ci=True\n    verbose=False\n)\nFunction for fitting the dir_simple, dir_specific and dir_total models.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput_df\nDataFrame\nPandas DataFrame containing the input data.\nrequired\n\n\nmodel\nstr\nName of the model. Options: dir_simple, dir_specific, dir_total\nrequired\n\n\nLsT\nfloat or int\nTotal concentration of the labeled ligand.\nrequired\n\n\nNs\nfloat or int\nParameter for nonspecific binding of the labeled ligand (needed only for dir_total model).\nNone\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nfix_ymin\nfloat or int\nLower asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nfix_ymax\nfloat or int\nUpper asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nci\nbool\nWhether to calculate 95% confidence intervals.\nTrue\n\n\nverbose\nbool\nIf set to âTrueâ, more detailed output is printed. Intended mainly for troubleshooting.\nFalse\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing the fit results."
  },
  {
    "objectID": "reference/fit_Kd_direct.html#parameters",
    "href": "reference/fit_Kd_direct.html#parameters",
    "title": "fit_Kd_direct",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ninput_df\nDataFrame\nPandas DataFrame containing the input data.\nrequired\n\n\nmodel\nstr\nName of the model. Options: dir_simple, dir_specific, dir_total\nrequired\n\n\nLsT\nfloat or int\nTotal concentration of the labeled ligand.\nrequired\n\n\nNs\nfloat or int\nParameter for nonspecific binding of the labeled ligand (needed only for dir_total model).\nNone\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nfix_ymin\nfloat or int\nLower asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nfix_ymax\nfloat or int\nUpper asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nci\nbool\nWhether to calculate 95% confidence intervals.\nTrue\n\n\nverbose\nbool\nIf set to âTrueâ, more detailed output is printed. Intended mainly for troubleshooting.\nFalse"
  },
  {
    "objectID": "reference/fit_Kd_direct.html#returns",
    "href": "reference/fit_Kd_direct.html#returns",
    "title": "fit_Kd_direct",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing the fit results."
  },
  {
    "objectID": "reference/index.html#loading-data",
    "href": "reference/index.html#loading-data",
    "title": "Function reference",
    "section": "",
    "text": "load_csv\nLoads and preprocesses data from csv file.\n\n\nload_df\nLoads and preprocesses data from existing DataFrame.",
    "crumbs": [
      "Home",
      "API reference"
    ]
  },
  {
    "objectID": "reference/index.html#fitting-conversions",
    "href": "reference/index.html#fitting-conversions",
    "title": "Function reference",
    "section": "",
    "text": "fit_50\nFunction for fitting the IC50 and logIC50 models.\n\n\nfit_Kd_direct\nFunction for fitting the dir_simple, dir_specific and dir_total models.\n\n\nfit_Kd_competition\nFunction for fitting the comp_3st_specific, comp_3st_total, comp_4st_specific and comp_4st_total models.\n\n\nconvert\nFunction for converting IC50 to Kd using coleska, cheng_prusoff and cheng_prusoff_corr models.\n\n\nreport\nProvides the results as a formatted report.",
    "crumbs": [
      "Home",
      "API reference"
    ]
  },
  {
    "objectID": "reference/index.html#plotting",
    "href": "reference/index.html#plotting",
    "title": "Function reference",
    "section": "",
    "text": "plot\nPlots one or more curves into an initiated matplotlib plot.\n\n\nplot_grid\nPlots a grid of binding curves.\n\n\nplot_asymptotes\nPlots lower and/or upper asymptote of the model as a horizontal line.\n\n\nplot_traces\nPlots traces to indicate a specific value on the curve.\n\n\nplot_value\nPlots a marker to indicate a specific value on the curve, optionally with text annotation.",
    "crumbs": [
      "Home",
      "API reference"
    ]
  },
  {
    "objectID": "reference/plot_asymptotes.html",
    "href": "reference/plot_asymptotes.html",
    "title": "plot_asymptotes",
    "section": "",
    "text": "plot_asymptotes(\n    results_df\n    compound_sel=False\n    lower=True\n    upper=True\n    color='black'\n    linewidth=1\n    linestyle='--'\n)\nPlots lower and/or upper asymptote of the model as a horizontal line.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nlower\nbool\nWhether to plot the lower asymptote.\nTrue\n\n\nupper\nbool\nWhether to plot the upper asymptote.\nTrue\n\n\ncolor\nstr\nColor for plotting the asymptotes. Any matplotlib syntax will be accepted.\n'black'\n\n\nlinewidth\nfloar or int\nLine width.\n1\n\n\nlinestyle\nstr\nLine style.\n'--'"
  },
  {
    "objectID": "reference/plot_asymptotes.html#parameters",
    "href": "reference/plot_asymptotes.html#parameters",
    "title": "plot_asymptotes",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nlower\nbool\nWhether to plot the lower asymptote.\nTrue\n\n\nupper\nbool\nWhether to plot the upper asymptote.\nTrue\n\n\ncolor\nstr\nColor for plotting the asymptotes. Any matplotlib syntax will be accepted.\n'black'\n\n\nlinewidth\nfloar or int\nLine width.\n1\n\n\nlinestyle\nstr\nLine style.\n'--'"
  },
  {
    "objectID": "reference/fit_50.html",
    "href": "reference/fit_50.html",
    "title": "fit_50",
    "section": "",
    "text": "fit_50(\n    input_df\n    model\n    compound_sel=False\n    fix_ymin=False\n    fix_ymax=False\n    fix_slope=False\n    ci=True\n    verbose=False\n)\nFunction for fitting the IC50 and logIC50 models.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput_df\nDataFrame\nPandas DataFrame containing the input data.\nrequired\n\n\nmodel\nstr\nName of the model. Options: IC50, logIC50\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nfix_ymin\nfloat or int\nLower asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nfix_ymax\nfloat or int\nUpper asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nfix_slope\nfloat or int\nSlope of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nci\nbool\nWhether to calculate 95% confidence intervals.\nTrue\n\n\nverbose\nbool\nIf set to âTrueâ, more detailed output is printed. Intended mainly for troubleshooting.\nFalse\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing the fit results."
  },
  {
    "objectID": "reference/fit_50.html#parameters",
    "href": "reference/fit_50.html#parameters",
    "title": "fit_50",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ninput_df\nDataFrame\nPandas DataFrame containing the input data.\nrequired\n\n\nmodel\nstr\nName of the model. Options: IC50, logIC50\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nfix_ymin\nfloat or int\nLower asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nfix_ymax\nfloat or int\nUpper asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nfix_slope\nfloat or int\nSlope of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nci\nbool\nWhether to calculate 95% confidence intervals.\nTrue\n\n\nverbose\nbool\nIf set to âTrueâ, more detailed output is printed. Intended mainly for troubleshooting.\nFalse"
  },
  {
    "objectID": "reference/fit_50.html#returns",
    "href": "reference/fit_50.html#returns",
    "title": "fit_50",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing the fit results."
  },
  {
    "objectID": "reference/plot_traces.html",
    "href": "reference/plot_traces.html",
    "title": "plot_traces",
    "section": "",
    "text": "plot_traces(\n    results_df\n    value\n    compound_sel=False\n    kind='full'\n    vtrace=True\n    htrace=True\n    color='black'\n    linewidth=1\n    linestyle='--'\n    label=None\n)\nPlots traces to indicate a specific value on the curve.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\nvalue\nstr\nWhat value to use for plotting the traces. This should be one of the column names in results_df. Usually âIC50â, âKdâ or âKdsâ.\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nkind\nstr\nWhat kind of trace should be plotted. Options are âfullâ or âpartialâ.\n'full'\n\n\nvtrace\nbool\nWhether to plot the vertical trace.\nTrue\n\n\nhtrace\nbool\nWhether to plot the horizontal trace.\nTrue\n\n\ncolor\nstr\nColor for plotting the traces. Any matplotlib syntax will be accepted.\n'black'\n\n\nlinewidth\nfloat or int\nLine width.\n1\n\n\nlinestyle\nstr\nLine style.\n'--'\n\n\nlabel\nstr\nLabel that will be used for the traces.\nNone"
  },
  {
    "objectID": "reference/plot_traces.html#parameters",
    "href": "reference/plot_traces.html#parameters",
    "title": "plot_traces",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\nvalue\nstr\nWhat value to use for plotting the traces. This should be one of the column names in results_df. Usually âIC50â, âKdâ or âKdsâ.\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nkind\nstr\nWhat kind of trace should be plotted. Options are âfullâ or âpartialâ.\n'full'\n\n\nvtrace\nbool\nWhether to plot the vertical trace.\nTrue\n\n\nhtrace\nbool\nWhether to plot the horizontal trace.\nTrue\n\n\ncolor\nstr\nColor for plotting the traces. Any matplotlib syntax will be accepted.\n'black'\n\n\nlinewidth\nfloat or int\nLine width.\n1\n\n\nlinestyle\nstr\nLine style.\n'--'\n\n\nlabel\nstr\nLabel that will be used for the traces.\nNone"
  },
  {
    "objectID": "reference/fit_Kd_competition.html",
    "href": "reference/fit_Kd_competition.html",
    "title": "fit_Kd_competition",
    "section": "",
    "text": "fit_Kd_competition(\n    input_df\n    model\n    RT\n    LsT\n    Kds\n    N=None\n    compound_sel=False\n    fix_ymin=False\n    fix_ymax=False\n    ci=True\n    verbose=False\n)\nFunction for fitting the comp_3st_specific, comp_3st_total, comp_4st_specific and comp_4st_total models.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput_df\nDataFrame\nPandas DataFrame containing the input data.\nrequired\n\n\nmodel\nstr\nName of the model. Options: comp_3st_specific, comp_3st_total, comp_4st_specific, comp_4st_total\nrequired\n\n\nRT\nfloat or int\nTotal concentration of the receptor.\nrequired\n\n\nLsT\nfloat or int\nTotal concentration of the labeled ligand.\nrequired\n\n\nKds\nfloat or int\nDissociation constant of the labeled ligand.\nrequired\n\n\nN\nfloat or int\nParameter for nonspecific binding of the unlabeled ligand (needed only for comp_3st_total and comp_4st_total models).\nNone\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nfix_ymin\nfloat or int\nLower asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nfix_ymax\nfloat or int\nUpper asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nci\nbool\nWhether to calculate 95% confidence intervals.\nTrue\n\n\nverbose\nbool\nIf set to âTrueâ, more detailed output is printed. Intended mainly for troubleshooting.\nFalse\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing the fit results."
  },
  {
    "objectID": "reference/fit_Kd_competition.html#parameters",
    "href": "reference/fit_Kd_competition.html#parameters",
    "title": "fit_Kd_competition",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ninput_df\nDataFrame\nPandas DataFrame containing the input data.\nrequired\n\n\nmodel\nstr\nName of the model. Options: comp_3st_specific, comp_3st_total, comp_4st_specific, comp_4st_total\nrequired\n\n\nRT\nfloat or int\nTotal concentration of the receptor.\nrequired\n\n\nLsT\nfloat or int\nTotal concentration of the labeled ligand.\nrequired\n\n\nKds\nfloat or int\nDissociation constant of the labeled ligand.\nrequired\n\n\nN\nfloat or int\nParameter for nonspecific binding of the unlabeled ligand (needed only for comp_3st_total and comp_4st_total models).\nNone\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nfix_ymin\nfloat or int\nLower asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nfix_ymax\nfloat or int\nUpper asymptote of the model will be fixed at the provided value. If set to âFalseâ, it will be fitted freely.\nFalse\n\n\nci\nbool\nWhether to calculate 95% confidence intervals.\nTrue\n\n\nverbose\nbool\nIf set to âTrueâ, more detailed output is printed. Intended mainly for troubleshooting.\nFalse"
  },
  {
    "objectID": "reference/fit_Kd_competition.html#returns",
    "href": "reference/fit_Kd_competition.html#returns",
    "title": "fit_Kd_competition",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing the fit results."
  },
  {
    "objectID": "reference/report.html",
    "href": "reference/report.html",
    "title": "report",
    "section": "",
    "text": "report(results_df, decimals=2)\nProvides the results as a formatted report.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\ndecimals\nint\nNumber of decimals to use.\n2\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing the report."
  },
  {
    "objectID": "reference/report.html#parameters",
    "href": "reference/report.html#parameters",
    "title": "report",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\ndecimals\nint\nNumber of decimals to use.\n2"
  },
  {
    "objectID": "reference/report.html#returns",
    "href": "reference/report.html#returns",
    "title": "report",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing the report."
  },
  {
    "objectID": "reference/plot.html",
    "href": "reference/plot.html",
    "title": "plot",
    "section": "",
    "text": "plot(\n    input_df\n    results_df\n    compound_sel=False\n    xmin=False\n    xmax=False\n    marker='o'\n    markersize=5\n    linewidth=1\n    linestyle='-'\n    show_medians=True\n    show_all_data=False\n    show_errorbars=True\n    errorbars_kind='SD'\n    errorbar_linewidth=1\n    errorbar_capsize=3\n    cmap='tab10'\n    cmap_min=0\n    cmap_max=1\n    custom_colors=False\n    single_color=False\n    custom_labels=False\n    single_label=False\n    no_labels=False\n)\nPlots one or more curves into an initiated matplotlib plot.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput_df\nDataFrame\nPandas DataFrame containing the input data.\nrequired\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nxmin\nfloat or int\nManually set the minimum value on x axis for all curves. If set to False, it will be determined automatically for each curve.\nFalse\n\n\nxmax\nfloat or int\nManually set the maximum value on x axis for all curves. If set to False, it will be determined automatically for each curve.\nFalse\n\n\nmarker\nstr\nMarker type. Any matplotlib syntax is accepted (see https://matplotlib.org/stable/api/markers_api.html).\n'o'\n\n\nmarkersize\nfloat or int\nMarker size.\n5\n\n\nlinewidth\nfloat or int\nLine width of the curve.\n1\n\n\nlinestyle\nstr\nLine style of the curve.\n'-'\n\n\nshow_medians\nbool\nWhether to show concentration median values.\nTrue\n\n\nshow_all_data\nbool\nWhether to show all concentration points.\nFalse\n\n\nshow_errorbars\nbool\nWhether to show errorbars.\nTrue\n\n\nerrorbars_kind\nstr\nWhat should be shown as errorbars, options are âSDâ or âSEMâ.\n'SD'\n\n\nerrorbar_linewidth\nfloat or int\nLine width of the errorbars.\n1\n\n\nerrorbar_capsize\nfloat or int\nSize of the errorbar caps (upper and lower points of the bars).\n3\n\n\ncmap\nstr\nWhat cmap to use for coloring the curves. Any matplotlib syntax is accepted (see https://matplotlib.org/stable/gallery/color/colormap_reference.html).\n'tab10'\n\n\ncmap_min\nfloat or int\nMinimum point of the cmap to use. Between 0 and 1.\n0\n\n\ncmap_max\nfloat or int\nMaximum point of the cmap to use. Between 0 and 1.\n1\n\n\ncustom_colors\nlist\nIf you want to define custom colors for the curves, provide list. Length of the list should be the same as number of compounds.\nFalse\n\n\nsingle_color\nstr\nProvide single color to color all ploted curves.\nFalse\n\n\ncustom_labels\nlist\nIf you want to define custom labels for the curves, provide list. Length of the list should be the same as number of compounds.\nFalse\n\n\nsingle_label\nstr\nProvide single label for all ploted curves.\nFalse\n\n\nno_labels\nbool\nIf you do not want any labels, set this to true.\nFalse"
  },
  {
    "objectID": "reference/plot.html#parameters",
    "href": "reference/plot.html#parameters",
    "title": "plot",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ninput_df\nDataFrame\nPandas DataFrame containing the input data.\nrequired\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nxmin\nfloat or int\nManually set the minimum value on x axis for all curves. If set to False, it will be determined automatically for each curve.\nFalse\n\n\nxmax\nfloat or int\nManually set the maximum value on x axis for all curves. If set to False, it will be determined automatically for each curve.\nFalse\n\n\nmarker\nstr\nMarker type. Any matplotlib syntax is accepted (see https://matplotlib.org/stable/api/markers_api.html).\n'o'\n\n\nmarkersize\nfloat or int\nMarker size.\n5\n\n\nlinewidth\nfloat or int\nLine width of the curve.\n1\n\n\nlinestyle\nstr\nLine style of the curve.\n'-'\n\n\nshow_medians\nbool\nWhether to show concentration median values.\nTrue\n\n\nshow_all_data\nbool\nWhether to show all concentration points.\nFalse\n\n\nshow_errorbars\nbool\nWhether to show errorbars.\nTrue\n\n\nerrorbars_kind\nstr\nWhat should be shown as errorbars, options are âSDâ or âSEMâ.\n'SD'\n\n\nerrorbar_linewidth\nfloat or int\nLine width of the errorbars.\n1\n\n\nerrorbar_capsize\nfloat or int\nSize of the errorbar caps (upper and lower points of the bars).\n3\n\n\ncmap\nstr\nWhat cmap to use for coloring the curves. Any matplotlib syntax is accepted (see https://matplotlib.org/stable/gallery/color/colormap_reference.html).\n'tab10'\n\n\ncmap_min\nfloat or int\nMinimum point of the cmap to use. Between 0 and 1.\n0\n\n\ncmap_max\nfloat or int\nMaximum point of the cmap to use. Between 0 and 1.\n1\n\n\ncustom_colors\nlist\nIf you want to define custom colors for the curves, provide list. Length of the list should be the same as number of compounds.\nFalse\n\n\nsingle_color\nstr\nProvide single color to color all ploted curves.\nFalse\n\n\ncustom_labels\nlist\nIf you want to define custom labels for the curves, provide list. Length of the list should be the same as number of compounds.\nFalse\n\n\nsingle_label\nstr\nProvide single label for all ploted curves.\nFalse\n\n\nno_labels\nbool\nIf you do not want any labels, set this to true.\nFalse"
  },
  {
    "objectID": "reference/plot_value.html",
    "href": "reference/plot_value.html",
    "title": "plot_value",
    "section": "",
    "text": "plot_value(\n    results_df\n    value\n    compound_sel=False\n    marker='o'\n    markersize=5\n    color='black'\n    label=None\n    show_annot=True\n    pre_text=''\n    post_text=''\n    decimals=2\n    xoffset=50\n    yoffset=0\n)\nPlots a marker to indicate a specific value on the curve, optionally with text annotation.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\nvalue\nstr\nWhat value to plot. This should be one of the column names in results_df. Usually âIC50â, âKdâ or âKdsâ.\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nmarker\nstr\nMarker type. Any matplotlib syntax is accepted (see https://matplotlib.org/stable/api/markers_api.html).\n'o'\n\n\nmarkersize\nfloat or int\nMarker size.\n5\n\n\ncolor\nstr\nColor of the marker. Any matplotlib syntax will be accepted.\n'black'\n\n\nlabel\nstr\nLabel for the marker to show in legend.\nNone\n\n\nshow_annot\nbool\nWhether to show text annotation.\nTrue\n\n\npre_text\nstr\nText to apear before the numerical annotation.\n''\n\n\npost_text\nstr\nText to apear after the numerical annotation.\n''\n\n\ndecimals\nint\nNumber of decimals to use for the numerical annotation.\n2\n\n\nxoffset\nfloat or int\nOffset of the annotation on x axis.\n50\n\n\nyoffset\nfloat or int\nOffset of the annotation on y axis.\n0"
  },
  {
    "objectID": "reference/plot_value.html#parameters",
    "href": "reference/plot_value.html#parameters",
    "title": "plot_value",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\nvalue\nstr\nWhat value to plot. This should be one of the column names in results_df. Usually âIC50â, âKdâ or âKdsâ.\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nmarker\nstr\nMarker type. Any matplotlib syntax is accepted (see https://matplotlib.org/stable/api/markers_api.html).\n'o'\n\n\nmarkersize\nfloat or int\nMarker size.\n5\n\n\ncolor\nstr\nColor of the marker. Any matplotlib syntax will be accepted.\n'black'\n\n\nlabel\nstr\nLabel for the marker to show in legend.\nNone\n\n\nshow_annot\nbool\nWhether to show text annotation.\nTrue\n\n\npre_text\nstr\nText to apear before the numerical annotation.\n''\n\n\npost_text\nstr\nText to apear after the numerical annotation.\n''\n\n\ndecimals\nint\nNumber of decimals to use for the numerical annotation.\n2\n\n\nxoffset\nfloat or int\nOffset of the annotation on x axis.\n50\n\n\nyoffset\nfloat or int\nOffset of the annotation on y axis.\n0"
  },
  {
    "objectID": "reference/convert.html",
    "href": "reference/convert.html",
    "title": "convert",
    "section": "",
    "text": "convert(\n    IC50_df\n    model\n    RT=None\n    LsT=None\n    Kds=None\n    y0=None\n    compound_sel=False\n    ci=True\n    verbose=False\n)\nFunction for converting IC50 to Kd using coleska, cheng_prusoff and cheng_prusoff_corr models.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nIC50_df\nDataFrame\nPandas DataFrame containing the fitted IC50 values.\nrequired\n\n\nmodel\nstr\nName of the conversion model. Options: coleska, cheng_prusoff, cheng_prusoff_corr\nrequired\n\n\nRT\nfloat or int\nTotal concentration of the receptor.\nNone\n\n\nLsT\nfloat or int\nTotal concentration of the labeled ligand.\nNone\n\n\nKds\nfloat or int\nDissociation constant of the labeled ligand.\nNone\n\n\ny0\nfloat or int\nParameter used in the corrected Cheng-Prusoff model.\nNone\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nci\nbool\nWhether to calculate 95% confidence intervals.\nTrue\n\n\nverbose\nbool\nIf set to âTrueâ, more detailed output is printed. Intended mainly for troubleshooting.\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing the conversion results."
  },
  {
    "objectID": "reference/convert.html#parameters",
    "href": "reference/convert.html#parameters",
    "title": "convert",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nIC50_df\nDataFrame\nPandas DataFrame containing the fitted IC50 values.\nrequired\n\n\nmodel\nstr\nName of the conversion model. Options: coleska, cheng_prusoff, cheng_prusoff_corr\nrequired\n\n\nRT\nfloat or int\nTotal concentration of the receptor.\nNone\n\n\nLsT\nfloat or int\nTotal concentration of the labeled ligand.\nNone\n\n\nKds\nfloat or int\nDissociation constant of the labeled ligand.\nNone\n\n\ny0\nfloat or int\nParameter used in the corrected Cheng-Prusoff model.\nNone\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nci\nbool\nWhether to calculate 95% confidence intervals.\nTrue\n\n\nverbose\nbool\nIf set to âTrueâ, more detailed output is printed. Intended mainly for troubleshooting.\nFalse"
  },
  {
    "objectID": "reference/convert.html#returns",
    "href": "reference/convert.html#returns",
    "title": "convert",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\n\nDataFrame\nPandas DataFrame containing the conversion results."
  },
  {
    "objectID": "reference/plot_grid.html",
    "href": "reference/plot_grid.html",
    "title": "plot_grid",
    "section": "",
    "text": "plot_grid(\n    input_df\n    results_df\n    compound_sel=False\n    xmin=False\n    xmax=False\n    marker='o'\n    markersize=5\n    linewidth=1\n    linestyle='-'\n    show_medians=True\n    show_all_data=False\n    show_errorbars=True\n    errorbars_kind='SD'\n    errorbar_linewidth=1\n    errorbar_capsize=3\n    cmap='tab10'\n    cmap_min=0\n    cmap_max=1\n    custom_colors=False\n    single_color=False\n    custom_labels=False\n    single_label=False\n    no_labels=False\n    x_logscale=True\n    show_legend=False\n    show_title=True\n    figsize=(7, 5)\n    n_cols=3\n    x_label='dose'\n    y_label='response'\n    show_inner_ticklabels=False\n    sharex=True\n    sharey=True\n    hspace=0.3\n    wspace=0.3\n)\nPlots a grid of binding curves.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninput_df\nDataFrame\nPandas DataFrame containing the input data.\nrequired\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nxmin\nfloat or int\nManually set the minimum value on x axis for all curves. If set to False, it will be determined automatically for each curve.\nFalse\n\n\nxmax\nfloat or int\nManually set the maximum value on x axis for all curves. If set to False, it will be determined automatically for each curve.\nFalse\n\n\nmarker\nstr\nMarker type. Any matplotlib syntax is accepted (see https://matplotlib.org/stable/api/markers_api.html).\n'o'\n\n\nmarkersize\nfloat or int\nMarker size.\n5\n\n\nlinewidth\nfloat or int\nLine width of the curve.\n1\n\n\nlinestyle\nstr\nLine style of the curve.\n'-'\n\n\nshow_medians\nbool\nWhether to show concentration median values.\nTrue\n\n\nshow_all_data\nbool\nWhether to show all concentration points.\nFalse\n\n\nshow_errorbars\nbool\nWhether to show errorbars.\nTrue\n\n\nerrorbars_kind\nstr\nWhat should be shown as errorbars, options are âSDâ or âSEMâ.\n'SD'\n\n\nerrorbar_linewidth\nfloat or int\nLine width of the errorbars.\n1\n\n\nerrorbar_capsize\nfloat or int\nSize of the errorbar caps (upper and lower points of the bars).\n3\n\n\ncmap\nstr\nWhat cmap to use for coloring the curves. Any matplotlib syntax is accepted (see https://matplotlib.org/stable/gallery/color/colormap_reference.html).\n'tab10'\n\n\ncmap_min\nfloat or int\nMinimum point of the cmap to use. Between 0 and 1.\n0\n\n\ncmap_max\nfloat or int\nMaximum point of the cmap to use. Between 0 and 1.\n1\n\n\ncustom_colors\nlist\nIf you want to define custom colors for the curves, provide list. Length of the list should be the same as number of compounds.\nFalse\n\n\nsingle_color\nstr\nProvide single color to color all ploted curves.\nFalse\n\n\ncustom_labels\nlist\nIf you want to define custom labels for the curves, provide list. Length of the list should be the same as number of compounds.\nFalse\n\n\nsingle_label\nstr\nProvide single label for all ploted curves.\nFalse\n\n\nno_labels\nbool\nIf you do not want any labels, set this to true.\nFalse\n\n\nx_logscale\nbool\nIf set to True, the x axis will be plotted on a log scale.\nTrue\n\n\nshow_legend\nbool\nWhether to show legend in each subplot.\nFalse\n\n\nshow_title\nbool\nWhether to show names of the compounds in the title for each sunplot.\nTrue\n\n\nfigsize\ntuple\nTuple of (x, y) determining dimensions for the plot. This is passed into matplotlib figsize.\n(7, 5)\n\n\nn_cols\nint\nNumber of columns to plot. Number of rows is then determined automatically.\n3\n\n\nx_label\nstr\nAxis label for the x axis.\n'dose'\n\n\ny_label\nstr\nAxis label for the y axis.\n'response'\n\n\nshow_inner_ticklabels\nbool\nWhether to show ticklabels on the inner axes of the grid.\nFalse\n\n\nsharex\nbool\nWhether to share (lock) the scales on the x axes for all subplots in the grid.\nTrue\n\n\nsharey\nbool\nWhether to share (lock) the scales on the y axes for all subplots in the grid.\nTrue\n\n\nhspace\nfloat or int\nHorizontal space between subplots.\n0.3\n\n\nwspace\nfloat or int\nHorizontal space between subplots.\n0.3"
  },
  {
    "objectID": "reference/plot_grid.html#parameters",
    "href": "reference/plot_grid.html#parameters",
    "title": "plot_grid",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ninput_df\nDataFrame\nPandas DataFrame containing the input data.\nrequired\n\n\nresults_df\nDataFrame\nPandas DataFrame containing the fit results.\nrequired\n\n\ncompound_sel\nlist\nList of compounds to execute the function on. If set to False, all compounds from the results_df will be used.\nFalse\n\n\nxmin\nfloat or int\nManually set the minimum value on x axis for all curves. If set to False, it will be determined automatically for each curve.\nFalse\n\n\nxmax\nfloat or int\nManually set the maximum value on x axis for all curves. If set to False, it will be determined automatically for each curve.\nFalse\n\n\nmarker\nstr\nMarker type. Any matplotlib syntax is accepted (see https://matplotlib.org/stable/api/markers_api.html).\n'o'\n\n\nmarkersize\nfloat or int\nMarker size.\n5\n\n\nlinewidth\nfloat or int\nLine width of the curve.\n1\n\n\nlinestyle\nstr\nLine style of the curve.\n'-'\n\n\nshow_medians\nbool\nWhether to show concentration median values.\nTrue\n\n\nshow_all_data\nbool\nWhether to show all concentration points.\nFalse\n\n\nshow_errorbars\nbool\nWhether to show errorbars.\nTrue\n\n\nerrorbars_kind\nstr\nWhat should be shown as errorbars, options are âSDâ or âSEMâ.\n'SD'\n\n\nerrorbar_linewidth\nfloat or int\nLine width of the errorbars.\n1\n\n\nerrorbar_capsize\nfloat or int\nSize of the errorbar caps (upper and lower points of the bars).\n3\n\n\ncmap\nstr\nWhat cmap to use for coloring the curves. Any matplotlib syntax is accepted (see https://matplotlib.org/stable/gallery/color/colormap_reference.html).\n'tab10'\n\n\ncmap_min\nfloat or int\nMinimum point of the cmap to use. Between 0 and 1.\n0\n\n\ncmap_max\nfloat or int\nMaximum point of the cmap to use. Between 0 and 1.\n1\n\n\ncustom_colors\nlist\nIf you want to define custom colors for the curves, provide list. Length of the list should be the same as number of compounds.\nFalse\n\n\nsingle_color\nstr\nProvide single color to color all ploted curves.\nFalse\n\n\ncustom_labels\nlist\nIf you want to define custom labels for the curves, provide list. Length of the list should be the same as number of compounds.\nFalse\n\n\nsingle_label\nstr\nProvide single label for all ploted curves.\nFalse\n\n\nno_labels\nbool\nIf you do not want any labels, set this to true.\nFalse\n\n\nx_logscale\nbool\nIf set to True, the x axis will be plotted on a log scale.\nTrue\n\n\nshow_legend\nbool\nWhether to show legend in each subplot.\nFalse\n\n\nshow_title\nbool\nWhether to show names of the compounds in the title for each sunplot.\nTrue\n\n\nfigsize\ntuple\nTuple of (x, y) determining dimensions for the plot. This is passed into matplotlib figsize.\n(7, 5)\n\n\nn_cols\nint\nNumber of columns to plot. Number of rows is then determined automatically.\n3\n\n\nx_label\nstr\nAxis label for the x axis.\n'dose'\n\n\ny_label\nstr\nAxis label for the y axis.\n'response'\n\n\nshow_inner_ticklabels\nbool\nWhether to show ticklabels on the inner axes of the grid.\nFalse\n\n\nsharex\nbool\nWhether to share (lock) the scales on the x axes for all subplots in the grid.\nTrue\n\n\nsharey\nbool\nWhether to share (lock) the scales on the y axes for all subplots in the grid.\nTrue\n\n\nhspace\nfloat or int\nHorizontal space between subplots.\n0.3\n\n\nwspace\nfloat or int\nHorizontal space between subplots.\n0.3"
  }
]