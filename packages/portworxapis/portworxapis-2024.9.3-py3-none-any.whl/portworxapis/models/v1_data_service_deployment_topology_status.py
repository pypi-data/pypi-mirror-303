# coding: utf-8

"""
    public/portworx/pds/metric/apiv1/metric.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworx.models.v1_connection_info import V1ConnectionInfo
from portworx.models.v1_data_service_deployment_topology_status_health import V1DataServiceDeploymentTopologyStatusHealth
from portworx.models.v1_data_service_deployment_topology_status_phase import V1DataServiceDeploymentTopologyStatusPhase
from typing import Optional, Set
from typing_extensions import Self

class V1DataServiceDeploymentTopologyStatus(BaseModel):
    """
    Status of the data service topology. It is consumed in DataServiceDeployment.
    """ # noqa: E501
    health: Optional[V1DataServiceDeploymentTopologyStatusHealth] = V1DataServiceDeploymentTopologyStatusHealth.UNKNOWN
    phase: Optional[V1DataServiceDeploymentTopologyStatusPhase] = V1DataServiceDeploymentTopologyStatusPhase.PHASE_UNSPECIFIED
    ready_instances: Optional[StrictStr] = Field(default=None, description="Number of ready replicas reported by Target Cluster that are up and running.", alias="readyInstances")
    connection_info: Optional[V1ConnectionInfo] = Field(default=None, alias="connectionInfo")
    __properties: ClassVar[List[str]] = ["health", "phase", "readyInstances", "connectionInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DataServiceDeploymentTopologyStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connection_info
        if self.connection_info:
            _dict['connectionInfo'] = self.connection_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DataServiceDeploymentTopologyStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "health": obj.get("health") if obj.get("health") is not None else V1DataServiceDeploymentTopologyStatusHealth.UNKNOWN,
            "phase": obj.get("phase") if obj.get("phase") is not None else V1DataServiceDeploymentTopologyStatusPhase.PHASE_UNSPECIFIED,
            "readyInstances": obj.get("readyInstances"),
            "connectionInfo": V1ConnectionInfo.from_dict(obj["connectionInfo"]) if obj.get("connectionInfo") is not None else None
        })
        return _obj


