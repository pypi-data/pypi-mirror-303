# coding: utf-8

"""
    public/portworx/pds/metric/apiv1/metric.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworx.models.v1_data_service_deployment_topology_status import V1DataServiceDeploymentTopologyStatus
from portworx.models.v1_status_health import V1StatusHealth
from portworx.models.v1_status_phase import V1StatusPhase
from typing import Optional, Set
from typing_extensions import Self

class Pdsdataservicedeploymentv1Status(BaseModel):
    """
    Status of the DataService Deployment.
    """ # noqa: E501
    health: Optional[V1StatusHealth] = V1StatusHealth.HEALTH_UNSPECIFIED
    phase: Optional[V1StatusPhase] = V1StatusPhase.PHASE_UNSPECIFIED
    connection_info: Optional[Dict[str, Any]] = Field(default=None, description="ConnectionDetails urls, ports, credentials, etc for connecting to the data service.", alias="connectionInfo")
    initialized: Optional[StrictStr] = Field(default=None, description="Initialize used to control startup scripts.")
    data_service_deployment_topology_status: Optional[List[V1DataServiceDeploymentTopologyStatus]] = Field(default=None, description="Status of the deployment topology.", alias="dataServiceDeploymentTopologyStatus")
    custom_resource_name: Optional[StrictStr] = Field(default=None, description="Custom Resource Name is the kubernetes resource name for the deployment that is built from ID.", alias="customResourceName")
    dns_zone: Optional[StrictStr] = Field(default=None, description="dns zone of the deployment.", alias="dnsZone")
    manifest_time: Optional[datetime] = Field(default=None, description="last manifest reporting  time.", alias="manifestTime")
    error_code: Optional[StrictStr] = Field(default=None, description="error_code.", alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, description="error message.", alias="errorMessage")
    __properties: ClassVar[List[str]] = ["health", "phase", "connectionInfo", "initialized", "dataServiceDeploymentTopologyStatus", "customResourceName", "dnsZone", "manifestTime", "errorCode", "errorMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pdsdataservicedeploymentv1Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_service_deployment_topology_status (list)
        _items = []
        if self.data_service_deployment_topology_status:
            for _item_data_service_deployment_topology_status in self.data_service_deployment_topology_status:
                if _item_data_service_deployment_topology_status:
                    _items.append(_item_data_service_deployment_topology_status.to_dict())
            _dict['dataServiceDeploymentTopologyStatus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pdsdataservicedeploymentv1Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "health": obj.get("health") if obj.get("health") is not None else V1StatusHealth.HEALTH_UNSPECIFIED,
            "phase": obj.get("phase") if obj.get("phase") is not None else V1StatusPhase.PHASE_UNSPECIFIED,
            "connectionInfo": obj.get("connectionInfo"),
            "initialized": obj.get("initialized"),
            "dataServiceDeploymentTopologyStatus": [V1DataServiceDeploymentTopologyStatus.from_dict(_item) for _item in obj["dataServiceDeploymentTopologyStatus"]] if obj.get("dataServiceDeploymentTopologyStatus") is not None else None,
            "customResourceName": obj.get("customResourceName"),
            "dnsZone": obj.get("dnsZone"),
            "manifestTime": obj.get("manifestTime"),
            "errorCode": obj.get("errorCode"),
            "errorMessage": obj.get("errorMessage")
        })
        return _obj


