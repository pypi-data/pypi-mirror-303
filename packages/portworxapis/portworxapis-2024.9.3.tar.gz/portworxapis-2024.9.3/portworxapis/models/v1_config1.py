# coding: utf-8

"""
    public/portworx/pds/metric/apiv1/metric.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from portworx.models.config_backup_level import ConfigBackupLevel
from portworx.models.config_backup_type import ConfigBackupType
from portworx.models.config_reclaim_policy_type import ConfigReclaimPolicyType
from portworx.models.v1_backup_policy import V1BackupPolicy
from portworx.models.v1_references import V1References
from typing import Optional, Set
from typing_extensions import Self

class V1Config1(BaseModel):
    """
    Desired config of the backup configuration.
    """ # noqa: E501
    references: Optional[V1References] = None
    backup_policy: Optional[V1BackupPolicy] = Field(default=None, alias="backupPolicy")
    suspend: Optional[StrictBool] = Field(default=None, description="Suspend flag is used to suspend a scheduled backup from creating new backups.")
    backup_type: Optional[ConfigBackupType] = Field(default=ConfigBackupType.BACKUP_TYPE_UNSPECIFIED, alias="backupType")
    backup_level: Optional[ConfigBackupLevel] = Field(default=ConfigBackupLevel.BACKUP_LEVEL_UNSPECIFIED, alias="backupLevel")
    reclaim_policy: Optional[ConfigReclaimPolicyType] = Field(default=ConfigReclaimPolicyType.RECLAIM_POLICY_TYPE_UNSPECIFIED, alias="reclaimPolicy")
    __properties: ClassVar[List[str]] = ["references", "backupPolicy", "suspend", "backupType", "backupLevel", "reclaimPolicy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Config1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of references
        if self.references:
            _dict['references'] = self.references.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backup_policy
        if self.backup_policy:
            _dict['backupPolicy'] = self.backup_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Config1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "references": V1References.from_dict(obj["references"]) if obj.get("references") is not None else None,
            "backupPolicy": V1BackupPolicy.from_dict(obj["backupPolicy"]) if obj.get("backupPolicy") is not None else None,
            "suspend": obj.get("suspend"),
            "backupType": obj.get("backupType") if obj.get("backupType") is not None else ConfigBackupType.BACKUP_TYPE_UNSPECIFIED,
            "backupLevel": obj.get("backupLevel") if obj.get("backupLevel") is not None else ConfigBackupLevel.BACKUP_LEVEL_UNSPECIFIED,
            "reclaimPolicy": obj.get("reclaimPolicy") if obj.get("reclaimPolicy") is not None else ConfigReclaimPolicyType.RECLAIM_POLICY_TYPE_UNSPECIFIED
        })
        return _obj


