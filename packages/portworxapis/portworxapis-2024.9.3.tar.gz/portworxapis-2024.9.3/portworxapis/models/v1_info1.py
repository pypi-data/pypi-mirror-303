# coding: utf-8

"""
    public/portworx/pds/metric/apiv1/metric.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworx.models.v1_references1 import V1References1
from typing import Optional, Set
from typing_extensions import Self

class V1Info1(BaseModel):
    """
    Information related to the data service image.
    """ # noqa: E501
    references: Optional[V1References1] = None
    registry: Optional[StrictStr] = Field(default=None, description="Image registry where the image is stored.")
    namespace: Optional[StrictStr] = Field(default=None, description="Image registry namespace where the image is stored.")
    tag: Optional[StrictStr] = Field(default=None, description="Tag associated with the image.")
    build: Optional[StrictStr] = Field(default=None, description="Build version of the image.")
    tls_support: Optional[StrictBool] = Field(default=None, description="Flag indicating if TLS is supported for a data service using this image.", alias="tlsSupport")
    capabilities: Optional[Dict[str, StrictStr]] = Field(default=None, description="Capabilities associated with this image.")
    additional_images: Optional[Dict[str, StrictStr]] = Field(default=None, description="Additional images associated with this data service image.", alias="additionalImages")
    __properties: ClassVar[List[str]] = ["references", "registry", "namespace", "tag", "build", "tlsSupport", "capabilities", "additionalImages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Info1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of references
        if self.references:
            _dict['references'] = self.references.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Info1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "references": V1References1.from_dict(obj["references"]) if obj.get("references") is not None else None,
            "registry": obj.get("registry"),
            "namespace": obj.get("namespace"),
            "tag": obj.get("tag"),
            "build": obj.get("build"),
            "tlsSupport": obj.get("tlsSupport"),
            "capabilities": obj.get("capabilities"),
            "additionalImages": obj.get("additionalImages")
        })
        return _obj


