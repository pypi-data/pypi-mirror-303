# coding: utf-8

"""
    public/portworx/pds/metric/apiv1/metric.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworx.models.v1_daily_policy import V1DailyPolicy
from portworx.models.v1_interval_policy import V1IntervalPolicy
from portworx.models.v1_monthly_policy import V1MonthlyPolicy
from portworx.models.v1_weekly_policy import V1WeeklyPolicy
from typing import Optional, Set
from typing_extensions import Self

class V1Schedule(BaseModel):
    """
    A schedule for a backup policy.
    """ # noqa: E501
    interval_policy: Optional[V1IntervalPolicy] = Field(default=None, alias="intervalPolicy")
    daily_policy: Optional[V1DailyPolicy] = Field(default=None, alias="dailyPolicy")
    weekly_policy: Optional[V1WeeklyPolicy] = Field(default=None, alias="weeklyPolicy")
    monthly_policy: Optional[V1MonthlyPolicy] = Field(default=None, alias="monthlyPolicy")
    cron_expression: Optional[StrictStr] = Field(default=None, description="A cron expression is a string consisting of six or seven subexpressions (fields) that describe individual details of the schedule.", alias="cronExpression")
    incremental_count: Optional[StrictStr] = Field(default=None, description="Number of incremental snapshots to take before taking a full snapshot.", alias="incrementalCount")
    retain: Optional[StrictStr] = Field(default=None, description="Number of objects to retain for the schedule type, default value is 10.")
    __properties: ClassVar[List[str]] = ["intervalPolicy", "dailyPolicy", "weeklyPolicy", "monthlyPolicy", "cronExpression", "incrementalCount", "retain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Schedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of interval_policy
        if self.interval_policy:
            _dict['intervalPolicy'] = self.interval_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of daily_policy
        if self.daily_policy:
            _dict['dailyPolicy'] = self.daily_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weekly_policy
        if self.weekly_policy:
            _dict['weeklyPolicy'] = self.weekly_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monthly_policy
        if self.monthly_policy:
            _dict['monthlyPolicy'] = self.monthly_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Schedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "intervalPolicy": V1IntervalPolicy.from_dict(obj["intervalPolicy"]) if obj.get("intervalPolicy") is not None else None,
            "dailyPolicy": V1DailyPolicy.from_dict(obj["dailyPolicy"]) if obj.get("dailyPolicy") is not None else None,
            "weeklyPolicy": V1WeeklyPolicy.from_dict(obj["weeklyPolicy"]) if obj.get("weeklyPolicy") is not None else None,
            "monthlyPolicy": V1MonthlyPolicy.from_dict(obj["monthlyPolicy"]) if obj.get("monthlyPolicy") is not None else None,
            "cronExpression": obj.get("cronExpression"),
            "incrementalCount": obj.get("incrementalCount"),
            "retain": obj.get("retain")
        })
        return _obj


