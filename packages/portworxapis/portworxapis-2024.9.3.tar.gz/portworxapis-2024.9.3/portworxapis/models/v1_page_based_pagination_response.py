# coding: utf-8

"""
    public/portworx/pds/metric/apiv1/metric.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1PageBasedPaginationResponse(BaseModel):
    """
    Metadata related to page based pagination for paginated API responses.
    """ # noqa: E501
    total_records: Optional[StrictStr] = Field(default=None, description="Total records without pagination available in the dataset.", alias="totalRecords")
    current_page: Optional[StrictStr] = Field(default=None, description="Current page number for this paginated response.", alias="currentPage")
    page_size: Optional[StrictStr] = Field(default=None, description="Page size used for pagination.", alias="pageSize")
    total_pages: Optional[StrictStr] = Field(default=None, description="Total pages based on the page_size provided in the request.", alias="totalPages")
    next_page: Optional[StrictStr] = Field(default=None, description="Next page if available in the dataset, -1 if unavailable.", alias="nextPage")
    prev_page: Optional[StrictStr] = Field(default=None, description="Previous page if available in the dataset, -1 if unavailable.", alias="prevPage")
    __properties: ClassVar[List[str]] = ["totalRecords", "currentPage", "pageSize", "totalPages", "nextPage", "prevPage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1PageBasedPaginationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1PageBasedPaginationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "totalRecords": obj.get("totalRecords"),
            "currentPage": obj.get("currentPage"),
            "pageSize": obj.get("pageSize"),
            "totalPages": obj.get("totalPages"),
            "nextPage": obj.get("nextPage"),
            "prevPage": obj.get("prevPage")
        })
        return _obj


