# coding: utf-8

"""
    public/portworx/pds/metric/apiv1/metric.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworx.models.v1_reference import V1Reference
from typing import Optional, Set
from typing_extensions import Self

class MetadataOfTheResource(BaseModel):
    """
    Metadata of the resource.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the resource.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the resource.")
    resource_version: Optional[StrictStr] = Field(default=None, description="A string that identifies the version of this object that can be used by clients to determine when objects have changed. This value must be passed unmodified back to the server by the client.", alias="resourceVersion")
    create_time: Optional[datetime] = Field(default=None, description="Creation time of the object.", alias="createTime")
    update_time: Optional[datetime] = Field(default=None, description="Update time of the object.", alias="updateTime")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels to apply to the object.")
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations for the object.")
    parent_reference: Optional[V1Reference] = Field(default=None, alias="parentReference")
    resource_names: Optional[Dict[str, StrictStr]] = Field(default=None, description="Resource names holds the mapping between the resource IDs and its display name which will be consumed by the frontend.", alias="resourceNames")
    __properties: ClassVar[List[str]] = ["name", "description", "resourceVersion", "createTime", "updateTime", "labels", "annotations", "parentReference", "resourceNames"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetadataOfTheResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
            "resource_names",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent_reference
        if self.parent_reference:
            _dict['parentReference'] = self.parent_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetadataOfTheResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "resourceVersion": obj.get("resourceVersion"),
            "createTime": obj.get("createTime"),
            "updateTime": obj.get("updateTime"),
            "labels": obj.get("labels"),
            "annotations": obj.get("annotations"),
            "parentReference": V1Reference.from_dict(obj["parentReference"]) if obj.get("parentReference") is not None else None,
            "resourceNames": obj.get("resourceNames")
        })
        return _obj


