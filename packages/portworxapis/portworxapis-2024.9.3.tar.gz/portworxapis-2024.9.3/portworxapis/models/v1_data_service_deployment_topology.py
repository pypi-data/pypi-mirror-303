# coding: utf-8

"""
    public/portworx/pds/metric/apiv1/metric.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworx.models.v1_template import V1Template
from typing import Optional, Set
from typing_extensions import Self

class V1DataServiceDeploymentTopology(BaseModel):
    """
    A DataService topology contains a number of nodes that have various attributes as a collective group. This is consumed in a DataService Deployment and the functionality is being controlled by the CRUD APIs of DataService Deployment.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the DataServiceDeployment topology.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the DataServiceDeployment topology.")
    instances: Optional[StrictStr] = Field(default=None, description="Number of instances of data services.")
    service_type: Optional[StrictStr] = Field(default=None, description="Service type are standard Kubernetes service types such as clusterIP, NodePort, load balancers, etc.", alias="serviceType")
    service_name: Optional[StrictStr] = Field(default=None, description="Service name is the name of service as provided by user.", alias="serviceName")
    load_balancer_source_ranges: Optional[List[StrictStr]] = Field(default=None, description="Source IP ranges to use for the deployed Load Balancer.", alias="loadBalancerSourceRanges")
    resource_settings: Optional[V1Template] = Field(default=None, alias="resourceSettings")
    service_configurations: Optional[V1Template] = Field(default=None, alias="serviceConfigurations")
    storage_options: Optional[V1Template] = Field(default=None, alias="storageOptions")
    __properties: ClassVar[List[str]] = ["name", "description", "instances", "serviceType", "serviceName", "loadBalancerSourceRanges", "resourceSettings", "serviceConfigurations", "storageOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1DataServiceDeploymentTopology from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource_settings
        if self.resource_settings:
            _dict['resourceSettings'] = self.resource_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_configurations
        if self.service_configurations:
            _dict['serviceConfigurations'] = self.service_configurations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_options
        if self.storage_options:
            _dict['storageOptions'] = self.storage_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1DataServiceDeploymentTopology from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "instances": obj.get("instances"),
            "serviceType": obj.get("serviceType"),
            "serviceName": obj.get("serviceName"),
            "loadBalancerSourceRanges": obj.get("loadBalancerSourceRanges"),
            "resourceSettings": V1Template.from_dict(obj["resourceSettings"]) if obj.get("resourceSettings") is not None else None,
            "serviceConfigurations": V1Template.from_dict(obj["serviceConfigurations"]) if obj.get("serviceConfigurations") is not None else None,
            "storageOptions": V1Template.from_dict(obj["storageOptions"]) if obj.get("storageOptions") is not None else None
        })
        return _obj


