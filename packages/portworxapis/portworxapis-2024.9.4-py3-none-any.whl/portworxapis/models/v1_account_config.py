# coding: utf-8

"""
    public/portworx/pds/backup/apiv1/backup.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworxapis.models.v1_config11 import V1Config11
from portworxapis.models.v1_zuora_subscription_info import V1ZuoraSubscriptionInfo
from typing import Optional, Set
from typing_extensions import Self

class V1AccountConfig(BaseModel):
    """
    Account Configuration Info used for Registration.
    """ # noqa: E501
    account_config: Optional[V1Config11] = Field(default=None, alias="accountConfig")
    pds_aws_registration_token: Optional[StrictStr] = Field(default=None, description="AWS registration token.", alias="pdsAwsRegistrationToken")
    pds_zuora_subscription: Optional[V1ZuoraSubscriptionInfo] = Field(default=None, alias="pdsZuoraSubscription")
    pxe_aws_registration_token: Optional[StrictStr] = Field(default=None, description="AWS registration token.", alias="pxeAwsRegistrationToken")
    pxe_zuora_subscription: Optional[V1ZuoraSubscriptionInfo] = Field(default=None, alias="pxeZuoraSubscription")
    baas_aws_registration_token: Optional[StrictStr] = Field(default=None, description="AWS registration token.", alias="baasAwsRegistrationToken")
    baas_zuora_subscription: Optional[V1ZuoraSubscriptionInfo] = Field(default=None, alias="baasZuoraSubscription")
    __properties: ClassVar[List[str]] = ["accountConfig", "pdsAwsRegistrationToken", "pdsZuoraSubscription", "pxeAwsRegistrationToken", "pxeZuoraSubscription", "baasAwsRegistrationToken", "baasZuoraSubscription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1AccountConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_config
        if self.account_config:
            _dict['accountConfig'] = self.account_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pds_zuora_subscription
        if self.pds_zuora_subscription:
            _dict['pdsZuoraSubscription'] = self.pds_zuora_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pxe_zuora_subscription
        if self.pxe_zuora_subscription:
            _dict['pxeZuoraSubscription'] = self.pxe_zuora_subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of baas_zuora_subscription
        if self.baas_zuora_subscription:
            _dict['baasZuoraSubscription'] = self.baas_zuora_subscription.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1AccountConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountConfig": V1Config11.from_dict(obj["accountConfig"]) if obj.get("accountConfig") is not None else None,
            "pdsAwsRegistrationToken": obj.get("pdsAwsRegistrationToken"),
            "pdsZuoraSubscription": V1ZuoraSubscriptionInfo.from_dict(obj["pdsZuoraSubscription"]) if obj.get("pdsZuoraSubscription") is not None else None,
            "pxeAwsRegistrationToken": obj.get("pxeAwsRegistrationToken"),
            "pxeZuoraSubscription": V1ZuoraSubscriptionInfo.from_dict(obj["pxeZuoraSubscription"]) if obj.get("pxeZuoraSubscription") is not None else None,
            "baasAwsRegistrationToken": obj.get("baasAwsRegistrationToken"),
            "baasZuoraSubscription": V1ZuoraSubscriptionInfo.from_dict(obj["baasZuoraSubscription"]) if obj.get("baasZuoraSubscription") is not None else None
        })
        return _obj


