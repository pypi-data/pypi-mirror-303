# coding: utf-8

"""
    public/portworx/pds/backup/apiv1/backup.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworxapis.models.v1_error_code import V1ErrorCode
from portworxapis.models.v1_phase1 import V1Phase1
from typing import Optional, Set
from typing_extensions import Self

class Restorev1Status(BaseModel):
    """
    Status of the restore.
    """ # noqa: E501
    started_at: Optional[datetime] = Field(default=None, description=" Time when restore was started.", alias="startedAt")
    completed_at: Optional[datetime] = Field(default=None, description=" Time when restore was completed.", alias="completedAt")
    error_code: Optional[V1ErrorCode] = Field(default=V1ErrorCode.ERROR_CODE_UNSPECIFIED, alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, description="Error message is description of the error in restore.", alias="errorMessage")
    phase: Optional[V1Phase1] = V1Phase1.PHASE_UNSPECIFIED
    custom_resource_name: Optional[StrictStr] = Field(default=None, description="Custom Resource Name is the kubernetes resource name for the restore that is built from ID.", alias="customResourceName")
    __properties: ClassVar[List[str]] = ["startedAt", "completedAt", "errorCode", "errorMessage", "phase", "customResourceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Restorev1Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Restorev1Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startedAt": obj.get("startedAt"),
            "completedAt": obj.get("completedAt"),
            "errorCode": obj.get("errorCode") if obj.get("errorCode") is not None else V1ErrorCode.ERROR_CODE_UNSPECIFIED,
            "errorMessage": obj.get("errorMessage"),
            "phase": obj.get("phase") if obj.get("phase") is not None else V1Phase1.PHASE_UNSPECIFIED,
            "customResourceName": obj.get("customResourceName")
        })
        return _obj


