# coding: utf-8

"""
    public/portworx/pds/backup/apiv1/backup.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworxapis.models.v1_event_type import V1EventType
from typing import Optional, Set
from typing_extensions import Self

class Dataservicedeploymenteventsv1Status(BaseModel):
    """
    Status of the event.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Action involved in the event.")
    count: Optional[StrictStr] = Field(default=None, description="No. of times the event has been generated.")
    message: Optional[StrictStr] = Field(default=None, description="Message related to the event.")
    reason: Optional[StrictStr] = Field(default=None, description="Reason for the event.")
    resource_kind: Optional[StrictStr] = Field(default=None, description="Resource Kind.", alias="resourceKind")
    resource_name: Optional[StrictStr] = Field(default=None, description="Resource Name.", alias="resourceName")
    timestamp_time: Optional[datetime] = Field(default=None, description="Timestamp of the event.", alias="timestampTime")
    type: Optional[V1EventType] = V1EventType.EVENT_TYPE_UNSPECIFIED
    __properties: ClassVar[List[str]] = ["action", "count", "message", "reason", "resourceKind", "resourceName", "timestampTime", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dataservicedeploymenteventsv1Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dataservicedeploymenteventsv1Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "count": obj.get("count"),
            "message": obj.get("message"),
            "reason": obj.get("reason"),
            "resourceKind": obj.get("resourceKind"),
            "resourceName": obj.get("resourceName"),
            "timestampTime": obj.get("timestampTime"),
            "type": obj.get("type") if obj.get("type") is not None else V1EventType.EVENT_TYPE_UNSPECIFIED
        })
        return _obj


