# coding: utf-8

"""
    public/portworx/pds/backup/apiv1/backup.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworxapis.models.v1_role_binding import V1RoleBinding
from typing import Optional, Set
from typing_extensions import Self

class V1AccessPolicy(BaseModel):
    """
    Access Policy controls access to control plane resources. With IAM, one can centrally manage permissions that control which resources users can access.
    """ # noqa: E501
    global_scope: Optional[List[StrictStr]] = Field(default=None, description="Global scope represents the global role names.", alias="globalScope")
    account: Optional[List[StrictStr]] = Field(default=None, description="Account represents the account role names.")
    tenant: Optional[List[V1RoleBinding]] = Field(default=None, description="Tenant represents the tenant level role bindings and resource IDs.")
    project: Optional[List[V1RoleBinding]] = Field(default=None, description="Project represents the project level role bindings and resource IDS.")
    namespace: Optional[List[V1RoleBinding]] = Field(default=None, description="Namespace represents the namespace level role bindings and resource IDS.")
    __properties: ClassVar[List[str]] = ["globalScope", "account", "tenant", "project", "namespace"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1AccessPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tenant (list)
        _items = []
        if self.tenant:
            for _item_tenant in self.tenant:
                if _item_tenant:
                    _items.append(_item_tenant.to_dict())
            _dict['tenant'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in project (list)
        _items = []
        if self.project:
            for _item_project in self.project:
                if _item_project:
                    _items.append(_item_project.to_dict())
            _dict['project'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in namespace (list)
        _items = []
        if self.namespace:
            for _item_namespace in self.namespace:
                if _item_namespace:
                    _items.append(_item_namespace.to_dict())
            _dict['namespace'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1AccessPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "globalScope": obj.get("globalScope"),
            "account": obj.get("account"),
            "tenant": [V1RoleBinding.from_dict(_item) for _item in obj["tenant"]] if obj.get("tenant") is not None else None,
            "project": [V1RoleBinding.from_dict(_item) for _item in obj["project"]] if obj.get("project") is not None else None,
            "namespace": [V1RoleBinding.from_dict(_item) for _item in obj["namespace"]] if obj.get("namespace") is not None else None
        })
        return _obj


