# coding: utf-8

"""
    public/portworx/pds/backup/apiv1/backup.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from portworxapis.models.v1_azure_credentials import V1AzureCredentials
from portworxapis.models.v1_google_credentials import V1GoogleCredentials
from portworxapis.models.v1_provider import V1Provider
from portworxapis.models.v1_s3_credentials import V1S3Credentials
from portworxapis.models.v1_unstructured_credentials import V1UnstructuredCredentials
from typing import Optional, Set
from typing_extensions import Self

class V1Config6(BaseModel):
    """
    Desired configuration of the Cloud Credential.
    """ # noqa: E501
    provider: Optional[V1Provider] = None
    azure_credentials: Optional[V1AzureCredentials] = Field(default=None, alias="azureCredentials")
    google_credentials: Optional[V1GoogleCredentials] = Field(default=None, alias="googleCredentials")
    s3_credentials: Optional[V1S3Credentials] = Field(default=None, alias="s3Credentials")
    unstructured_credentials: Optional[V1UnstructuredCredentials] = Field(default=None, alias="unstructuredCredentials")
    __properties: ClassVar[List[str]] = ["provider", "azureCredentials", "googleCredentials", "s3Credentials", "unstructuredCredentials"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Config6 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_credentials
        if self.azure_credentials:
            _dict['azureCredentials'] = self.azure_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_credentials
        if self.google_credentials:
            _dict['googleCredentials'] = self.google_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of s3_credentials
        if self.s3_credentials:
            _dict['s3Credentials'] = self.s3_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unstructured_credentials
        if self.unstructured_credentials:
            _dict['unstructuredCredentials'] = self.unstructured_credentials.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Config6 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "provider": V1Provider.from_dict(obj["provider"]) if obj.get("provider") is not None else None,
            "azureCredentials": V1AzureCredentials.from_dict(obj["azureCredentials"]) if obj.get("azureCredentials") is not None else None,
            "googleCredentials": V1GoogleCredentials.from_dict(obj["googleCredentials"]) if obj.get("googleCredentials") is not None else None,
            "s3Credentials": V1S3Credentials.from_dict(obj["s3Credentials"]) if obj.get("s3Credentials") is not None else None,
            "unstructuredCredentials": V1UnstructuredCredentials.from_dict(obj["unstructuredCredentials"]) if obj.get("unstructuredCredentials") is not None else None
        })
        return _obj


