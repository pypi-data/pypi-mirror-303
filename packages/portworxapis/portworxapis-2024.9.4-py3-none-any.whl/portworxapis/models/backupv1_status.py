# coding: utf-8

"""
    public/portworx/pds/backup/apiv1/backup.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworxapis.models.status_phase import StatusPhase
from portworxapis.models.v1_data_service_deployment_meta_data import V1DataServiceDeploymentMetaData
from typing import Optional, Set
from typing_extensions import Self

class Backupv1Status(BaseModel):
    """
    Status of the Backup.
    """ # noqa: E501
    cloud_snap_id: Optional[StrictStr] = Field(default=None, description="CloudSnapID snapshot of the backup volume.", alias="cloudSnapId")
    start_time: Optional[datetime] = Field(default=None, description="Start time of the backup.", alias="startTime")
    completion_time: Optional[datetime] = Field(default=None, description="Completion time of the backup.", alias="completionTime")
    phase: Optional[StatusPhase] = StatusPhase.PHASE_UNSPECIFIED
    error_code: Optional[StrictStr] = Field(default=None, description="ErrorCode if CompletionStatus is \"Failed\".", alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, description="ErrorMessage associated with the ErrorCode.", alias="errorMessage")
    file_size: Optional[StrictStr] = Field(default=None, description="FileSize of the CloudSnap image.", alias="fileSize")
    data_service_deployment_meta_data: Optional[V1DataServiceDeploymentMetaData] = Field(default=None, alias="dataServiceDeploymentMetaData")
    __properties: ClassVar[List[str]] = ["cloudSnapId", "startTime", "completionTime", "phase", "errorCode", "errorMessage", "fileSize", "dataServiceDeploymentMetaData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Backupv1Status from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_service_deployment_meta_data
        if self.data_service_deployment_meta_data:
            _dict['dataServiceDeploymentMetaData'] = self.data_service_deployment_meta_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Backupv1Status from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudSnapId": obj.get("cloudSnapId"),
            "startTime": obj.get("startTime"),
            "completionTime": obj.get("completionTime"),
            "phase": obj.get("phase") if obj.get("phase") is not None else StatusPhase.PHASE_UNSPECIFIED,
            "errorCode": obj.get("errorCode"),
            "errorMessage": obj.get("errorMessage"),
            "fileSize": obj.get("fileSize"),
            "dataServiceDeploymentMetaData": V1DataServiceDeploymentMetaData.from_dict(obj["dataServiceDeploymentMetaData"]) if obj.get("dataServiceDeploymentMetaData") is not None else None
        })
        return _obj


