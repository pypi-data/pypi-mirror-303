# coding: utf-8

"""
    public/portworx/pds/backup/apiv1/backup.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from portworxapis.models.v1_destination_references import V1DestinationReferences
from portworxapis.models.v1_source_references import V1SourceReferences
from typing import Optional, Set
from typing_extensions import Self

class V1Config2(BaseModel):
    """
    Desired configuration of the restore.
    """ # noqa: E501
    source_references: Optional[V1SourceReferences] = Field(default=None, alias="sourceReferences")
    destination_references: Optional[V1DestinationReferences] = Field(default=None, alias="destinationReferences")
    custom_resource_name: Optional[StrictStr] = Field(default=None, description="K8s resource name for restore, built from [\"restore-\" + name + short-id].", alias="customResourceName")
    __properties: ClassVar[List[str]] = ["sourceReferences", "destinationReferences", "customResourceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Config2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "custom_resource_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_references
        if self.source_references:
            _dict['sourceReferences'] = self.source_references.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_references
        if self.destination_references:
            _dict['destinationReferences'] = self.destination_references.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Config2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceReferences": V1SourceReferences.from_dict(obj["sourceReferences"]) if obj.get("sourceReferences") is not None else None,
            "destinationReferences": V1DestinationReferences.from_dict(obj["destinationReferences"]) if obj.get("destinationReferences") is not None else None,
            "customResourceName": obj.get("customResourceName")
        })
        return _obj


