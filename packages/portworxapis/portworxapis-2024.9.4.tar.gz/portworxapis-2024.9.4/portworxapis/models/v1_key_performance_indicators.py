# coding: utf-8

"""
    public/portworx/pds/backup/apiv1/backup.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1KeyPerformanceIndicators(BaseModel):
    """
    V1KeyPerformanceIndicators
    """ # noqa: E501
    data_service_deployment_available_count: Optional[StrictInt] = Field(default=None, description="count of available data service deployments.", alias="dataServiceDeploymentAvailableCount")
    data_service_deployment_partially_available_count: Optional[StrictInt] = Field(default=None, description="count of partially available data service deployments.", alias="dataServiceDeploymentPartiallyAvailableCount")
    data_service_deployment_unavailable_count: Optional[StrictInt] = Field(default=None, description="count of unavailable data service deployments.", alias="dataServiceDeploymentUnavailableCount")
    data_service_deployment_unknown_count: Optional[StrictInt] = Field(default=None, description="count of unknown data service deployments.", alias="dataServiceDeploymentUnknownCount")
    data_service_deployment_not_applicable_count: Optional[StrictInt] = Field(default=None, description="count of unknown data service deployments.", alias="dataServiceDeploymentNotApplicableCount")
    running_instances: Optional[StrictInt] = Field(default=None, description="count of running instances.", alias="runningInstances")
    not_running_instances: Optional[StrictInt] = Field(default=None, description="count of not running instances.", alias="notRunningInstances")
    __properties: ClassVar[List[str]] = ["dataServiceDeploymentAvailableCount", "dataServiceDeploymentPartiallyAvailableCount", "dataServiceDeploymentUnavailableCount", "dataServiceDeploymentUnknownCount", "dataServiceDeploymentNotApplicableCount", "runningInstances", "notRunningInstances"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1KeyPerformanceIndicators from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1KeyPerformanceIndicators from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataServiceDeploymentAvailableCount": obj.get("dataServiceDeploymentAvailableCount"),
            "dataServiceDeploymentPartiallyAvailableCount": obj.get("dataServiceDeploymentPartiallyAvailableCount"),
            "dataServiceDeploymentUnavailableCount": obj.get("dataServiceDeploymentUnavailableCount"),
            "dataServiceDeploymentUnknownCount": obj.get("dataServiceDeploymentUnknownCount"),
            "dataServiceDeploymentNotApplicableCount": obj.get("dataServiceDeploymentNotApplicableCount"),
            "runningInstances": obj.get("runningInstances"),
            "notRunningInstances": obj.get("notRunningInstances")
        })
        return _obj


