# Tox configuration file
# Read more under https://tox.wiki/
[main]
name = vptstools

[tox]
minversion = 3.24
envlist = py39, py310, py311
isolated_build = True
skip_missing_interpreters = true

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311

[testenv]
description = Invoke pytest to run automated tests
allowlist_externals = pytest
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    develop
    transfer
commands =
    pytest {posargs}

[testenv:format]
description = Run black code formatting
deps = black
skip_install = true
commands = black .

[testenv:lint]
description = Run flake8 code linting
deps = flake8
skip_install = true
commands =
    flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
    flake8 src --count --exit-zero --max-complexity=10 --max-line-length=89 --statistics

[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# https://setuptools.pypa.io/en/stable/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
passenv =
    SETUPTOOLS_*
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}


[testenv:{docs,doctests,linkcheck}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
passenv =
    SETUPTOOLS_*
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
extras =
    develop
    transfer
commands =
    sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}


[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_REPOSITORY_URL
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*


[testenv:dev]
description = Create development environment with venv and register ipykernel
basepython = python3.10
usedevelop = true
envdir = {toxinidir}/venv
extras =
    develop
    transfer
deps =
    ipykernel
commands =
    python -m ipykernel install --user --name {[main]name} --display-name 'Python 3.10 ({[main]name})'
