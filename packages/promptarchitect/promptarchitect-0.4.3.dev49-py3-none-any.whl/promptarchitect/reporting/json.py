"""Reporter implementation for HTML-based test reports.

JSON reports are generated by serializing the model contents to a JSON File. We use
pydantic to serialize the data. You can use the JSON reports to derive your own custom
reports or to integrate with other systems.
"""

import json
import os
from typing import List

from promptarchitect.reporting.core import TestReporter
from promptarchitect.specification import EngineeredPromptSpecification
from promptarchitect.validation.core import TestCaseOutcome


class JsonTestReporter(TestReporter):
    """Reports test results in HTML format."""

    def __init__(self, report_path: str) -> None:
        """Initialize the HTML test reporter.

        Parameters
        ----------
        report_path : str
            The path to the report

        """
        super().__init__(report_path)

    def generate_report(
        self,
        prompts: List[EngineeredPromptSpecification],
        test_outcomes: List[TestCaseOutcome],
    ) -> None:
        """Generate the JSON test report.

        Parameters
        ----------
        prompts : List[EngineeredPromptSpecification]
            The prompts that were tested
        test_outcomes : List[TestCaseOutcome]
            The outcomes of the test cases

        """
        os.makedirs(self.report_path, exist_ok=True)

        test_report = self._collect_results(prompts, test_outcomes)

        report_file_path = os.path.join(self.report_path, "report.json")

        with open(report_file_path, "w", encoding="utf-8") as report_file:
            json.dump(test_report.model_dump(), report_file, indent=4, default=str)
