# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.document import Document
from ..types.http_validation_error import HttpValidationError
from ..types.llm_model import LlmModel
from ..types.map_reduce_chain_out import MapReduceChainOut
from ..types.structured_parse_result import StructuredParseResult

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ChainClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def structured_parse(
        self,
        *,
        text_input: str,
        custom_type_dict: typing.Dict[str, typing.Any],
        model: LlmModel,
        request_options: typing.Optional[RequestOptions] = None
    ) -> StructuredParseResult:
        """
        Parameters
        ----------
        text_input : str
            The text input to be parsed.

        custom_type_dict : typing.Dict[str, typing.Any]
            A dictionary of field names and their default values.

        model : LlmModel

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StructuredParseResult
            Successful Response

        Examples
        --------
        from athena import LlmModel
        from athena.client import Athena

        client = Athena(
            api_key="YOUR_API_KEY",
        )
        client.chain.structured_parse(
            text_input='Athena is an AI-native analytics platform and artificial employee built to accelerate analytics workflows\n                by offering enterprise teams co-pilot and auto-pilot modes. Athena learns your workflow as a co-pilot,\n                allowing you to hand over controls to her for autonomous execution with confidence."\n\n                Give me all of the modes Athena provides.',
            custom_type_dict={},
            model=LlmModel.GPT_4_TURBO,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v0/structured-parse",
            method="POST",
            json={"text_input": text_input, "custom_type_dict": custom_type_dict, "model": model},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(StructuredParseResult, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def map_reduce_chain(
        self,
        *,
        documents: typing.Sequence[Document],
        model: LlmModel,
        operator_prompt: str,
        reducer_prompt: str,
        input: str,
        request_options: typing.Optional[RequestOptions] = None
    ) -> MapReduceChainOut:
        """
        Parameters
        ----------
        documents : typing.Sequence[Document]

        model : LlmModel

        operator_prompt : str

        reducer_prompt : str

        input : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MapReduceChainOut
            Successful Response

        Examples
        --------
        from athena import Document, LlmModel
        from athena.client import Athena

        client = Athena(
            api_key="YOUR_API_KEY",
        )
        client.chain.map_reduce_chain(
            documents=[
                Document(
                    metadata={"key": "value"},
                    page_content="Athena is an AI-native analytics platform and artificial employee built to accelerate analytics workflows by offering enterprise teams co-pilot and auto-pilot modes. Athena learns your workflow as a co-pilot, allowing you to hand over controls to her for autonomous execution with confidence.",
                )
            ],
            model=LlmModel.MISTRAL_LARGE_0224,
            operator_prompt="summarize the content",
            reducer_prompt="Combine these summaries",
            input="return a summary in a single sentence",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v0/tools/map-reduce",
            method="POST",
            json={
                "documents": documents,
                "model": model,
                "operator_prompt": operator_prompt,
                "reducer_prompt": reducer_prompt,
                "input": input,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(MapReduceChainOut, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncChainClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def structured_parse(
        self,
        *,
        text_input: str,
        custom_type_dict: typing.Dict[str, typing.Any],
        model: LlmModel,
        request_options: typing.Optional[RequestOptions] = None
    ) -> StructuredParseResult:
        """
        Parameters
        ----------
        text_input : str
            The text input to be parsed.

        custom_type_dict : typing.Dict[str, typing.Any]
            A dictionary of field names and their default values.

        model : LlmModel

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StructuredParseResult
            Successful Response

        Examples
        --------
        from athena import LlmModel
        from athena.client import AsyncAthena

        client = AsyncAthena(
            api_key="YOUR_API_KEY",
        )
        await client.chain.structured_parse(
            text_input='Athena is an AI-native analytics platform and artificial employee built to accelerate analytics workflows\n                by offering enterprise teams co-pilot and auto-pilot modes. Athena learns your workflow as a co-pilot,\n                allowing you to hand over controls to her for autonomous execution with confidence."\n\n                Give me all of the modes Athena provides.',
            custom_type_dict={},
            model=LlmModel.GPT_4_TURBO,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v0/structured-parse",
            method="POST",
            json={"text_input": text_input, "custom_type_dict": custom_type_dict, "model": model},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(StructuredParseResult, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def map_reduce_chain(
        self,
        *,
        documents: typing.Sequence[Document],
        model: LlmModel,
        operator_prompt: str,
        reducer_prompt: str,
        input: str,
        request_options: typing.Optional[RequestOptions] = None
    ) -> MapReduceChainOut:
        """
        Parameters
        ----------
        documents : typing.Sequence[Document]

        model : LlmModel

        operator_prompt : str

        reducer_prompt : str

        input : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MapReduceChainOut
            Successful Response

        Examples
        --------
        from athena import Document, LlmModel
        from athena.client import AsyncAthena

        client = AsyncAthena(
            api_key="YOUR_API_KEY",
        )
        await client.chain.map_reduce_chain(
            documents=[
                Document(
                    metadata={"key": "value"},
                    page_content="Athena is an AI-native analytics platform and artificial employee built to accelerate analytics workflows by offering enterprise teams co-pilot and auto-pilot modes. Athena learns your workflow as a co-pilot, allowing you to hand over controls to her for autonomous execution with confidence.",
                )
            ],
            model=LlmModel.MISTRAL_LARGE_0224,
            operator_prompt="summarize the content",
            reducer_prompt="Combine these summaries",
            input="return a summary in a single sentence",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v0/tools/map-reduce",
            method="POST",
            json={
                "documents": documents,
                "model": model,
                "operator_prompt": operator_prompt,
                "reducer_prompt": reducer_prompt,
                "input": input,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(MapReduceChainOut, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
