# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..types.url_result import UrlResult

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SearchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_urls(
        self,
        *,
        query: str,
        num_urls: int,
        tbs: str,
        country_code: typing.Optional[str] = OMIT,
        country_restrict: typing.Optional[str] = OMIT,
        site: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> UrlResult:
        """
        Parameters
        ----------
        query : str

        num_urls : int

        tbs : str

        country_code : typing.Optional[str]

        country_restrict : typing.Optional[str]

        site : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UrlResult
            Successful Response

        Examples
        --------
        from athena.client import Athena

        client = Athena(
            api_key="YOUR_API_KEY",
        )
        client.search.get_urls(
            query="Athena Intelligence",
            num_urls=10,
            tbs="qdr:m",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v0/tools/search/get-urls",
            method="POST",
            json={
                "query": query,
                "num_urls": num_urls,
                "tbs": tbs,
                "country_code": country_code,
                "country_restrict": country_restrict,
                "site": site,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(UrlResult, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSearchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_urls(
        self,
        *,
        query: str,
        num_urls: int,
        tbs: str,
        country_code: typing.Optional[str] = OMIT,
        country_restrict: typing.Optional[str] = OMIT,
        site: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> UrlResult:
        """
        Parameters
        ----------
        query : str

        num_urls : int

        tbs : str

        country_code : typing.Optional[str]

        country_restrict : typing.Optional[str]

        site : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UrlResult
            Successful Response

        Examples
        --------
        from athena.client import AsyncAthena

        client = AsyncAthena(
            api_key="YOUR_API_KEY",
        )
        await client.search.get_urls(
            query="Athena Intelligence",
            num_urls=10,
            tbs="qdr:m",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v0/tools/search/get-urls",
            method="POST",
            json={
                "query": query,
                "num_urls": num_urls,
                "tbs": tbs,
                "country_code": country_code,
                "country_restrict": country_restrict,
                "site": site,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(UrlResult, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
