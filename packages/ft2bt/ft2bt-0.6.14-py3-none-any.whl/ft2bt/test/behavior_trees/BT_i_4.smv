-------------------------------------------------------------------------------------------------------------------------
-- CONDITION NODE
-------------------------------------------------------------------------------------------------------------------------

-- The output is `true` if the condition is true, `false` otherwise.

MODULE bt_condition(enable_condition, condition)
VAR
    enable : boolean;
    output : { None, Success, Failure };
ASSIGN
    init(enable) := FALSE;
    init(output) := None;
    next(enable) := enable_condition;
    next(output) :=
    case
        condition & enable_condition: Success;
        TRUE : Failure;
    esac;
-------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------
-- ACTION NODE
-------------------------------------------------------------------------------------------------------------------------

-- The output is `running` while the action is being executed, `true` if the action is successful, `false` otherwise.

MODULE bt_action(enable_condition)
VAR
    enable : boolean;
    goal_reached : boolean;
    output : { None, Running, Failure, Success };
    i : { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
ASSIGN
    init(enable) := FALSE;
    init(output) := None;
    init(goal_reached) := FALSE;
    init(i) := 0;
    next(enable) := enable_condition | enable;
    next(output) :=
    case
        goal_reached : Success;
        enable_condition | enable: Running;
        TRUE : Failure;
    esac;
    next(i) :=
    case
        output = Running & i<10: i + 1;
        i = 10 : 10;
        TRUE : 0;
    esac;
    next(goal_reached) :=
    case
        goal_reached : goal_reached;
        i < 10: FALSE;
        i >= 10 : TRUE;
        TRUE : goal_reached;
    esac;
-------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------
-- FALLBACK NODE
-------------------------------------------------------------------------------------------------------------------------

-- The output is `running` if the left child is `running`, `true` if the left child is `true`, right child otherwise.

MODULE bt_fallback(left_bt, right_bt)
DEFINE 
output := case
    left_bt.output in { Running, Success } : left_bt.output;
    TRUE : right_bt.output;
    esac;
-------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------
-- SEQUENCE NODE
-------------------------------------------------------------------------------------------------------------------------

-- The output is `running` if the left child is `running`, `false` if the left child is `false`, right child otherwise.

MODULE bt_sequence(left_bt, right_bt)
DEFINE
    output :=
    case
        left_bt.output in { Running, Failure } : left_bt.output;
        TRUE : right_bt.output;
    esac;
-------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------
-- NEGATION NODE
-------------------------------------------------------------------------------------------------------------------------

-- The output is `true` if the child output is `false`, `false` otherwise.

MODULE bt_not(child_bt)
DEFINE
    output :=
    case
        child_bt.output = Failure : Success;
        child_bt.output = Success : Failure;
        TRUE : child_bt.output;
    esac;
-------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------
-- PLACEHOLDER NODE
-------------------------------------------------------------------------------------------------------------------------

-- The output is `success` if the condition is true, `failure` otherwise.

MODULE bt_placeholder(condition)
DEFINE
    output := 
    case
        condition : Success;
        TRUE : Failure;
    esac;
-------------------------------------------------------------------------------------------------------------------------

MODULE HZ_41(condition, Event_E41)
  VAR
    E41 : bt_condition(TRUE, condition & Event_E41);
  DEFINE
    output := E41.output;

MODULE HZ_42(condition, Event_E42, Event_E43)
  VAR
    E42 : bt_condition(TRUE, condition & Event_E42);
    E43 : bt_condition(TRUE, condition & Event_E43);
    fallback_0 : bt_fallback(E42, E43);
  DEFINE
    output := fallback_0.output;

MODULE OS3(condition, Event_E41, Event_E42, Event_E43)
  VAR
    HZ_41 : HZ_41(condition, Event_E41);
    SS_411 : bt_action(HZ_41.output = Success);
    seq_0 : bt_sequence(HZ_41, SS_411);
    HZ_42 : HZ_42(condition, Event_E42, Event_E43);
    SS_421 : bt_action(HZ_42.output = Success);
    seq_1 : bt_sequence(HZ_42, SS_421);
    fallback_0 : bt_fallback(seq_0, seq_1);
  DEFINE
    output := fallback_0.output;

MODULE OS1(condition, Event_E41, Event_E42, Event_E43)
  VAR
    HZ_41 : HZ_41(condition, Event_E41);
    SS_411 : bt_action(HZ_41.output = Success);
    seq_0 : bt_sequence(HZ_41, SS_411);
    HZ_42 : HZ_42(condition, Event_E42, Event_E43);
    SS_421 : bt_action(HZ_42.output = Success);
    seq_1 : bt_sequence(HZ_42, SS_421);
    fallback_0 : bt_fallback(seq_0, seq_1);
  DEFINE
    output := fallback_0.output;

MODULE OS2(condition, Event_E41, Event_E42, Event_E43)
  VAR
    HZ_41 : HZ_41(condition, Event_E41);
    SS_411 : bt_action(HZ_41.output = Success);
    seq_0 : bt_sequence(HZ_41, SS_411);
    HZ_42 : HZ_42(condition, Event_E42, Event_E43);
    SS_421 : bt_action(HZ_42.output = Success);
    seq_1 : bt_sequence(HZ_42, SS_421);
    fallback_0 : bt_fallback(seq_0, seq_1);
  DEFINE
    output := fallback_0.output;

MODULE I_4(condition, Event_E41, Event_E42, Event_E43, Event_condition_OS1, Event_condition_OS2, Event_condition_OS3)
  VAR
    condition_OS1 : bt_condition(TRUE, condition & Event_condition_OS1);
    OS1 : OS1(condition, Event_E41, Event_E42, Event_E43);
    seq_0 : bt_sequence(condition_OS1, OS1);
    condition_OS2 : bt_condition(TRUE, condition & Event_condition_OS2);
    OS2 : OS2(condition, Event_E41, Event_E42, Event_E43);
    seq_1 : bt_sequence(condition_OS2, OS2);
    condition_OS3 : bt_condition(TRUE, condition & Event_condition_OS3);
    OS3 : OS3(condition, Event_E41, Event_E42, Event_E43);
    seq_2 : bt_sequence(condition_OS3, OS3);
    fallback_0 : bt_fallback(seq_0, seq_1);
    fallback_1 : bt_fallback(fallback_0, seq_2);
  DEFINE
    output := fallback_1.output;

MODULE main
  FROZENVAR
    os: {os1, os2, os3};
    Event_E41: boolean;
    Event_E42: boolean;
    Event_E43: boolean;
    Event_condition_OS1: boolean;
    Event_condition_OS2: boolean;
    Event_condition_OS3: boolean;
  ASSIGN
    ASSIGN
    init(Event_condition_OS1) := os = os1;
    ASSIGN
    init(Event_condition_OS2) := os = os2;
    ASSIGN
    init(Event_condition_OS3) := os = os3;
  VAR
    I_4 : I_4(TRUE, Event_E41, Event_E42, Event_E43, Event_condition_OS1, Event_condition_OS2, Event_condition_OS3);
-------------------------------------------------------------------------------------------------------------------------
-- CTL PROPERTIES
-------------------------------------------------------------------------------------------------------------------------

-- PROPOSITION 1
-- Verify that operating situations (os) are being checked until one is successful. 
-- Verify that there is always one successful operating situation.

CTLSPEC
    AG (I_4.condition_OS1.enable & I_4.condition_OS2.enable & I_4.condition_OS3.enable -> AG(I_4.condition_OS1.output = Success | I_4.condition_OS2.output = Success | I_4.condition_OS3.output = Success));


-- PROPOSITION 2
-- Verify that when an operating situation is found, its corresponding hazards are being checked until one is found. 
-- It is not necessary to check all hazards if one is found. If no event is found, any hazard is detected. 

CTLSPEC
    AG (I_4.condition_OS1.output = Success -> AG(I_4.OS1.HZ_41.output = Success | I_4.OS1.HZ_42.output = Success | I_4.OS1.HZ_41.output = Failure & I_4.OS1.HZ_42.output = Failure));

-- PROPOSITION 2
-- Verify that when an operating situation is found, its corresponding hazards are being checked until one is found. 
-- It is not necessary to check all hazards if one is found. If no event is found, any hazard is detected. 

CTLSPEC
    AG (I_4.condition_OS2.output = Success -> AG(I_4.OS2.HZ_41.output = Success | I_4.OS2.HZ_42.output = Success | I_4.OS2.HZ_41.output = Failure & I_4.OS2.HZ_42.output = Failure));

-- PROPOSITION 2
-- Verify that when an operating situation is found, its corresponding hazards are being checked until one is found. 
-- It is not necessary to check all hazards if one is found. If no event is found, any hazard is detected. 

CTLSPEC
    AG (I_4.condition_OS3.output = Success -> AG(I_4.OS3.HZ_41.output = Success | I_4.OS3.HZ_42.output = Success | I_4.OS3.HZ_41.output = Failure & I_4.OS3.HZ_42.output = Failure));

-- PROPOSITION 3
-- Verify that when a hazard found under the identified operating scenatio, its corresponding safety state action 
-- is running until the safety goal is reached

CTLSPEC
    AG (I_4.OS1.HZ_41.output = Success -> AX( A [I_4.OS1.SS_411.output = Running U I_4.OS1.SS_411.goal_reached]));

-- PROPOSITION 3
-- Verify that when a hazard found under the identified operating scenatio, its corresponding safety state action 
-- is running until the safety goal is reached

CTLSPEC
    AG (I_4.OS1.HZ_42.output = Success -> AX( A [I_4.OS1.SS_421.output = Running U I_4.OS1.SS_421.goal_reached]));

-- PROPOSITION 3
-- Verify that when a hazard found under the identified operating scenatio, its corresponding safety state action 
-- is running until the safety goal is reached

CTLSPEC
    AG (I_4.OS2.HZ_41.output = Success -> AX( A [I_4.OS2.SS_411.output = Running U I_4.OS2.SS_411.goal_reached]));

-- PROPOSITION 3
-- Verify that when a hazard found under the identified operating scenatio, its corresponding safety state action 
-- is running until the safety goal is reached

CTLSPEC
    AG (I_4.OS2.HZ_42.output = Success -> AX( A [I_4.OS2.SS_421.output = Running U I_4.OS2.SS_421.goal_reached]));

-- PROPOSITION 3
-- Verify that when a hazard found under the identified operating scenatio, its corresponding safety state action 
-- is running until the safety goal is reached

CTLSPEC
    AG (I_4.OS3.HZ_41.output = Success -> AX( A [I_4.OS3.SS_411.output = Running U I_4.OS3.SS_411.goal_reached]));

-- PROPOSITION 3
-- Verify that when a hazard found under the identified operating scenatio, its corresponding safety state action 
-- is running until the safety goal is reached

CTLSPEC
    AG (I_4.OS3.HZ_42.output = Success -> AX( A [I_4.OS3.SS_421.output = Running U I_4.OS3.SS_421.goal_reached]));

