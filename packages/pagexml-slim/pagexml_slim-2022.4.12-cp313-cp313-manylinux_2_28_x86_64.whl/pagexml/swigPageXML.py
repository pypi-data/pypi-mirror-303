# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
import _swigPageXML

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swigPageXML.delete_SwigPyIterator

    def value(self):
        return _swigPageXML.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _swigPageXML.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _swigPageXML.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _swigPageXML.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _swigPageXML.SwigPyIterator_equal(self, x)

    def copy(self):
        return _swigPageXML.SwigPyIterator_copy(self)

    def next(self):
        return _swigPageXML.SwigPyIterator_next(self)

    def __next__(self):
        return _swigPageXML.SwigPyIterator___next__(self)

    def previous(self):
        return _swigPageXML.SwigPyIterator_previous(self)

    def advance(self, n):
        return _swigPageXML.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _swigPageXML.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _swigPageXML.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _swigPageXML.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _swigPageXML.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _swigPageXML.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _swigPageXML.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _swigPageXML:
_swigPageXML.SwigPyIterator_swigregister(SwigPyIterator)
class Point2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _swigPageXML.Point2f_swiginit(self, _swigPageXML.new_Point2f(*args))
    x = property(_swigPageXML.Point2f_x_get, _swigPageXML.Point2f_x_set)
    y = property(_swigPageXML.Point2f_y_get, _swigPageXML.Point2f_y_set)
    __swig_destroy__ = _swigPageXML.delete_Point2f

# Register Point2f in _swigPageXML:
_swigPageXML.Point2f_swigregister(Point2f)
class Size2i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _swigPageXML.Size2i_swiginit(self, _swigPageXML.new_Size2i(*args))
    width = property(_swigPageXML.Size2i_width_get, _swigPageXML.Size2i_width_set)
    height = property(_swigPageXML.Size2i_height_get, _swigPageXML.Size2i_height_set)
    __swig_destroy__ = _swigPageXML.delete_Size2i

# Register Size2i in _swigPageXML:
_swigPageXML.Size2i_swigregister(Size2i)
class cvPoint2fVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigPageXML.cvPoint2fVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigPageXML.cvPoint2fVector___nonzero__(self)

    def __bool__(self):
        return _swigPageXML.cvPoint2fVector___bool__(self)

    def __len__(self):
        return _swigPageXML.cvPoint2fVector___len__(self)

    def __getslice__(self, i, j):
        return _swigPageXML.cvPoint2fVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigPageXML.cvPoint2fVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigPageXML.cvPoint2fVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigPageXML.cvPoint2fVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigPageXML.cvPoint2fVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigPageXML.cvPoint2fVector___setitem__(self, *args)

    def pop(self):
        return _swigPageXML.cvPoint2fVector_pop(self)

    def append(self, x):
        return _swigPageXML.cvPoint2fVector_append(self, x)

    def empty(self):
        return _swigPageXML.cvPoint2fVector_empty(self)

    def size(self):
        return _swigPageXML.cvPoint2fVector_size(self)

    def swap(self, v):
        return _swigPageXML.cvPoint2fVector_swap(self, v)

    def begin(self):
        return _swigPageXML.cvPoint2fVector_begin(self)

    def end(self):
        return _swigPageXML.cvPoint2fVector_end(self)

    def rbegin(self):
        return _swigPageXML.cvPoint2fVector_rbegin(self)

    def rend(self):
        return _swigPageXML.cvPoint2fVector_rend(self)

    def clear(self):
        return _swigPageXML.cvPoint2fVector_clear(self)

    def get_allocator(self):
        return _swigPageXML.cvPoint2fVector_get_allocator(self)

    def pop_back(self):
        return _swigPageXML.cvPoint2fVector_pop_back(self)

    def erase(self, *args):
        return _swigPageXML.cvPoint2fVector_erase(self, *args)

    def __init__(self, *args):
        _swigPageXML.cvPoint2fVector_swiginit(self, _swigPageXML.new_cvPoint2fVector(*args))

    def push_back(self, x):
        return _swigPageXML.cvPoint2fVector_push_back(self, x)

    def front(self):
        return _swigPageXML.cvPoint2fVector_front(self)

    def back(self):
        return _swigPageXML.cvPoint2fVector_back(self)

    def assign(self, n, x):
        return _swigPageXML.cvPoint2fVector_assign(self, n, x)

    def resize(self, *args):
        return _swigPageXML.cvPoint2fVector_resize(self, *args)

    def insert(self, *args):
        return _swigPageXML.cvPoint2fVector_insert(self, *args)

    def reserve(self, n):
        return _swigPageXML.cvPoint2fVector_reserve(self, n)

    def capacity(self):
        return _swigPageXML.cvPoint2fVector_capacity(self)
    __swig_destroy__ = _swigPageXML.delete_cvPoint2fVector

# Register cvPoint2fVector in _swigPageXML:
_swigPageXML.cvPoint2fVector_swigregister(cvPoint2fVector)
class cvSize2iVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigPageXML.cvSize2iVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigPageXML.cvSize2iVector___nonzero__(self)

    def __bool__(self):
        return _swigPageXML.cvSize2iVector___bool__(self)

    def __len__(self):
        return _swigPageXML.cvSize2iVector___len__(self)

    def __getslice__(self, i, j):
        return _swigPageXML.cvSize2iVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigPageXML.cvSize2iVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigPageXML.cvSize2iVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigPageXML.cvSize2iVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigPageXML.cvSize2iVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigPageXML.cvSize2iVector___setitem__(self, *args)

    def pop(self):
        return _swigPageXML.cvSize2iVector_pop(self)

    def append(self, x):
        return _swigPageXML.cvSize2iVector_append(self, x)

    def empty(self):
        return _swigPageXML.cvSize2iVector_empty(self)

    def size(self):
        return _swigPageXML.cvSize2iVector_size(self)

    def swap(self, v):
        return _swigPageXML.cvSize2iVector_swap(self, v)

    def begin(self):
        return _swigPageXML.cvSize2iVector_begin(self)

    def end(self):
        return _swigPageXML.cvSize2iVector_end(self)

    def rbegin(self):
        return _swigPageXML.cvSize2iVector_rbegin(self)

    def rend(self):
        return _swigPageXML.cvSize2iVector_rend(self)

    def clear(self):
        return _swigPageXML.cvSize2iVector_clear(self)

    def get_allocator(self):
        return _swigPageXML.cvSize2iVector_get_allocator(self)

    def pop_back(self):
        return _swigPageXML.cvSize2iVector_pop_back(self)

    def erase(self, *args):
        return _swigPageXML.cvSize2iVector_erase(self, *args)

    def __init__(self, *args):
        _swigPageXML.cvSize2iVector_swiginit(self, _swigPageXML.new_cvSize2iVector(*args))

    def push_back(self, x):
        return _swigPageXML.cvSize2iVector_push_back(self, x)

    def front(self):
        return _swigPageXML.cvSize2iVector_front(self)

    def back(self):
        return _swigPageXML.cvSize2iVector_back(self)

    def assign(self, n, x):
        return _swigPageXML.cvSize2iVector_assign(self, n, x)

    def resize(self, *args):
        return _swigPageXML.cvSize2iVector_resize(self, *args)

    def insert(self, *args):
        return _swigPageXML.cvSize2iVector_insert(self, *args)

    def reserve(self, n):
        return _swigPageXML.cvSize2iVector_reserve(self, n)

    def capacity(self):
        return _swigPageXML.cvSize2iVector_capacity(self)
    __swig_destroy__ = _swigPageXML.delete_cvSize2iVector

# Register cvSize2iVector in _swigPageXML:
_swigPageXML.cvSize2iVector_swigregister(cvSize2iVector)
class xmlNodePtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _swigPageXML.xmlNodePtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swigPageXML.xmlNodePtrVector___nonzero__(self)

    def __bool__(self):
        return _swigPageXML.xmlNodePtrVector___bool__(self)

    def __len__(self):
        return _swigPageXML.xmlNodePtrVector___len__(self)

    def __getslice__(self, i, j):
        return _swigPageXML.xmlNodePtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swigPageXML.xmlNodePtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swigPageXML.xmlNodePtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swigPageXML.xmlNodePtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swigPageXML.xmlNodePtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swigPageXML.xmlNodePtrVector___setitem__(self, *args)

    def pop(self):
        return _swigPageXML.xmlNodePtrVector_pop(self)

    def append(self, x):
        return _swigPageXML.xmlNodePtrVector_append(self, x)

    def empty(self):
        return _swigPageXML.xmlNodePtrVector_empty(self)

    def size(self):
        return _swigPageXML.xmlNodePtrVector_size(self)

    def swap(self, v):
        return _swigPageXML.xmlNodePtrVector_swap(self, v)

    def begin(self):
        return _swigPageXML.xmlNodePtrVector_begin(self)

    def end(self):
        return _swigPageXML.xmlNodePtrVector_end(self)

    def rbegin(self):
        return _swigPageXML.xmlNodePtrVector_rbegin(self)

    def rend(self):
        return _swigPageXML.xmlNodePtrVector_rend(self)

    def clear(self):
        return _swigPageXML.xmlNodePtrVector_clear(self)

    def get_allocator(self):
        return _swigPageXML.xmlNodePtrVector_get_allocator(self)

    def pop_back(self):
        return _swigPageXML.xmlNodePtrVector_pop_back(self)

    def erase(self, *args):
        return _swigPageXML.xmlNodePtrVector_erase(self, *args)

    def __init__(self, *args):
        _swigPageXML.xmlNodePtrVector_swiginit(self, _swigPageXML.new_xmlNodePtrVector(*args))

    def push_back(self, x):
        return _swigPageXML.xmlNodePtrVector_push_back(self, x)

    def front(self):
        return _swigPageXML.xmlNodePtrVector_front(self)

    def back(self):
        return _swigPageXML.xmlNodePtrVector_back(self)

    def assign(self, n, x):
        return _swigPageXML.xmlNodePtrVector_assign(self, n, x)

    def resize(self, *args):
        return _swigPageXML.xmlNodePtrVector_resize(self, *args)

    def insert(self, *args):
        return _swigPageXML.xmlNodePtrVector_insert(self, *args)

    def reserve(self, n):
        return _swigPageXML.xmlNodePtrVector_reserve(self, n)

    def capacity(self):
        return _swigPageXML.xmlNodePtrVector_capacity(self)
    __swig_destroy__ = _swigPageXML.delete_xmlNodePtrVector

# Register xmlNodePtrVector in _swigPageXML:
_swigPageXML.xmlNodePtrVector_swigregister(xmlNodePtrVector)
class ptr_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigPageXML.ptr_double_swiginit(self, _swigPageXML.new_ptr_double())
    __swig_destroy__ = _swigPageXML.delete_ptr_double

    def assign(self, value):
        return _swigPageXML.ptr_double_assign(self, value)

    def value(self):
        return _swigPageXML.ptr_double_value(self)

    def cast(self):
        return _swigPageXML.ptr_double_cast(self)

    @staticmethod
    def frompointer(t):
        return _swigPageXML.ptr_double_frompointer(t)

# Register ptr_double in _swigPageXML:
_swigPageXML.ptr_double_swigregister(ptr_double)
class ptr_cvPoint2fVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _swigPageXML.ptr_cvPoint2fVector_swiginit(self, _swigPageXML.new_ptr_cvPoint2fVector())
    __swig_destroy__ = _swigPageXML.delete_ptr_cvPoint2fVector

    def assign(self, value):
        return _swigPageXML.ptr_cvPoint2fVector_assign(self, value)

    def value(self):
        return _swigPageXML.ptr_cvPoint2fVector_value(self)

    def cast(self):
        return _swigPageXML.ptr_cvPoint2fVector_cast(self)

    @staticmethod
    def frompointer(t):
        return _swigPageXML.ptr_cvPoint2fVector_frompointer(t)

# Register ptr_cvPoint2fVector in _swigPageXML:
_swigPageXML.ptr_cvPoint2fVector_swigregister(ptr_cvPoint2fVector)
PAGEXML_INSERT_APPEND = _swigPageXML.PAGEXML_INSERT_APPEND
PAGEXML_INSERT_PREPEND = _swigPageXML.PAGEXML_INSERT_PREPEND
PAGEXML_INSERT_NEXTSIB = _swigPageXML.PAGEXML_INSERT_NEXTSIB
PAGEXML_INSERT_PREVSIB = _swigPageXML.PAGEXML_INSERT_PREVSIB
PAGEXML_READ_DIRECTION_LTR = _swigPageXML.PAGEXML_READ_DIRECTION_LTR
PAGEXML_READ_DIRECTION_RTL = _swigPageXML.PAGEXML_READ_DIRECTION_RTL
PAGEXML_READ_DIRECTION_TTB = _swigPageXML.PAGEXML_READ_DIRECTION_TTB
PAGEXML_READ_DIRECTION_BTT = _swigPageXML.PAGEXML_READ_DIRECTION_BTT
class PageXML(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def version():
        r"""

        Returns the class version.


        Returns:
            char *: 


        """
        return _swigPageXML.PageXML_version()

    @staticmethod
    def printVersions(*args, **kwargs):
        r"""

        Prints the version of the PageXML library and its main dependencies.

        Arguments:
            file (FILE *): Stream where to print the versions.


        """
        return _swigPageXML.PageXML_printVersions(*args, **kwargs)

    @staticmethod
    def setValidationEnabled(val):
        r"""

        Enables/disables schema validation.

        Arguments:
            val (bool): Whether schema validation should be enabled.


        """
        return _swigPageXML.PageXML_setValidationEnabled(val)
    __swig_destroy__ = _swigPageXML.delete_PageXML

    def __init__(self, pagexml_path=None, schema_path=None):
        r"""

        PageXML constructor that receives a file name to load.

        Arguments:
            pagexml_path (const char *): Path to the XML file to read.
            schema_path (const char *): Path to the XSD file to read.


        """
        _swigPageXML.PageXML_swiginit(self, _swigPageXML.new_PageXML(pagexml_path, schema_path))

    def clone(self):
        r"""


        Returns:
            PageXML: 


        """
        return _swigPageXML.PageXML_clone(self)

    def setImagesBaseDir(self, imgBaseDir):
        r"""

        Arguments:
            imgBaseDir (std::string): 


        """
        return _swigPageXML.PageXML_setImagesBaseDir(self, imgBaseDir)

    def setXmlFilePath(self, xmlFilePath):
        r"""

        Arguments:
            xmlFilePath (std::string): 


        """
        return _swigPageXML.PageXML_setXmlFilePath(self, xmlFilePath)

    def getImagesBaseDir(self):
        r"""


        Returns:
            std::string: 


        """
        return _swigPageXML.PageXML_getImagesBaseDir(self)

    def getXmlFilePath(self):
        r"""


        Returns:
            std::string: 


        """
        return _swigPageXML.PageXML_getXmlFilePath(self)

    def loadSchema(self, schema_path):
        r"""

        Loads a schema for xml validation.

        Arguments:
            schema_path (const char *): File name of the XSD file to read.


        """
        return _swigPageXML.PageXML_loadSchema(self, schema_path)

    def isValid(self, xml_to_validate=0):
        r"""

        Validates the currently loaded XML.

        Arguments:
            xml_to_validate (xmlDocPtr): Pointer to the loaded XML to validate.

        Returns:
            bool: Whether XML validates or not.


        """
        return _swigPageXML.PageXML_isValid(self, xml_to_validate)

    def newXml(self, creator, image, imgW=0, imgH=0, pagens=None):
        r"""

        Creates a new Page XML.

        Arguments:
            creator (const char *): Info about tool creating the XML.
            image (const char *): Path to the image file.
            imgW (const int): Width of image.
            imgH (const int): Height of image.
            pagens (const char *): The page xml namespace string to use.

        Returns:
            xmlNodePt: Pointer to the Page node.


        """
        return _swigPageXML.PageXML_newXml(self, creator, image, imgW, imgH, pagens)

    def loadXml(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``void PageXML::loadXml(const char *fname, bool validate=true)``

        Loads a Page XML from a file.

        Arguments:
            fname (const char *): File name of the XML file to read.
            validate (bool): Whether to validate against XSD schema.

        **Signature 2**

        ``void PageXML::loadXml(int fnum, bool prevfree=true, bool validate=true)``

        Loads a Page XML from an input stream.

        Arguments:
            fnum (int): File number from where to read the XML file.
            prevfree (bool): Whether to release resources before loading.
            validate (bool): Whether to validate against XSD schema.


        """
        return _swigPageXML.PageXML_loadXml(self, *args)

    def loadXmlString(self, xml_string, validate=True):
        r"""

        Loads a Page XML from a string.

        Arguments:
            xml_string (const char *): The XML content.
            validate (bool): Whether to validate against XSD schema.


        """
        return _swigPageXML.PageXML_loadXmlString(self, xml_string, validate)

    def simplifyIDs(self):
        r"""

        Simplifies IDs by removing imgbase prefixes and replaces invalid characters with _.


        Returns:
            int: Number of IDs simplified.


        """
        return _swigPageXML.PageXML_simplifyIDs(self)

    def relativizeImageFilename(self, xml_path):
        r"""

        Modifies imageFilename to be a relative path w.r.t. given xml path. Currently just checks prefix directories and removes it.

        Arguments:
            xml_path (const char *): 


        """
        return _swigPageXML.PageXML_relativizeImageFilename(self, xml_path)

    def getUniqueID(self, prefix, suffix=None, count_start=1, count_max=100000):
        r"""

        Gets a unique id.

        Arguments:
            prefix (const char *): Prefix for id.
            suffix (const char *): Suffix for id.
            count_start (int): Counter start to place between prefix and suffix.
            count_max (int): Maximum count to test.

        Returns:
            std::string: The generated unique id.


        """
        return _swigPageXML.PageXML_getUniqueID(self, prefix, suffix, count_start, count_max)

    def relabelChildIDs(self, node, include_self=False):
        r"""

        Relabels IDs of child elements.

        Arguments:
            node (xmlNodePt): Base node.
            include_self (bool): Whether to also relabel the base node.

        Returns:
            int: Number of IDs affected.


        """
        return _swigPageXML.PageXML_relabelChildIDs(self, node, include_self)

    def getImageBases(self):
        r"""

        Gets image bases for all pages in xml.


        Returns:
            std::vector< std::string >: Vector of strings containing the image base names.


        """
        return _swigPageXML.PageXML_getImageBases(self)

    def areIDsUnique(self):
        r"""

        Verifies that all IDs in page are unique.


        Returns:
            bool: 


        """
        return _swigPageXML.PageXML_areIDsUnique(self)

    def getNodeName(self, node, base_node=None):
        r"""

        Gets the name of the given node.

        Arguments:
            node (xmlNodePt): XML node.
            base_node (xmlNodePt): 

        Returns:
            std::string: String with the name.


        """
        return _swigPageXML.PageXML_getNodeName(self, node, base_node)

    @staticmethod
    def stringToPoints(*args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``vector< cv::Point2f > PageXML::stringToPoints(const char *spoints)``

        Parses a string of pairs of coordinates (x1,y1 [x2,y2 ...]) into an array.

        Arguments:
            spoints (const char *): String containing coordinate pairs.

        Returns:
            std::vector< cv::Point2f >: Array of (x,y) coordinates.

        **Signature 2**

        ``static std::vector<cv::Point2f> PageXML::stringToPoints(std::string spoints)``

        Arguments:
            spoints (std::string): 

        Returns:
            std::vector< cv::Point2f >: 


        """
        return _swigPageXML.PageXML_stringToPoints(*args)

    @staticmethod
    def pointsToString(points, rounded=False):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``static std::string PageXML::pointsToString(std::vector< cv::Point2f > points, bool rounded=false)``

        Arguments:
            points (std::vector< cv::Point2f >): 
            rounded (bool): 

        Returns:
            std::string: 

        **Signature 2**

        ``static std::string PageXML::pointsToString(std::vector< cv::Point > points)``

        Arguments:
            points (std::vector< cv::Point >): 

        Returns:
            std::string: 


        """
        return _swigPageXML.PageXML_pointsToString(points, rounded)

    @staticmethod
    def pointsLimits(points, xmin, xmax, ymin, ymax):
        r"""

        Gets the minimum and maximum coordinate values for an array of points.

        Arguments:
            points (std::vector< cv::Point2f > &): The vector of points to find the limits.
            xmin (double &): Minimum x value.
            xmax (double &): Maximum x value.
            ymin (double &): Minimum y value.
            ymax (double &): Maximum y value.


        """
        return _swigPageXML.PageXML_pointsLimits(points, xmin, xmax, ymin, ymax)

    @staticmethod
    def pointsBBox(points):
        r"""

        Generates a vector of 4 points that define the bounding box for a given vector of points.

        Arguments:
            points (std::vector< cv::Point2f >): The vector of points to find the limits.

        Returns:
            std::vector< cv::Point2f >: The 4 points defining the bounding box (top-left clockwise).


        """
        return _swigPageXML.PageXML_pointsBBox(points)

    @staticmethod
    def isBBox(points):
        r"""

        Determines whether a vector of points defines a bounding box.

        Arguments:
            points (const std::vector< cv::Point2f > &): The vector of points to find the limits.

        Returns:
            bool: True if bounding box, otherwise false.


        """
        return _swigPageXML.PageXML_isBBox(points)

    def count(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``int PageXML::count(const char *xpath, xmlNodePt node=NULL)``

        Returns number of matched nodes for a given xpath.

        Arguments:
            xpath (const char *): Selector expression.
            node (xmlNodePt): XML node for context, set to NULL for root node.

        Returns:
            int: Number of matched nodes.

        **Signature 2**

        ``int PageXML::count(std::string xpath, xmlNodePt node=NULL)``

        Arguments:
            xpath (std::string): 
            node (xmlNodePt): 

        Returns:
            int: 


        """
        return _swigPageXML.PageXML_count(self, *args)

    def select(self, *args):
        r"""

        Overloaded function with 3 signatures.

        **Signature 1**

        ``vector< xmlNodePt > PageXML::select(const char *xpath, const xmlNodePt node=NULL)``

        Selects nodes given an xpath.

        Arguments:
            xpath (const char *): Selector expression.
            node (const xmlNodePt): XML node for context, set to NULL for root node.

        Returns:
            std::vector< xmlNodePt >: Vector of matched nodes.

        **Signature 2**

        ``std::vector<xmlNodePt> PageXML::select(std::string xpath, const xmlNodePt node=NULL)``

        Arguments:
            xpath (std::string): 
            node (const xmlNodePt): 

        Returns:
            std::vector< xmlNodePt >: 

        **Signature 3**

        ``std::vector<xmlNodePt> PageXML::select(const char *xpath, const std::vector< xmlNodePt > nodes, bool unique=true)``

        Arguments:
            xpath (const char *): 
            nodes (const std::vector< xmlNodePt >): 
            unique (bool): 

        Returns:
            std::vector< xmlNodePt >: 


        """
        return _swigPageXML.PageXML_select(self, *args)

    def selectNth(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::selectNth(const char *xpath, int num=0, const xmlNodePt node=NULL)``

        Selects the n-th node that matches an xpath.

        Arguments:
            xpath (const char *): Selector expression.
            num (int): Element number (0-based), negative from last.
            node (const xmlNodePt): XML node for context, set to NULL for root node.

        Returns:
            xmlNodePt: Matched node or NULL if nothing matched.

        **Signature 2**

        ``xmlNodePt PageXML::selectNth(std::string xpath, int num=0, const xmlNodePt node=NULL)``

        Arguments:
            xpath (std::string): 
            num (int): 
            node (const xmlNodePt): 

        Returns:
            xmlNodePt: 


        """
        return _swigPageXML.PageXML_selectNth(self, *args)

    def selectByID(self, id, node=None):
        r"""

        Selects an element with a given ID.

        Arguments:
            id (const char *): ID of element to select.
            node (const xmlNodePt): XML node for context, set to NULL for root node.

        Returns:
            xmlNodePt: Matched node or NULL if nothing matched.


        """
        return _swigPageXML.PageXML_selectByID(self, id, node)

    def filter(self, xpath, elems):
        r"""

        Filters a vector of xml nodes given an xpath.

        Arguments:
            xpath (const char *): Filtering expression.
            elems (const std::vector< xmlNodePt >): Vector of nodes to filter.

        Returns:
            std::vector< xmlNodePt >: Vector of filtered nodes.


        """
        return _swigPageXML.PageXML_filter(self, xpath, elems)

    def closest(self, name, node):
        r"""

        Selects closest node of a given name.

        Arguments:
            name (const char *): Name of node to search for closest.
            node (xmlNodePt): Base node to start the search from.

        Returns:
            xmlNodePt: Pointer to the matched closest element or NULL if nothing matched.


        """
        return _swigPageXML.PageXML_closest(self, name, node)

    def parent(self, node):
        r"""

        Returns the parent of a node.

        Arguments:
            node (const xmlNodePt): XML node.

        Returns:
            xmlNodePt: Parent node.


        """
        return _swigPageXML.PageXML_parent(self, node)

    @staticmethod
    def nodeIs(node, name):
        r"""

        Checks if node is of given name.

        Arguments:
            node (xmlNodePt): XML node.
            name (const char *): String with name to match against.

        Returns:
            bool: True if name matches, otherwise false.


        """
        return _swigPageXML.PageXML_nodeIs(node, name)

    def getValue(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``std::string PageXML::getValue(xmlNodePt node)``

        Retrieves a node value.

        Arguments:
            node (xmlNodePt): Node element.

        Returns:
            std::string: String with the node value.

        **Signature 2**

        ``std::string PageXML::getValue(const char *xpath, const xmlNodePt node=NULL)``

        Retrieves a node value.

        Arguments:
            xpath (const char *): Selector for the element to get the value.
            node (const xmlNodePt): XML node for context, set to NULL for root node.

        Returns:
            std::string: String with the node value.


        """
        return _swigPageXML.PageXML_getValue(self, *args)

    def setValue(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``int PageXML::setValue(std::vector< xmlNodePt > nodes, const char *value)``

        Sets a value to the given nodes.

        Arguments:
            nodes (std::vector< xmlNodePt >): Vector of nodes.
            value (const char *): String with the value to set.

        Returns:
            int: Number of elements modified.

        **Signature 2**

        ``void PageXML::setValue(xmlNodePt node, const char *value)``

        Sets a node value.

        Arguments:
            node (xmlNodePt): Node element.
            value (const char *): String with the value to set.


        """
        return _swigPageXML.PageXML_setValue(self, *args)

    def getAttr(self, *args):
        r"""

        Overloaded function with 3 signatures.

        **Signature 1**

        ``string PageXML::getAttr(const xmlNodePt node, const char *name)``

        Gets an attribute value from an xml node.

        Arguments:
            node (const xmlNodePt): XML node.
            name (const char *): Attribute name.

        Returns:
            std::string: The attribute value, empty string if not set.

        **Signature 2**

        ``string PageXML::getAttr(const char *xpath, const char *name)``

        Gets an attribute value for a given xpath.

        Arguments:
            xpath (const char *): Selector for the element to get the attribute.
            name (const char *): Attribute name.

        Returns:
            std::string: The attribute value, empty string if not set.

        **Signature 3**

        ``std::string PageXML::getAttr(const std::string xpath, const std::string name)``

        Arguments:
            xpath (const std::string): 
            name (const std::string): 

        Returns:
            std::string: 


        """
        return _swigPageXML.PageXML_getAttr(self, *args)

    def setAttr(self, *args):
        r"""

        Overloaded function with 4 signatures.

        **Signature 1**

        ``int PageXML::setAttr(std::vector< xmlNodePt > nodes, const char *name, const char *value)``

        Arguments:
            nodes (std::vector< xmlNodePt >): 
            name (const char *): 
            value (const char *): 

        Returns:
            int: 

        **Signature 2**

        ``int PageXML::setAttr(const xmlNodePt node, const char *name, const char *value)``

        Adds or modifies (if already exists) an attribute for a given node.

        Arguments:
            node (const xmlNodePt): Node to set the attribute.
            name (const char *): Attribute name.
            value (const char *): Attribute value.

        Returns:
            int: Number of elements modified.

        **Signature 3**

        ``int PageXML::setAttr(const char *xpath, const char *name, const char *value)``

        Adds or modifies (if already exists) an attribute for a given xpath.

        Arguments:
            xpath (const char *): Selector for the element(s) to set the attribute.
            name (const char *): Attribute name.
            value (const char *): Attribute value.

        Returns:
            int: Number of elements modified.

        **Signature 4**

        ``int PageXML::setAttr(const std::string xpath, const std::string name, const std::string value)``

        Arguments:
            xpath (const std::string): 
            name (const std::string): 
            value (const std::string): 

        Returns:
            int: 


        """
        return _swigPageXML.PageXML_setAttr(self, *args)

    def insertElem(self, elem, node, itype):
        r"""

        Inserts an element relative to a given node.

        Arguments:
            elem (xmlNodePt): Element to insert.
            node (const xmlNodePt): Reference element for insertion.
            itype (PAGEXML_INSERT): Type of insertion.

        Returns:
            xmlNodePt: Pointer to inserted element.


        """
        return _swigPageXML.PageXML_insertElem(self, elem, node, itype)

    def addElem(self, *args):
        r"""

        Overloaded function with 3 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::addElem(const char *name, const char *id, const xmlNodePt node, PAGEXML_INSERT itype=PAGEXML_INSERT_APPEND, bool checkid=false)``

        Creates a new element and adds it relative to a given node.

        Arguments:
            name (const char *): Name of element to create.
            id (const char *): ID attribute for element.
            node (const xmlNodePt): Reference element for insertion.
            itype (PAGEXML_INSERT): Type of insertion.
            checkid (bool): Whether to check if the id already exists.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 2**

        ``xmlNodePt PageXML::addElem(const char *name, const char *id, const char *xpath, PAGEXML_INSERT itype=PAGEXML_INSERT_APPEND, bool checkid=false)``

        Creates a new element and adds it relative to a given xpath.

        Arguments:
            name (const char *): Name of element to create.
            id (const char *): ID attribute for element.
            xpath (const char *): Selector for insertion.
            itype (PAGEXML_INSERT): Type of insertion.
            checkid (bool): Whether to check if the id already exists.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 3**

        ``xmlNodePt PageXML::addElem(const std::string name, const std::string id, const std::string xpath, PAGEXML_INSERT itype=PAGEXML_INSERT_APPEND, bool checkid=false)``

        Arguments:
            name (const std::string): 
            id (const std::string): 
            xpath (const std::string): 
            itype (PAGEXML_INSERT): 
            checkid (bool): 

        Returns:
            xmlNodePt: 


        """
        return _swigPageXML.PageXML_addElem(self, *args)

    def rmElem(self, node):
        r"""

        Removes the given element.

        Arguments:
            node (const xmlNodePt): Element.


        """
        return _swigPageXML.PageXML_rmElem(self, node)

    def rmElems(self, *args):
        r"""

        Overloaded function with 3 signatures.

        **Signature 1**

        ``int PageXML::rmElems(const std::vector< xmlNodePt > &nodes)``

        Arguments:
            nodes (const std::vector< xmlNodePt > &): 

        Returns:
            int: 

        **Signature 2**

        ``int PageXML::rmElems(const char *xpath, xmlNodePt node=NULL)``

        Remove the elements that match a given xpath.

        Arguments:
            xpath (const char *): Selector for elements to remove.
            node (xmlNodePt): Base node for element selection.

        Returns:
            int: Number of elements removed.

        **Signature 3**

        ``int PageXML::rmElems(const std::string xpath, xmlNodePt node=NULL)``

        Arguments:
            xpath (const std::string): 
            node (xmlNodePt): 

        Returns:
            int: 


        """
        return _swigPageXML.PageXML_rmElems(self, *args)

    def copyElem(self, elem, node, itype=PAGEXML_INSERT_APPEND):
        r"""

        Clone an element and add it relative to a given node.

        Arguments:
            elem (xmlNodePt): Element to clone.
            node (const xmlNodePt): Reference element for insertion.
            itype (PAGEXML_INSERT): Type of insertion.

        Returns:
            xmlNodePt: Pointer to cloned element.


        """
        return _swigPageXML.PageXML_copyElem(self, elem, node, itype)

    def moveElem(self, elem, node, itype=PAGEXML_INSERT_APPEND, bugimpl=False):
        r"""

        Unlink an element and add it relative to a given node.

        Arguments:
            elem (xmlNodePt): Element to move.
            node (const xmlNodePt): Reference element for insertion.
            itype (PAGEXML_INSERT): Type of insertion.
            bugimpl (bool): 

        Returns:
            xmlNodePt: Pointer to moved element.


        """
        return _swigPageXML.PageXML_moveElem(self, elem, node, itype, bugimpl)

    def moveElems(self, elems, node, itype=PAGEXML_INSERT_APPEND, bugimpl=False):
        r"""

        Unlink elements and add them relative to a given node.

        Arguments:
            elems (const std::vector< xmlNodePt > &): Elements to move.
            node (const xmlNodePt): Reference element for insertion.
            itype (PAGEXML_INSERT): Type of insertion.
            bugimpl (bool): 

        Returns:
            int: Pointer to moved element.


        """
        return _swigPageXML.PageXML_moveElems(self, elems, node, itype, bugimpl)

    def setRotation(self, elem, rotation):
        r"""

        Sets the rotation angle to a TextRegion node.

        Arguments:
            elem (const xmlNodePt): 
            rotation (const float): Rotation angle to set.


        """
        return _swigPageXML.PageXML_setRotation(self, elem, rotation)

    def setReadingDirection(self, elem, direction):
        r"""

        Sets the reading direction to a TextRegion node.

        Arguments:
            elem (const xmlNodePt): 
            direction (PAGEXML_READ_DIRECTION): Direction to set.


        """
        return _swigPageXML.PageXML_setReadingDirection(self, elem, direction)

    def getDominantBaselinesOrientation(self, elems):
        r"""

        Gets the dominant orientation angle for a set of baselines.

        Arguments:
            elems (std::vector< xmlNodePt >): Nodes of the TextLine elements.

        Returns:
            double: The dominant orientation angle in radians, NaN if unset.


        """
        return _swigPageXML.PageXML_getDominantBaselinesOrientation(self, elems)

    def getBaselineOrientation(self, elem):
        r"""

        Gets the baseline orientation angle (weighted average over polyline segments) of a given text line.

        Arguments:
            elem (xmlNodePt): Node of the TextLine element.

        Returns:
            double: The orientation angle in radians, NaN if unset.


        """
        return _swigPageXML.PageXML_getBaselineOrientation(self, elem)

    def getPolylineOrientation(self, points):
        r"""

        Gets the baseline orientation angle (weighted average over polyline segments) in radians of a given baseline.

        Arguments:
            points (std::vector< cv::Point2f >): Baseline points.

        Returns:
            double: The orientation angle in radians, NaN if unset.


        """
        return _swigPageXML.PageXML_getPolylineOrientation(self, points)

    def getPolylineLength(self, points):
        r"""

        Gets the baseline length.

        Arguments:
            points (std::vector< cv::Point2f >): Baseline points.

        Returns:
            double: The orientation angle in radians, NaN if unset.


        """
        return _swigPageXML.PageXML_getPolylineLength(self, points)

    def getRotation(self, elem):
        r"""

        Retrieves the rotation angle for a given TextLine or TextRegion node.

        Arguments:
            elem (const xmlNodePt): Node of the TextLine or TextRegion element.

        Returns:
            double: The rotation angle in degrees, 0 if unset.


        """
        return _swigPageXML.PageXML_getRotation(self, elem)

    def getReadingDirection(self, elem):
        r"""

        Retrieves the reading direction for a given TextLine or TextRegion node.

        Arguments:
            elem (const xmlNodePt): Node of the TextLine or TextRegion element.

        Returns:
            int: The reading direction, PAGEXML_READ_DIRECTION_LTR if unset.


        """
        return _swigPageXML.PageXML_getReadingDirection(self, elem)

    def getXheight(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``float PageXML::getXheight(const xmlNodePt node)``

        Retrieves the x-height for a given TextLine node.

        Arguments:
            node (const xmlNodePt): Node of the TextLine element.

        Returns:
            float: x-height>0 on success, -1 if unset.

        **Signature 2**

        ``float PageXML::getXheight(const char *id)``

        Retrieves the x-height for a given TextLine id.

        Arguments:
            id (const char *): Identifier of the TextLine.

        Returns:
            float: x-height>0 on success, -1 if unset.


        """
        return _swigPageXML.PageXML_getXheight(self, *args)

    def getFpgram(self, node):
        r"""

        Retrieves the features parallelogram (Property[@key='fpgram']/@value) for a given node.

        Arguments:
            node (const xmlNodePt): Base node.

        Returns:
            std::vector< cv::Point2f >: Vector of points.


        """
        return _swigPageXML.PageXML_getFpgram(self, node)

    def getPoints(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``vector< cv::Point2f > PageXML::getPoints(const xmlNodePt node, const char *xpath="_:Coords")``

        Retrieves and parses the Coords/@points for a given base node.

        Arguments:
            node (const xmlNodePt): Base node.
            xpath (const char *): Relative selector for the points.

        Returns:
            std::vector< cv::Point2f >: Vector of points.

        **Signature 2**

        ``std::vector< std::vector< cv::Point2f > > PageXML::getPoints(const std::vector< xmlNodePt > nodes, const char *xpath="_:Coords")``

        Retrieves and parses the Coords/@points for a given list of base nodes.

        Arguments:
            nodes (const std::vector< xmlNodePt >): Base nodes.
            xpath (const char *): Relative selector for the points.

        Returns:
            std::vector< std::vector< cv::Point2f > >: Vector of vectors of points.


        """
        return _swigPageXML.PageXML_getPoints(self, *args)

    def getTextEquiv(self, *args, **kwargs):
        r"""

        Retrieves the concatenated TextEquivs for a given root node and xpath.

        Arguments:
            node (xmlNodePt): Root node element.
            xpath (const char *): Relative xpath to select the TextEquiv elements.
            type (const char *): Type attribute. Set to empty string for TextEquivs without a type.
            separator (const char *): String to add between TextEquivs.

        Returns:
            std::string: String with the concatenated TextEquivs.


        """
        return _swigPageXML.PageXML_getTextEquiv(self, *args, **kwargs)

    def processStart(self, tool, ref=None):
        r"""

        Starts a process in the Page XML.

        Arguments:
            tool (const char *): Short description of tool that started the process.
            ref (const char *): Short description of execution reference.


        """
        return _swigPageXML.PageXML_processStart(self, tool, ref)

    def processEnd(self):
        r"""

        Ends the running process in the Page XML.



        """
        return _swigPageXML.PageXML_processEnd(self)

    def updateLastChange(self):
        r"""

        Updates the last change time stamp.



        """
        return _swigPageXML.PageXML_updateLastChange(self)

    def getPropertyValue(self, node, key):
        r"""

        Retrieves a Property value.

        Arguments:
            node (xmlNodePt): Node element.
            key (const char *): The key for the Property.

        Returns:
            std::string: String with the property value.


        """
        return _swigPageXML.PageXML_getPropertyValue(self, node, key)

    def setProperty(self, *args):
        r"""

        Overloaded function with 4 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::setProperty(xmlNodePt node, const char *key, const char *val=NULL, const double *_conf=NULL)``

        Sets a Property to a given node.

        Arguments:
            node (xmlNodePt): The node of element to set the Property.
            key (const char *): The key for the Property.
            val (const char *): The optional value for the Property.
            _conf (const double *): Pointer to confidence value, NULL for no confidence.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 2**

        ``xmlNodePt PageXML::setProperty(xmlNodePt node, const char *key, const char *val, const double conf)``

        Sets a Property to a given node.

        Arguments:
            node (xmlNodePt): The node of element to set the Property.
            key (const char *): The key for the Property.
            val (const char *): The optional value for the Property.
            conf (const double): Confidence value.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 3**

        ``xmlNodePt PageXML::setProperty(xmlNodePt node, const char *key, const double val, const double *_conf=NULL)``

        Sets a Property to a given node.

        Arguments:
            node (xmlNodePt): The node of element to set the Property.
            key (const char *): The key for the Property.
            val (const double): Numeric value for the Property.
            _conf (const double *): Pointer to confidence value, NULL for no confidence.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 4**

        ``xmlNodePt PageXML::setProperty(xmlNodePt node, const char *key, const double val, const double conf)``

        Sets a Property to a given node.

        Arguments:
            node (xmlNodePt): The node of element to set the Property.
            key (const char *): The key for the Property.
            val (const double): The optional value for the Property.
            conf (const double): Confidence value.

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_setProperty(self, *args)

    def setTextEquiv(self, *args):
        r"""

        Overloaded function with 4 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::setTextEquiv(xmlNodePt node, const char *text, const double *_conf=NULL, const char *type=NULL)``

        Adds or modifies (if already exists) the TextEquiv for a given node.

        Arguments:
            node (xmlNodePt): The node of element to set the TextEquiv.
            text (const char *): The text string.
            _conf (const double *): Pointer to confidence value, NULL for no confidence.
            type (const char *): Type attribute.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 2**

        ``xmlNodePt PageXML::setTextEquiv(xmlNodePt node, const char *text, const double conf, const char *type=NULL)``

        Adds or modifies (if already exists) the TextEquiv for a given node.

        Arguments:
            node (xmlNodePt): The node of element to set the TextEquiv.
            text (const char *): The text string.
            conf (const double): Confidence value.
            type (const char *): Type attribute.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 3**

        ``xmlNodePt PageXML::setTextEquiv(const char *xpath, const char *text, const double *_conf=NULL, const char *type=NULL)``

        Adds or modifies (if already exists) the TextEquiv for a given xpath.

        Arguments:
            xpath (const char *): Selector for element to set the TextEquiv.
            text (const char *): The text string.
            _conf (const double *): Pointer to confidence value, NULL for no confidence.
            type (const char *): Type attribute.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 4**

        ``xmlNodePt PageXML::setTextEquiv(const char *xpath, const char *text, const double conf, const char *type=NULL)``

        Adds or modifies (if already exists) the TextEquiv for a given xpath.

        Arguments:
            xpath (const char *): Selector for element to set the TextEquiv.
            text (const char *): The text string.
            conf (const double): Confidence value.
            type (const char *): Type attribute.

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_setTextEquiv(self, *args)

    def setCoords(self, *args):
        r"""

        Overloaded function with 6 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::setCoords(xmlNodePt node, const std::vector< cv::Point2f > &points, const double *_conf=NULL)``

        Arguments:
            node (xmlNodePt): 
            points (const std::vector< cv::Point2f > &): 
            _conf (const double *): 

        Returns:
            xmlNodePt: 

        **Signature 2**

        ``xmlNodePt PageXML::setCoords(xmlNodePt node, const std::vector< cv::Point2f > &points, const double conf)``

        Arguments:
            node (xmlNodePt): 
            points (const std::vector< cv::Point2f > &): 
            conf (const double): 

        Returns:
            xmlNodePt: 

        **Signature 3**

        ``xmlNodePt PageXML::setCoords(xmlNodePt node, const std::vector< cv::Point > &points, const double *_conf=NULL)``

        Arguments:
            node (xmlNodePt): 
            points (const std::vector< cv::Point > &): 
            _conf (const double *): 

        Returns:
            xmlNodePt: 

        **Signature 4**

        ``xmlNodePt PageXML::setCoords(xmlNodePt node, const std::vector< cv::Point > &points, const double conf)``

        Arguments:
            node (xmlNodePt): 
            points (const std::vector< cv::Point > &): 
            conf (const double): 

        Returns:
            xmlNodePt: 

        **Signature 5**

        ``xmlNodePt PageXML::setCoords(const char *xpath, const std::vector< cv::Point2f > &points, const double *_conf=NULL)``

        Arguments:
            xpath (const char *): 
            points (const std::vector< cv::Point2f > &): 
            _conf (const double *): 

        Returns:
            xmlNodePt: 

        **Signature 6**

        ``xmlNodePt PageXML::setCoords(const char *xpath, const std::vector< cv::Point2f > &points, const double conf)``

        Arguments:
            xpath (const char *): 
            points (const std::vector< cv::Point2f > &): 
            conf (const double): 

        Returns:
            xmlNodePt: 


        """
        return _swigPageXML.PageXML_setCoords(self, *args)

    def setCoordsBBox(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::setCoordsBBox(xmlNodePt node, double xmin, double ymin, double width, double height, const double *_conf=NULL, bool subone=true)``

        Adds or modifies (if already exists) the Coords as a bounding box for a given node.

        Arguments:
            node (xmlNodePt): The node of element to set the Coords.
            xmin (double): Minimum x value of bounding box.
            ymin (double): Minimum y value of bounding box.
            width (double): Width of bounding box.
            height (double): Height of bounding box.
            _conf (const double *): Pointer to confidence value, NULL for no confidence.
            subone (bool): Whether to subtract 1 when computing xmax and ymax (discrete compatibility).

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 2**

        ``xmlNodePt PageXML::setCoordsBBox(xmlNodePt node, double xmin, double ymin, double width, double height, const double conf, bool subone=true)``

        Adds or modifies (if already exists) the Coords as a bounding box for a given node.

        Arguments:
            node (xmlNodePt): The node of element to set the Coords.
            xmin (double): Minimum x value of bounding box.
            ymin (double): Minimum y value of bounding box.
            width (double): Width of bounding box.
            height (double): Height of bounding box.
            conf (const double): Confidence value.
            subone (bool): Whether to subtract 1 when computing xmax and ymax (discrete compatibility).

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_setCoordsBBox(self, *args)

    def setBaseline(self, *args):
        r"""

        Overloaded function with 6 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::setBaseline(xmlNodePt node, const std::vector< cv::Point2f > &points, const double *_conf=NULL)``

        Arguments:
            node (xmlNodePt): 
            points (const std::vector< cv::Point2f > &): 
            _conf (const double *): 

        Returns:
            xmlNodePt: 

        **Signature 2**

        ``xmlNodePt PageXML::setBaseline(xmlNodePt node, const std::vector< cv::Point2f > &points, const double conf)``

        Arguments:
            node (xmlNodePt): 
            points (const std::vector< cv::Point2f > &): 
            conf (const double): 

        Returns:
            xmlNodePt: 

        **Signature 3**

        ``xmlNodePt PageXML::setBaseline(const char *xpath, const std::vector< cv::Point2f > &points, const double *_conf=NULL)``

        Arguments:
            xpath (const char *): 
            points (const std::vector< cv::Point2f > &): 
            _conf (const double *): 

        Returns:
            xmlNodePt: 

        **Signature 4**

        ``xmlNodePt PageXML::setBaseline(const char *xpath, const std::vector< cv::Point2f > &points, const double conf)``

        Arguments:
            xpath (const char *): 
            points (const std::vector< cv::Point2f > &): 
            conf (const double): 

        Returns:
            xmlNodePt: 

        **Signature 5**

        ``xmlNodePt PageXML::setBaseline(xmlNodePt node, double x1, double y1, double x2, double y2, const double *_conf=NULL)``

        Adds or modifies (if already exists) a two point Baseline for a given node.

        Arguments:
            node (xmlNodePt): The node of element to set the Baseline.
            x1 (double): x value of first point.
            y1 (double): y value of first point.
            x2 (double): x value of second point.
            y2 (double): y value of second point.
            _conf (const double *): Pointer to confidence value, NULL for no confidence.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 6**

        ``xmlNodePt PageXML::setBaseline(xmlNodePt node, double x1, double y1, double x2, double y2, const double conf)``

        Adds or modifies (if already exists) a two point Baseline for a given node.

        Arguments:
            node (xmlNodePt): The node of element to set the Baseline.
            x1 (double): x value of first point.
            y1 (double): y value of first point.
            x2 (double): x value of second point.
            y2 (double): y value of second point.
            conf (const double): Confidence value.

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_setBaseline(self, *args)

    def intersection(self, line1_point1, line1_point2, line2_point1, line2_point2, _ipoint):
        r"""

        Finds the intersection point between two lines defined by pairs of points.

        Arguments:
            line1_point1 (cv::Point2f): First point of line 1.
            line1_point2 (cv::Point2f): Second point of line 1.
            line2_point1 (cv::Point2f): First point of line 2.
            line2_point2 (cv::Point2f): Second point of line 2.
            _ipoint (cv::Point2f &): 

        Returns:
            bool: False if no intersection otherwise true.


        """
        return _swigPageXML.PageXML_intersection(self, line1_point1, line1_point2, line2_point1, line2_point2, _ipoint)

    def isPolystripe(self, coords, baseline, height=None, offset=None):
        r"""

        Checks whether Coords is a poly-stripe for its corresponding baseline.

        Arguments:
            coords (std::vector< cv::Point2f >): Coords points.
            baseline (std::vector< cv::Point2f >): Baseline points.
            height (double *): 
            offset (double *): The offset of the poly-stripe (>=0 && <= 0.5).

        Returns:
            bool: Pointer to created element.


        """
        return _swigPageXML.PageXML_isPolystripe(self, coords, baseline, height, offset)

    def setPolystripe(self, node, height, offset=0.25, offset_check=True):
        r"""

        Sets the Coords of a TextLine as a poly-stripe of the baseline.

        Arguments:
            node (xmlNodePt): The node of element to set the Coords.
            height (double): The height of the poly-stripe in pixels (>0).
            offset (double): The offset of the poly-stripe (>=0 && <= 0.5).
            offset_check (bool): Whether to check if offset is valid.

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_setPolystripe(self, node, height, offset, offset_check)

    def getPageNumber(self, node):
        r"""

        Gets the page number for the given node.

        Arguments:
            node (xmlNodePt): 

        Returns:
            int: 


        """
        return _swigPageXML.PageXML_getPageNumber(self, node)

    def setPageImageOrientation(self, *args):
        r"""

        Overloaded function with 4 signatures.

        **Signature 1**

        ``void PageXML::setPageImageOrientation(xmlNodePt node, int angle, const double *_conf=NULL)``

        Sets the image orientation for the given Page node.

        Arguments:
            node (xmlNodePt): The page node.
            angle (int): The orientation angle in degrees {0,90,180,-90}.
            _conf (const double *): Pointer to confidence value, NULL for no confidence.

        **Signature 2**

        ``void PageXML::setPageImageOrientation(xmlNodePt node, int angle, const double conf)``

        Sets the image orientation for the given Page node.

        Arguments:
            node (xmlNodePt): The page node.
            angle (int): The orientation angle in degrees {0,90,180,-90}.
            conf (const double): Confidence value.

        **Signature 3**

        ``void PageXML::setPageImageOrientation(int pagenum, int angle, const double *_conf=NULL)``

        Sets the image orientation for the given Page number.

        Arguments:
            pagenum (int): The page number (0-based).
            angle (int): The orientation angle in degrees {0,90,180,-90}.
            _conf (const double *): Pointer to confidence value, NULL for no confidence.

        **Signature 4**

        ``void PageXML::setPageImageOrientation(int pagenum, int angle, const double conf)``

        Sets the image orientation for the given Page number.

        Arguments:
            pagenum (int): The page number (0-based).
            angle (int): The orientation angle in degrees {0,90,180,-90}.
            conf (const double): Confidence value.


        """
        return _swigPageXML.PageXML_setPageImageOrientation(self, *args)

    def getPageImageOrientation(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``int PageXML::getPageImageOrientation(xmlNodePt node)``

        Gets the image orientation for the given node.

        Arguments:
            node (xmlNodePt): A node to get its image orientation.

        Returns:
            int: Orientation in degrees.

        **Signature 2**

        ``int PageXML::getPageImageOrientation(int pagenum)``

        Gets the image orientation for the given Page number.

        Arguments:
            pagenum (int): The page number (0-based).

        Returns:
            int: Orientation in degrees.


        """
        return _swigPageXML.PageXML_getPageImageOrientation(self, *args)

    def getPageWidth(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``unsigned int PageXML::getPageWidth(xmlNodePt node)``

        Gets the width of a page (might be different to image width due to the image orientation).

        Arguments:
            node (xmlNodePt): A node to get its page width.

        Returns:
            unsigned int: The page width.

        **Signature 2**

        ``unsigned int PageXML::getPageWidth(int pagenum)``

        Gets the width of a page (might be different to image width due to the image orientation).

        Arguments:
            pagenum (int): The page number (0-based).

        Returns:
            unsigned int: The page width.


        """
        return _swigPageXML.PageXML_getPageWidth(self, *args)

    def getPageHeight(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``unsigned int PageXML::getPageHeight(xmlNodePt node)``

        Gets the height of a page (might be different to image width due to the image orientation).

        Arguments:
            node (xmlNodePt): A node to get its page height.

        Returns:
            unsigned int: The page height.

        **Signature 2**

        ``unsigned int PageXML::getPageHeight(int pagenum)``

        Gets the height of a page (might be different to image width due to the image orientation).

        Arguments:
            pagenum (int): The page number (0-based).

        Returns:
            unsigned int: The page height.


        """
        return _swigPageXML.PageXML_getPageHeight(self, *args)

    def setPageWidth(self, node, width):
        r"""

        Sets the width of a page (actually sets imageWidth accounting for image orientation).

        Arguments:
            node (xmlNodePt): A node to set its page width.
            width (int): The width to set.


        """
        return _swigPageXML.PageXML_setPageWidth(self, node, width)

    def setPageHeight(self, node, height):
        r"""

        Sets the height of a page (actually sets imageHeight accounting for image orientation).

        Arguments:
            node (xmlNodePt): A node to set its page height.
            height (int): The height to set.


        """
        return _swigPageXML.PageXML_setPageHeight(self, node, height)

    def getPagesSize(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``std::vector< cv::Size2i > PageXML::getPagesSize(std::vector< xmlNodePt > pages)``

        Retrieves pages size.

        Arguments:
            pages (std::vector< xmlNodePt >): Page nodes.

        Returns:
            std::vector< cv::Size2i >: Vector of page sizes.

        **Signature 2**

        ``std::vector< cv::Size2i > PageXML::getPagesSize(const char *xpath="//_:Page")``

        Retrieves pages size.

        Arguments:
            xpath (const char *): Selector for Page nodes.

        Returns:
            std::vector< cv::Size2i >: Vector of page sizes.


        """
        return _swigPageXML.PageXML_getPagesSize(self, *args)

    def rotatePage(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``int PageXML::rotatePage(int angle, xmlNodePt page, bool update_image_orientation, const double conf)``

        Rotates a page.

        Arguments:
            angle (int): Angle to rotate the coords in degrees {0,90,180,-90} counterclockwise.
            page (xmlNodePt): The Page node.
            update_image_orientation (bool): Whether to update the ImageOrientation element.
            conf (const double): Confidence value.

        Returns:
            int: Number of elements modified.

        **Signature 2**

        ``int PageXML::rotatePage(int angle, xmlNodePt page, bool update_image_orientation=true, const double *_conf=NULL)``

        Rotates a page.

        Arguments:
            angle (int): Angle to rotate the coords in degrees {0,90,180,-90} counterclockwise.
            page (xmlNodePt): The Page node.
            update_image_orientation (bool): Whether to update the ImageOrientation element.
            _conf (const double *): Pointer to confidence value, NULL for no confidence.

        Returns:
            int: Number of elements modified.


        """
        return _swigPageXML.PageXML_rotatePage(self, *args)

    def resize(self, *args):
        r"""

        Overloaded function with 4 signatures.

        **Signature 1**

        ``int PageXML::resize(std::vector< cv::Size2i > sizes, std::vector< xmlNodePt > pages, bool check_aspect_ratio=true)``

        Resizes pages and all respective coordinates.

        Arguments:
            sizes (std::vector< cv::Size2i >): Page sizes to resize to.
            pages (std::vector< xmlNodePt >): Page nodes.
            check_aspect_ratio (bool): Whether to check that the aspect ratio is properly preserved.

        Returns:
            int: Number of pages+points attributes modified.

        **Signature 2**

        ``int PageXML::resize(std::vector< cv::Size2i > sizes, const char *xpath="//_:Page", bool check_aspect_ratio=true)``

        Resizes pages and all respective coordinates.

        Arguments:
            sizes (std::vector< cv::Size2i >): Page sizes to resize to.
            xpath (const char *): Selector for Page nodes.
            check_aspect_ratio (bool): Whether to check that the aspect ratio is properly preserved.

        Returns:
            int: Number of pages+points attributes modified.

        **Signature 3**

        ``int PageXML::resize(cv::Size2i size, xmlNodePt page, bool check_aspect_ratio=true)``

        Resizes a page and all respective coordinates.

        Arguments:
            size (cv::Size2i): Page size to resize to.
            page (xmlNodePt): Page node.
            check_aspect_ratio (bool): Whether to check that the aspect ratio is properly preserved.

        Returns:
            int: Number of pages+points attributes modified.

        **Signature 4**

        ``int PageXML::resize(double fact, const char *xpath="//_:Page")``

        Resizes a page and all respective coordinates.

        Arguments:
            fact (double): 
            xpath (const char *): Selector for Page nodes.

        Returns:
            int: Number of pages+points attributes modified.


        """
        return _swigPageXML.PageXML_resize(self, *args)

    def setPageImageFilename(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``void PageXML::setPageImageFilename(xmlNodePt node, const char *image)``

        Sets the imageFilename of a page.

        Arguments:
            node (xmlNodePt): 
            image (const char *): 

        **Signature 2**

        ``void PageXML::setPageImageFilename(int pagenum, const char *image)``

        Arguments:
            pagenum (int): 
            image (const char *): 


        """
        return _swigPageXML.PageXML_setPageImageFilename(self, *args)

    def getPageImageFilename(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``string PageXML::getPageImageFilename(xmlNodePt node)``

        Returns the imageFilename of a page.

        Arguments:
            node (xmlNodePt): 

        Returns:
            std::string: 

        **Signature 2**

        ``string PageXML::getPageImageFilename(int pagenum)``

        Arguments:
            pagenum (int): 

        Returns:
            std::string: 


        """
        return _swigPageXML.PageXML_getPageImageFilename(self, *args)

    def addGlyph(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::addGlyph(xmlNodePt node, const char *id=NULL, const char *before_id=NULL)``

        Adds a Glyph to a given node.

        Arguments:
            node (xmlNodePt): The node of element to add the Glyph.
            id (const char *): ID for Glyph, if NULL it is selected automatically.
            before_id (const char *): If !=NULL inserts it before the Glyph with this ID.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 2**

        ``xmlNodePt PageXML::addGlyph(const char *xpath, const char *id=NULL, const char *before_id=NULL)``

        Adds a Glyph to a given xpath.

        Arguments:
            xpath (const char *): Selector for element to set the Glyph.
            id (const char *): ID for Glyph, if NULL it is selected automatically.
            before_id (const char *): If !=NULL inserts it before the Glyph with this ID.

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_addGlyph(self, *args)

    def addWord(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::addWord(xmlNodePt node, const char *id=NULL, const char *before_id=NULL)``

        Adds a Word to a given node.

        Arguments:
            node (xmlNodePt): The node of element to add the Word.
            id (const char *): ID for Word, if NULL it is selected automatically.
            before_id (const char *): If !=NULL inserts it before the Word with this ID.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 2**

        ``xmlNodePt PageXML::addWord(const char *xpath, const char *id=NULL, const char *before_id=NULL)``

        Adds a Word to a given xpath.

        Arguments:
            xpath (const char *): Selector for element to set the Word.
            id (const char *): ID for Word, if NULL it is selected automatically.
            before_id (const char *): If !=NULL inserts it before the Word with this ID.

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_addWord(self, *args)

    def addTextLine(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::addTextLine(xmlNodePt node, const char *id=NULL, const char *before_id=NULL)``

        Adds a TextLine to a given node.

        Arguments:
            node (xmlNodePt): The node of element to add the TextLine.
            id (const char *): ID for TextLine, if NULL it is selected automatically.
            before_id (const char *): If !=NULL inserts it before the TextLine with this ID.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 2**

        ``xmlNodePt PageXML::addTextLine(const char *xpath, const char *id=NULL, const char *before_id=NULL)``

        Adds a TextLine to a given xpath.

        Arguments:
            xpath (const char *): Selector for element to add the TextLine.
            id (const char *): ID for TextLine, if NULL it is selected automatically.
            before_id (const char *): If !=NULL inserts it before the TextLine with this ID.

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_addTextLine(self, *args)

    def addTextRegion(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::addTextRegion(xmlNodePt node, const char *id=NULL, const char *before_id=NULL, bool prepend=false)``

        Adds a TextRegion to a given node.

        Arguments:
            node (xmlNodePt): The node of element to add the TextRegion.
            id (const char *): ID for TextRegion, if NULL it is selected automatically.
            before_id (const char *): If !=NULL inserts it before the TextRegion with this ID.
            prepend (bool): Whether to add element before all other TextRegions.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 2**

        ``xmlNodePt PageXML::addTextRegion(const char *xpath, const char *id=NULL, const char *before_id=NULL, bool prepend=false)``

        Adds new TextRegion to a given xpath.

        Arguments:
            xpath (const char *): Selector for element to add the TextRegion.
            id (const char *): ID for TextRegion, if NULL it is selected automatically.
            before_id (const char *): If !=NULL inserts it before the TextRegion with this ID.
            prepend (bool): 

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_addTextRegion(self, *args)

    def addTableRegion(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::addTableRegion(xmlNodePt node, const char *id=NULL, const char *before_id=NULL, bool prepend=false)``

        Adds a TableRegion to a given node.

        Arguments:
            node (xmlNodePt): The node of element to add the TableRegion.
            id (const char *): ID for TableRegion, if NULL it is selected automatically.
            before_id (const char *): If !=NULL inserts it before the TableRegion with this ID.
            prepend (bool): Whether to add element before all other TableRegions.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 2**

        ``xmlNodePt PageXML::addTableRegion(const char *xpath, const char *id=NULL, const char *before_id=NULL, bool prepend=false)``

        Adds new TableRegion to a given xpath.

        Arguments:
            xpath (const char *): Selector for element to add the TableRegion.
            id (const char *): ID for TableRegion, if NULL it is selected automatically.
            before_id (const char *): If !=NULL inserts it before the TableRegion with this ID.
            prepend (bool): 

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_addTableRegion(self, *args)

    def addPage(self, *args):
        r"""

        Overloaded function with 2 signatures.

        **Signature 1**

        ``xmlNodePt PageXML::addPage(const char *image, const int imgW, const int imgH, const char *id=NULL, xmlNodePt before_node=NULL)``

        Adds a Page to the PcGts node.

        Arguments:
            image (const char *): Path to the image file.
            imgW (const int): Width of image.
            imgH (const int): Height of image.
            id (const char *): ID for Page, if NULL it is left unset.
            before_node (xmlNodePt): If !=NULL inserts it before the provided Page node.

        Returns:
            xmlNodePt: Pointer to created element.

        **Signature 2**

        ``xmlNodePt PageXML::addPage(std::string image, const int imgW, const int imgH, const char *id=NULL, xmlNodePt before_node=NULL)``

        Adds a Page to the PcGts node.

        Arguments:
            image (std::string): Path to the image file.
            imgW (const int): Width of image.
            imgH (const int): Height of image.
            id (const char *): ID for Page, if NULL it is left unset.
            before_node (xmlNodePt): If !=NULL inserts it before the provided Page node.

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_addPage(self, *args)

    def write(self, *args, **kwargs):
        r"""

        Writes the current state of the XML to a file using utf-8 encoding.

        Arguments:
            fname (const char *): File name of where the XML file will be written.
            indent (bool): Whether to indent the XML.
            validate (bool): Whether the Page XML should be validated before writing.

        Returns:
            int: Number of bytes written.


        """
        return _swigPageXML.PageXML_write(self, *args, **kwargs)

    def toString(self, indent=False, validate=True):
        r"""

        Creates a string representation of the Page XML.

        Arguments:
            indent (bool): Whether to indent the XML.
            validate (bool): Whether the Page XML should be validated before writing.

        Returns:
            std::string: The Page XML string.


        """
        return _swigPageXML.PageXML_toString(self, indent, validate)

    def addGroup(self, *args, **kwargs):
        r"""

        Adds a Group to the PcGts node.

        Arguments:
            id (const char *): ID for Page, if NULL it is selected automatically.
            elems (std::vector< xmlNodePt >): Elements to add (must have id attributes).
            before_node (xmlNodePt): If !=NULL inserts it before the provided Group node.

        Returns:
            xmlNodePt: Pointer to created element.


        """
        return _swigPageXML.PageXML_addGroup(self, *args, **kwargs)

    def addToGroup(self, group, elems):
        r"""

        Adds elements to a Group.

        Arguments:
            group (xmlNodePt): Pointer to group node.
            elems (std::vector< xmlNodePt >): Elements to add (must have id attributes).

        Returns:
            int: Number of elements added.


        """
        return _swigPageXML.PageXML_addToGroup(self, group, elems)

    def selectGroupElements(self, group, recurse=True):
        r"""

        Selects all elements referenced by a Group.

        Arguments:
            group (xmlNodePt): Pointer to group node.
            recurse (bool): Whether to recurse into group members which are groups.

        Returns:
            std::vector< xmlNodePt >: Vector of group element nodes.


        """
        return _swigPageXML.PageXML_selectGroupElements(self, group, recurse)

    def getDocPtr(self):
        r"""

        Returns the XML document pointer.


        Returns:
            xmlDocPtr: 


        """
        return _swigPageXML.PageXML_getDocPtr(self)

# Register PageXML in _swigPageXML:
_swigPageXML.PageXML_swigregister(PageXML)

def mktemp(tempbase, tempname):
    return _swigPageXML.mktemp(tempbase, tempname)

def gsGetPdfPageSizes(pdf_path):
    return _swigPageXML.gsGetPdfPageSizes(pdf_path)

def gsRenderPdfPageToPng(pdf_path, page_num, png_path, density=300):
    return _swigPageXML.gsRenderPdfPageToPng(pdf_path, page_num, png_path, density)

