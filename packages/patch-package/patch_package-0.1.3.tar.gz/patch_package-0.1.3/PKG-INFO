Metadata-Version: 2.1
Name: patch-package
Version: 0.1.3
Summary: Automatically generate and apply patches to fix installed packages
Home-page: https://github.com/Cabanon/patch-package
License: MIT
Author: Cabanon
Author-email: mathias.cabanne@gmail.com
Requires-Python: >=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: backports-tempfile (>=1.0,<2.0) ; python_version >= "2.7" and python_version < "3.0"
Requires-Dist: future (>=1.0.0,<2.0.0)
Requires-Dist: importlib-metadata ; python_version < "3.8"
Requires-Dist: patch (>=1.16,<2.0)
Requires-Dist: pathlib2 (>=2.3.0,<3.0.0) ; python_version >= "2.7" and python_version < "3.0"
Project-URL: Repository, https://github.com/Cabanon/patch-package
Description-Content-Type: text/markdown

# patch-package

![PyPI - Python Version](https://img.shields.io/pypi/pyversions/patch-package)
![PyPI](https://img.shields.io/pypi/v/patch-package)

**patch-package** is a Python library to automatically create and apply patches from changes made in installed packages. It is heavily inspired by [patch-package](https://github.com/ds300/patch-package) which is the equivalent for Node packages.

## Features

* Compatible with Python 2.7 and Python 3.5+
* Automatic code change detection between installed package and package source from pip
* Prevent patching when version or code are mismatching
* Automatic matching between import names and package names (e.g. yaml -> PyYAML) and fuzzy matching (e.g. request -> requests)

## Usage

Install the library from PyPI

    pip install patch-package

Make a change in one of your installed package and then generate the corresponding patch

    patch-package <package-name>

Then when reinstalling the package you can apply back your patches

    patch-package

All patches are contained in the *patches/* folder so it can be commited to git and reapply whenever you want

## Development

Make sure you have pyenv installed.

Install the tox library

    pip install tox

Run tests

    tox

