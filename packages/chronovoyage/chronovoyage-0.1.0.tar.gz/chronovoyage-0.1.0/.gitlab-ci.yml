# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
variables:
  INSTANCE: 'Writerside/cd'
  ARTIFACT: 'webHelpCD2-all.zip'
  DOCKER_VERSION: '242.21870'

stages:
  - build
  - test
  - deploy

sast:
  stage: test
include:
  - template: Security/SAST.gitlab-ci.yml

build:
  stage: build
  image: registry.jetbrains.team/p/writerside/builder/writerside-builder:$DOCKER_VERSION
  script:
    - set -e
    - export DISPLAY=:99
    - Xvfb :99 &
    - /opt/builder/bin/idea.sh helpbuilderinspect -source-dir . -product $INSTANCE --runner gitlab -output-dir public/ || true
    - echo "Testing existence of $ARTIFACT..."
    - test -e public/$ARTIFACT
    - cp -va public/$ARTIFACT $ARTIFACT
    - echo "build_job_id=$CI_JOB_ID" >> job.env
  artifacts:
    paths:
      - $ARTIFACT
      - public/report.json
    reports:
      dotenv: job.env
    expire_in: 1 week

test:
  stage: test
  image: openjdk:18-jdk-alpine
  before_script:
    - apk add curl
  script:
    - cd public
    - curl -o wrs-checker.jar -L https://packages.jetbrains.team/maven/p/writerside/maven/com/jetbrains/writerside/writerside-ci-checker/1.0/writerside-ci-checker-1.0.jar
    - java -jar wrs-checker.jar report.json $INSTANCE

deploy-to-amplify:
  stage: deploy
  only:
    - main
  needs: [ build, test ]
  image:
    name: amazon/aws-cli
    entrypoint: [ "" ]
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  variables:
    ROLE_ARN: $aws_oidc_role_arn
    AWS_REGION: $aws_region
    APP_ID: $amplify_app_id
    BRANCH_NAME: main
    SOURCE_URL: $CI_API_V4_URL/projects/$CI_PROJECT_ID/jobs/$build_job_id/artifacts/$ARTIFACT
  before_script:
    - >
      export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
      $(aws sts assume-role-with-web-identity
      --role-arn ${ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 900
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - aws sts get-caller-identity
  script:
    - aws amplify start-deployment --app-id $APP_ID --branch-name $BRANCH_NAME --source-url $SOURCE_URL
