Metadata-Version: 2.1
Name: tigrina
Version: 2.0.1
Summary: Tigrina alphabet processing, which helps to write Tigrina by Tigrina alphabets and other functionalities for manipulation of tigrina words.
Home-page: UNKNOWN
Author: Gide Segid
Author-email: gidesegid@gmail.com
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pandas

## Tigrinya Alphabets Processing Library

This application is designed to facilitate the use of Tigrinya alphabets for writing and linguistic analysis on computers and mobile devices. It provides a comprehensive set of functions to make working with the Tigrinya language more efficient and accessible, whether you are a native speaker, language learner, or researcher.

#### Key Features

1. **Tigrinya Alphabet Input and Conversion**:
   - The application allows developers to type and manipulate text using the Tigrinya script. It includes features for converting text written in Tigrinya alphabets into numeric codes and vice versa, among other functionalities. Encoding and decoding text in Tigrinya is particularly useful for protecting sensitive information or integrating Tigrinya text into systems that require numeric data.

2. **Transliteration Support**:
   - Users can easily convert Tigrinya words written in the English alphabet into the proper Tigrinya script. This feature helps bridge the gap for users more familiar with English keyboards but who want to write in Tigrinya. Developers can integrate this functionality into their projects to provide enhanced Tigrinya word processing for their end users.

3. **Linguistic Tools for Verb, Noun, and Adjective Management**:
   - The library includes advanced functions for creating and analyzing verbs, nouns, and adjectives in the Tigrinya language. It can generate conjugated verbs from their stems, extract stems from fully conjugated verbs, create noun stems, and manage adjective forms. These functions are invaluable for language learning, grammatical analysis, and content creation in Tigrinya. This functionality can also be integrated into developers' projects, offering further advantages to end users.

4. **Text Processing and Sentence Management**:
   - For ease of translation and text manipulation, the library provides features to break down long sentences into smaller, manageable chunks. This functionality is crucial for accurately translating or processing complex text, making the application versatile for both casual and professional use.

#### Application Purpose

The primary purpose of this library is to enhance the ability to write, translate, and analyze text in Tigrinya using digital devices. By integrating a range of linguistic functions and conversion features, the application supports both everyday communication and more specialized tasks, such as language education, research, and digital content creation. Whether you're composing a message, translating a document, or studying Tigrinya grammar, this library offers a streamlined, user-friendly platform for all your needs as a developer to provide your end users.

### User Manual: Code Word Functions for Tigrinya Language Processing

This manual provides a brief explanation of the functions available in the `tigrina_words` module for processing Tigrinya language text. Each function performs a specific task related to translating, encoding, or identifying Tigrinya language elements.

#### 1. **Convert Tigrinya Alphabet to Numeric Code**
   - **Function**: `code_translation("ፈተነ","code","")`
   - **Description**: Converts a Tigrinya word or sentence (e.g., "ፈተነ") into its corresponding numeric code. This is useful for encoding Tigrinya text.

#### 2. **Decode Numeric Code to Tigrinya Alphabet**
   - **Function**: `code_translation(mycode, 'decode', 'yes')`
   - **Description**: Decodes a numeric code back into the original Tigrinya alphabet. The `mycode` variable contains the numeric code that will be decoded.

#### 3. **Convert English-Alphabet Tigrinya to Tigrinya Alphabet**
   - **Function**: `convert_sentence_to_tigrina("ezi natey iyu")`
   - **Description**: Converts Tigrinya words written using the English alphabet (e.g., "ezi natey iyu") into the Tigrinya alphabet. This helps in converting transliterated text back to its original script.

#### 4. **Translate Verb "To Be" in Tigrinya**
   - **Function**: `verb_to_be_trans()`
   - **Description**: Provides translations of the verb "to be" in Tigrinya across different forms. This function contains a dictionary or lookup table for verb conjugations.

#### 5. **Identify the Verb "To Be" and Other Verbs in a Sentence**
   - **Function**: `verb_to_be("ይመጽእ ኣሎ")`
   - **Description**: Analyzes a given Tigrinya sentence (e.g., "ይመጽእ ኣሎ") to identify and extract the verb "to be" and other verbs present in the sentence. This is useful for linguistic analysis and sentence parsing.

### Usage Examples
Each function is designed for specific use cases, such as encoding/decoding text, converting transliterations, or analyzing verbs in Tigrinya sentences. For example, if you have a numeric code and need to retrieve the original Tigrinya word, use the decoding function with the appropriate parameters.

### Additional Functions in `tigrina_words` Module for Tigrinya Language Processing

This section of the manual explains additional functions available in the `tigrina_words` module that focus on verb and adjective creation, stem extraction, noun processing, and sentence breaking for easier translation or processing.

#### 1. **Create Verbs from Stems in Tigrinya**
   - **Function**: `verb.create_verb_from_stem("መጽአ", 'future', 'we', "he", 'ዘይ', "yes")`
   - **Description**: Generates a complete verb from a given stem verb (e.g., "መጽአ") by specifying tense (e.g., 'future'), subject (e.g., 'we'), and other grammatical markers like negation (e.g., 'ዘይ') and aspect (e.g., "yes"). This is useful for constructing conjugated verbs in various forms.

#### 2. **Create Stem Verbs from Tigrinya Verbs**
   - **Function**: `verb.create_stem_from_verb("ኣሲርዎ")`
   - **Description**: Extracts the stem from a given Tigrinya verb (e.g., "ኣሲርዎ"). The stem is the base form used to create various conjugations of the verb.

#### 3. **Create Stem Nouns from Nouns in Tigrinya**
   - **Function**: `tigrina_words.noun("ቦርሳታት")`
   - **Description**: Extracts the stem form of a noun (e.g., "ቦርሳታት") in Tigrinya. The stem noun is the base form that can be used to create plural forms, possessives, and other noun modifications.

#### 4. **Create Adjectives from Stem Adjectives in Tigrinya**
   - **Function**: `adjective.make_adjective_from_stem('ብርቱዕ', '', 'her', '', '', 'እንተዘይ')`
   - **Description**: Constructs a full adjective from a stem (e.g., 'ብርቱዕ') by specifying gender, possession, and negation markers (e.g., 'እንተዘይ' for negation). This is useful for generating descriptive words that match the grammatical context.

#### 5. **Create Stem Adjectives from Non-Stem Adjectives in Tigrinya**
   - **Function**: `adjective.make_stem_from_adjective('እንተዝብርትዕ')`
   - **Description**: Extracts the stem form of an adjective (e.g., 'እንተዝብርትዕ'), which can be used to create different forms of the adjective based on gender, number, or negation.

#### 6. **Break Long Sentences into Chunks**
   - **Function**: `break_text("test text here. This is another test.", "")`
   - **Description**: Splits a long sentence or paragraph (e.g., "test text here. This is another test.") into smaller, more manageable chunks. This is particularly useful for processing or translating large texts where sentence-by-sentence translation is required.

### Usage Examples
These functions are essential for building or breaking down words and sentences in the Tigrinya language, whether for translation, linguistic analysis, or language learning. For instance, if you need to generate a verb from its stem for future tense and a specific subject, you can use the `create_verb_from_stem` function with the relevant parameters. Similarly, to simplify long translations, you can use the `break_text` function to segment the content for easier processing or translation.

##### Main Module: 
main (from tigrina.main import Tigrina_words as tigrina_words)

The main module of this library serves as a one-stop solution that integrates all the functionalities provided by the other modules in the package. By importing this module, you will have access to all the features and capabilities of the entire library. This makes it the simplest and most convenient option for users who want to utilize the full potential of the library without managing individual imports.

##### Key Points:

- **All-in-One Access**: When you import the main module, you automatically gain access to all other modules, functions, and classes in the library. There's no need for additional imports unless you want to work with specific components separately.
- **Convenient and Efficient**: This file is designed to streamline your experience by providing a single point of entry to the entire package. You won't need to worry about missing any features or

 functionalities because everything is included and readily accessible.

#### Summary:
This Tigrinya Alphabets Processing Library simplifies working with the Tigrinya language through comprehensive functions for writing, translating, and linguistically analyzing text in Tigrinya.

