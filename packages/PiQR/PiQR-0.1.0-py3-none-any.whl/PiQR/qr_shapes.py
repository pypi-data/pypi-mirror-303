def make_shape(basic_shape, multiplier):
    shape = []
    for coords, state in basic_shape:
        new_x = coords[0] * multiplier
        new_y = coords[1] * multiplier
        shape.append(((new_x, new_y), state))
    return shape

def get_finder_1_shape():
    # top left finder
    basic_shape = [
        ((0, 7), 1), ((1, 7), 1), ((2, 7), 1), ((3, 7), 1), ((4, 7), 1), ((5, 7), 1), ((6, 7), 1), ((7, 7), 0),
        ((0, 6), 1), ((1, 6), 0), ((2, 6), 0), ((3, 6), 0), ((4, 6), 0), ((5, 6), 0), ((6, 6), 1), ((7, 6), 0),
        ((0, 5), 1), ((1, 5), 0), ((2, 5), 1), ((3, 5), 1), ((4, 5), 1), ((5, 5), 0), ((6, 5), 1), ((7, 5), 0),
        ((0, 4), 1), ((1, 4), 0), ((2, 4), 1), ((3, 4), 1), ((4, 4), 1), ((5, 4), 0), ((6, 4), 1), ((7, 4), 0),
        ((0, 3), 1), ((1, 3), 0), ((2, 3), 1), ((3, 3), 1), ((4, 3), 1), ((5, 3), 0), ((6, 3), 1), ((7, 3), 0),
        ((0, 2), 1), ((1, 2), 0), ((2, 2), 0), ((3, 2), 0), ((4, 2), 0), ((5, 2), 0), ((6, 2), 1), ((7, 2), 0),
        ((0, 1), 1), ((1, 1), 1), ((2, 1), 1), ((3, 1), 1), ((4, 1), 1), ((5, 1), 1), ((6, 1), 1), ((7, 1), 0),
        ((0, 0), 0), ((1, 0), 0), ((2, 0), 0), ((3, 0), 0), ((4, 0), 0), ((5, 0), 0), ((6, 0), 0), ((7, 0), 0)
    ]
    return basic_shape

def get_finder_2_shape():
    # top right finder
    basic_shape = [
        ((0, 7), 0), ((1, 7), 1), ((2, 7), 1), ((3, 7), 1), ((4, 7), 1), ((5, 7), 1), ((6, 7), 1), ((7, 7), 1),
        ((0, 6), 0), ((1, 6), 1), ((2, 6), 0), ((3, 6), 0), ((4, 6), 0), ((5, 6), 0), ((6, 6), 0), ((7, 6), 1),
        ((0, 5), 0), ((1, 5), 1), ((2, 5), 0), ((3, 5), 1), ((4, 5), 1), ((5, 5), 1), ((6, 5), 0), ((7, 5), 1),
        ((0, 4), 0), ((1, 4), 1), ((2, 4), 0), ((3, 4), 1), ((4, 4), 1), ((5, 4), 1), ((6, 4), 0), ((7, 4), 1),
        ((0, 3), 0), ((1, 3), 1), ((2, 3), 0), ((3, 3), 1), ((4, 3), 1), ((5, 3), 1), ((6, 3), 0), ((7, 3), 1),
        ((0, 2), 0), ((1, 2), 1), ((2, 2), 0), ((3, 2), 0), ((4, 2), 0), ((5, 2), 0), ((6, 2), 0), ((7, 2), 1),
        ((0, 1), 0), ((1, 1), 1), ((2, 1), 1), ((3, 1), 1), ((4, 1), 1), ((5, 1), 1), ((6, 1), 1), ((7, 1), 1),
        ((0, 0), 0), ((1, 0), 0), ((2, 0), 0), ((3, 0), 0), ((4, 0), 0), ((5, 0), 0), ((6, 0), 0), ((7, 0), 0),
    ]
    return basic_shape

def get_finder_3_shape():
    # bottom left finder
    basic_shape = [
        ((0, 7), 0), ((1, 7), 0), ((2, 7), 0), ((3, 7), 0), ((4, 7), 0), ((5, 7), 0), ((6, 7), 0), ((7, 7), 0),
        ((0, 6), 1), ((1, 6), 1), ((2, 6), 1), ((3, 6), 1), ((4, 6), 1), ((5, 6), 1), ((6, 6), 1), ((7, 6), 0),
        ((0, 5), 1), ((1, 5), 0), ((2, 5), 0), ((3, 5), 0), ((4, 5), 0), ((5, 5), 0), ((6, 5), 1), ((7, 5), 0),
        ((0, 4), 1), ((1, 4), 0), ((2, 4), 1), ((3, 4), 1), ((4, 4), 1), ((5, 4), 0), ((6, 4), 1), ((7, 4), 0),
        ((0, 3), 1), ((1, 3), 0), ((2, 3), 1), ((3, 3), 1), ((4, 3), 1), ((5, 3), 0), ((6, 3), 1), ((7, 3), 0),
        ((0, 2), 1), ((1, 2), 0), ((2, 2), 1), ((3, 2), 1), ((4, 2), 1), ((5, 2), 0), ((6, 2), 1), ((7, 2), 0),
        ((0, 1), 1), ((1, 1), 0), ((2, 1), 0), ((3, 1), 0), ((4, 1), 0), ((5, 1), 0), ((6, 1), 1), ((7, 1), 0),
        ((0, 0), 1), ((1, 0), 1), ((2, 0), 1), ((3, 0), 1), ((4, 0), 1), ((5, 0), 1), ((6, 0), 1), ((7, 0), 0)
    ]
    return basic_shape

def get_reserve_1_shape(binary=False):
    basic_shape = [((0, 0), 1), ((0, 1), 1), ((0, 2), 1), ((0, 3), 1), ((0, 4), 1), ((0, 5), 1), ((0, 6), 1)]
    if binary:
        shape_index = 0
        for i in binary:
            coords, state = basic_shape[shape_index]
            basic_shape[shape_index] = (coords, int(i))
            shape_index += 1

    return basic_shape

def get_reserve_2_shape(binary=False):
    basic_shape = [((0, 0), 1), ((1, 0), 1), ((2, 0), 1), ((3, 0), 1), ((4, 0), 1), ((5, 0), 1), ((7, 0), 1), ((8, 0), 1),
                   ((8, 1), 1), ((8, 3), 1), ((8, 4), 1), ((8, 5), 1), ((8, 6), 1), ((8, 7), 1), ((8, 8), 1)] # removed for timing pattern ((6, 0), 1), ((8, 2), 1),
    if binary:
        shape_index = 0
        for i in binary:
            coords, state = basic_shape[shape_index]
            basic_shape[shape_index] = (coords, int(i))
            shape_index += 1

    return basic_shape

def get_reserve_3_shape(binary=False):
    basic_shape = [((0, 0), 1), ((1, 0), 1), ((2, 0), 1), ((3, 0), 1), ((4, 0), 1), ((5, 0), 1), ((6, 0), 1), ((7, 0), 1)]
    if binary:
        shape_index = 0
        for i in binary:
            coords, state = basic_shape[shape_index]
            basic_shape[shape_index] = (coords, int(i))
            shape_index += 1

    return basic_shape

def get_v_reserve_1_shape(binary=False):
    basic_shape = [((0, 0), 1), ((1, 0), 1), ((2, 0), 1),
                   ((0, 1), 1), ((1, 1), 1), ((2, 1), 1),
                   ((0, 2), 1), ((1, 2), 1), ((2, 2), 1),
                   ((0, 3), 1), ((1, 3), 1), ((2, 3), 1),
                   ((0, 4), 1), ((1, 4), 1), ((2, 4), 1),
                   ((0, 5), 1), ((1, 5), 1), ((2, 5), 1)]
    if binary:
        shape_index = 0
        for i in binary:
            coords, state = basic_shape[shape_index]
            basic_shape[shape_index] = (coords, int(i))
            shape_index += 1
    return basic_shape

def get_v_reserve_2_shape(binary=False):
    basic_shape = [((0, 2), 1), ((1, 2), 1), ((2, 2), 1), ((3, 2), 1), ((4, 2), 1), ((5, 2), 1),
                   ((0, 1), 1), ((1, 1), 1), ((2, 1), 1), ((3, 1), 1), ((4, 1), 1), ((5, 1), 1),
                   ((0, 0), 1), ((1, 0), 1), ((2, 0), 1), ((3, 0), 1), ((4, 0), 1), ((5, 0), 1)]

    if binary:
        shape_index = 0
        for i in binary:
            coords, state = basic_shape[shape_index]
            basic_shape[shape_index] = (coords, int(i))
            shape_index += 1
    return basic_shape

def get_alignment_shape():
    basic_shape = [
        ((0, 4), 1), ((1, 4), 1), ((2, 4), 1), ((3, 4), 1), ((4, 4), 1),
        ((0, 3), 1),((1, 3), 0), ((2, 3), 0), ((3, 3), 0), ((4, 3), 1),
        ((0, 2), 1),((1, 2), 0), ((2, 2), 1), ((3, 2), 0), ((4, 2), 1),
        ((0, 1), 1),((1, 1), 0), ((2, 1), 0), ((3, 1), 0), ((4, 1), 1),
        ((0, 0), 1),((1, 0), 1), ((2, 0), 1), ((3, 0), 1), ((4, 0), 1),
    ]
    return basic_shape