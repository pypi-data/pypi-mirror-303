from scipy import stats as stats
from scipy._lib._util import check_random_state as check_random_state
from scipy._typing import Untyped
from ._qmc import Halton as Halton, QMCEngine as QMCEngine

__all__ = ["FastGeneratorInversion", "RatioUniforms"]

def argus_pdf(x: Untyped, chi: Untyped) -> Untyped: ...
def argus_gamma_trf(x: Untyped, chi: Untyped) -> Untyped: ...
def argus_gamma_inv_trf(x: Untyped, chi: Untyped) -> Untyped: ...
def betaprime_pdf(x: Untyped, a: Untyped, b: Untyped) -> Untyped: ...
def beta_valid_params(a: Untyped, b: Untyped) -> Untyped: ...
def gamma_pdf(x: Untyped, a: Untyped) -> Untyped: ...
def invgamma_pdf(x: Untyped, a: Untyped) -> Untyped: ...
def burr_pdf(x: Untyped, cc: Untyped, dd: Untyped) -> Untyped: ...
def burr12_pdf(x: Untyped, cc: Untyped, dd: Untyped) -> Untyped: ...
def chi_pdf(x: Untyped, a: Untyped) -> Untyped: ...
def chi2_pdf(x: Untyped, df: Untyped) -> Untyped: ...
def alpha_pdf(x: Untyped, a: Untyped) -> Untyped: ...
def bradford_pdf(x: Untyped, c: Untyped) -> Untyped: ...
def crystalball_pdf(x: Untyped, b: Untyped, m: Untyped) -> Untyped: ...
def weibull_min_pdf(x: Untyped, c: Untyped) -> Untyped: ...
def weibull_max_pdf(x: Untyped, c: Untyped) -> Untyped: ...
def invweibull_pdf(x: Untyped, c: Untyped) -> Untyped: ...
def wald_pdf(x: Untyped) -> Untyped: ...
def geninvgauss_mode(p: Untyped, b: Untyped) -> Untyped: ...
def geninvgauss_pdf(x: Untyped, p: Untyped, b: Untyped) -> Untyped: ...
def invgauss_mode(mu: Untyped) -> Untyped: ...
def invgauss_pdf(x: Untyped, mu: Untyped) -> Untyped: ...
def powerlaw_pdf(x: Untyped, a: Untyped) -> Untyped: ...

PINV_CONFIG: Untyped

class CustomDistPINV:
    def __init__(self, pdf: Untyped, args: Untyped) -> None: ...
    def pdf(self, x: Untyped) -> Untyped: ...

class FastGeneratorInversion:
    def __init__(
        self,
        dist: Untyped,
        *,
        domain: Untyped | None = None,
        ignore_shape_range: bool = False,
        random_state: Untyped | None = None,
    ) -> None: ...
    @property
    def random_state(self) -> Untyped: ...
    @random_state.setter
    def random_state(self, random_state: Untyped) -> None: ...
    @property
    def loc(self) -> Untyped: ...
    @loc.setter
    def loc(self, loc: Untyped) -> None: ...
    @property
    def scale(self) -> Untyped: ...
    @scale.setter
    def scale(self, scale: Untyped) -> None: ...
    def rvs(self, size: Untyped | None = None) -> Untyped: ...
    def ppf(self, q: Untyped) -> Untyped: ...
    def qrvs(self, size: Untyped | None = None, d: Untyped | None = None, qmc_engine: Untyped | None = None) -> Untyped: ...
    def evaluate_error(self, size: int = 100000, random_state: Untyped | None = None, x_error: bool = False) -> Untyped: ...
    def support(self) -> Untyped: ...

class RatioUniforms:
    def __init__(
        self, pdf: Untyped, *, umax: Untyped, vmin: Untyped, vmax: Untyped, c: int = 0, random_state: Untyped | None = None
    ) -> None: ...
    def rvs(self, size: int = 1) -> Untyped: ...
