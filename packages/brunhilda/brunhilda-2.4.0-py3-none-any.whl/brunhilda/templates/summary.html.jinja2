<script src="https://code.jquery.com/jquery-3.4.1.slim.js"></script>
<script>
    const results = ['passed', 'failed', 'errored', 'justified', 'skipped',
                     'expected-failure', 'unexpected-success', 'not-covered'];

    $(document).ready(function() {
        for (const result of results) {
            (function(r) {
                if ($("#run-summary--" + r).length) {
                    $("#run-summary--" + r).change(function() {
                        if (this.checked) {
                            $(".test--" + r).removeClass("test--hidden");
                        }
                        else {
                            $(".test--" + r).addClass("test--hidden");
                        }

                        /* hide rows with no items */
                        for (const tr of $("tr.filterable")) {
                            if ($(tr).find(".inner_table").length) {
                                if ($(tr).find(".inner_table tr:not(.test--hidden)").length == 0) {
                                    $(tr).addClass("test--hidden_id");
                                }
                                else {
                                    $(tr).removeClass("test--hidden_id");
                                }
                            }
                        }
                    });
                }
            })(result);
        }

        var all_options = $("#level-selector option").map(function() {return $(this).val();}).get();
        all_options = all_options.filter(option => option != "all");
        $("#level-selector").change(function() {
            if (this.value === "all") {
                for (const option of all_options) {
                    $(".test_level--" + option).removeClass("test--hidden_lvl");
                }
            }
            else {
                $(".test_level--" + this.value).removeClass("test--hidden_lvl");
                for (const option of all_options) {
                    if (option != this.value) {
                        $(".test_level--" + option).addClass("test--hidden_lvl");
                    }
                }
            }
        });

        function sanitize(name) {
            return name.replace(" ", "_").replace("(", "_").replace(")", "_").replace(".", "_").toLowerCase();
        }

        $("#filter").on('change keyup paste', function () {
            if (this.value != "") {
                const filterValue = sanitize(this.value)

                $("tr.filterable").each(function() {
                    const rowValue = $(this).attr("data-filter");

                    if (rowValue != undefined && sanitize(rowValue).includes(filterValue)) {
                        $(this).removeClass("test--hidden_id");
                    }
                    else {
                        $(this).addClass("test--hidden_id");
                    }
                });
            }
            else {
                $(".test--hidden_id").removeClass("test--hidden_id");
            }
        });

        /* This filter can be applied as search within the text. No space replacements. Values are case insensitive.
        Values that do not contain specific input are hidden.
        */
        $("#filter_req").on('change keyup paste', function () {
            if (this.value != "") {
                const filterValue = this.value.toLowerCase();

                $("tr.filterable").each(function() {
                    const rowValue = $(this).attr("data-filter-req").toLowerCase();

                    if (rowValue != undefined && rowValue.includes(filterValue)) {
                        $(this).removeClass("test--hidden_id");
                    }
                    else {
                        $(this).addClass("test--hidden_id");
                    }
                });
            }
            else {
                $(".test--hidden_id").removeClass("test--hidden_id");
            }
        });
    });
</script>

<h2>Summary</h2>

<table class="run-summary table--wide">
    <tbody>
        <tr class="run-summary--passed">
            <th><input type="checkbox" id="run-summary--passed" checked>
                <label for="run-summary--passed">Passed</label>
            </th>
            <td>
                {{ summary.results.passed }}
            </td>
            <td>Passed tests.</td>
        </tr>
        <tr class="run-summary--failed">
            <th><input type="checkbox" id="run-summary--failed" checked>
                <label for="run-summary--failed">Failed</label>
            </th>
            <td>
                {{ summary.results.failed }}
            </td>
            <td>Failed tests.</td>
        </tr>
        <tr class="run-summary--errored">
            <th><input type="checkbox" id="run-summary--errored" checked>
                <label for="run-summary--errored">Errored</label>
            </th>
            <td>
                {{ summary.results.errored }}
            </td>
            <td>Tests that ended with other than assertion failure error.</td>
        </tr>
        <tr class="run-summary--justified">
            <th><input type="checkbox" id="run-summary--justified" checked>
                <label for="run-summary--justified">Justified</label>
            </th>
            <td>
                {{ summary.results.justified }}
            </td>
            <td>Tests ended with failure or error manually reviewed and reported as a false alarm.</td>
        </tr>
        <tr class="run-summary--skipped">
            <th><input type="checkbox" id="run-summary--skipped" checked>
                <label for="run-summary--skipped">Skipped</label>
            </th>
            <td>
                {{ summary.results.skipped }}
            </td>
            <td>Tests that were skipped and not executed.</td>
        </tr>
        <tr class="run-summary--expected-failure">
            <th><input type="checkbox" id="run-summary--expected-failure" checked>
                <label for="run-summary--expected-failure">Expected failures</label>
            </th>
            <td>
                {{ summary.results.expected_failures }}
            </td>
            <td>Tests that are expected to fail during execution (e.g. DUT feature implementation is not yet finished).</td>
        </tr>
        <tr class="run-summary--unexpected-success">
            <th><input type="checkbox" id="run-summary--unexpected-success" checked>
                <label for="run-summary--unexpected-success">Unexpected successes</label>
            </th>
            <td>
                {{ summary.results.unexpected_successes }}
            </td>
            <td>Tests marked as <em>expected failure</em> which passed despite expectation.</td>
        </tr>
    </tbody>
    <tfoot>
        <tr>
            <th> Total </th>
            <td colspan="2">{{ summary.results.total }}</td>
        </tr>
    </tfoot>
</table>

<h2>Execution Type Distribution</h2>

<table class="run-summary table--wide">
    <thead>
        <tr>
            <th></th>
        {% for execution in summary.execution %}
            <th colspan="2">{{ execution|capitalize }}</th>
        {% endfor %}
        {% if summary.execution.values()|sum != summary.results.total %}
            <th colspan="2">Not specified</th>
        {% endif %}
            <th>Total</th>
        </tr>
    </thead>
    <tbody>
    {% for name, level in summary.levels.items() %}
        <tr>
            <th>{{ name|capitalize }}</th>

        {% for execution in summary.execution %}
            <td>{{ level.execution[execution] }}</td>
            <td>{{ (level.execution[execution] / level.tests * 100)|round(1) }} %</td>
        {% endfor %}

        {% set execution_level_count = level.execution.values()|sum %}

        {% if summary.execution.values()|sum != summary.results.total %}
            <td>{{ level.tests - execution_level_count }}</td>
            <td>{{ ((level.tests - execution_level_count) / level.tests * 100)|round(1) }} %</td>
        {% endif %}

            <th>{{ level.tests }}</th>
        </tr>
    {% endfor %}
    </tbody>
    <tfoot>
        <tr>
            <th>Total</th>
        {% for execution, count in summary.execution.items() %}
            <td>{{ count }}</td>
            <td>{{ (count / summary.results.total * 100)|round(1) }} %</td>
        {% endfor %}
        {% if summary.execution.values()|sum != summary.results.total %}
            {% set not_specified = summary.results.total - summary.execution.values()|sum %}
            <td>{{ not_specified }}</td>
            <td>{{ (not_specified / summary.results.total * 100)|round(1) }} %</td>
        {% endif %}
            <th>{{ summary.results.total }}</th>
        </tr>
    </tfoot>
</table>

{% if summary.results.total > 0 %}

{% if 0 %}
<div class="bar">
    <div class="bar__line bar__line--passed"
            style="width:{{summary.results.pct_passed}}%;">
            <span>{{ summary.results.pct_passed|round(1) }}% passed</span>
    </div>
    <div class="bar__line bar__line--failed"
            style="width:{{summary.results.pct_failed}}%;">
            <span>{{ summary.results.pct_failed|round(1) }}% failed</span>
    </div>
    <div class="bar__line bar__line--errored"
        style="width:{{summary.results.pct_errored}}%;">
        <span>{{ summary.results.pct_errored|round(1) }}% errored</span>
    </div>
    <div class="bar__line bar__line--justified"
        style="width:{{summary.results.pct_justified}}%;">
        <span>{{ summary.results.pct_justified|round(1) }}% justified</span>
    </div>
    <div class="bar__line bar__line--skipped"
            style="width:{{summary.results.pct_skipped}}%;">
            <span>{{ summary.results.pct_skipped|round(1) }}% skipped</span>
    </div>
    <div class="bar__line bar__line--expected-failure"
            style="width:{{summary.results.pct_expected_failures}}%;">
            <span>{{ summary.results.pct_expected_failures|round(1) }}% expected failure</span>
    </div>
    <div class="bar__line bar__line--unexpected-success"
            style="width:{{summary.results.pct_unexpected_successes}}%;">
            <span>{{ summary.results.pct_unexpected_successes|round(1) }}% unexpected success</span>
    </div>
</div>
{% endif %}

<script src="https://www.gstatic.com/charts/loader.js"></script>
<script>
    google.charts.load('current', {'packages': ['corechart']});
    google.charts.setOnLoadCallback(drawChart);

    function drawChart() {
        var dataResult = google.visualization.arrayToDataTable([
            ['Test result', 'Amount'],
            ['passed', {{ summary.results.passed }}],
            ['failed', {{ summary.results.failed }}],
            ['errored', {{ summary.results.errored }}],
            ['skipped', {{ summary.results.skipped }}],
            ['justified', {{ summary.results.justified }}],
            ['expected failure', {{ summary.results.expected_failures }}],
            ['unexpected success', {{ summary.results.unexpected_successes }}]
        ]);

        var dataExecution = google.visualization.arrayToDataTable([
            ['Execution', 'Amount'],
        {% for execution, count in summary.execution.items() %}
            ['{{ execution|capitalize }}', {{ count }}],
        {% endfor %}
        {% if summary.execution.values()|sum != summary.results.total %}
            ['Not Specified', {{ summary.results.total - summary.execution.values()|sum }}]
        {% endif %}
        ]);

        var dataLevel = google.visualization.arrayToDataTable([
            ['Level', 'Amount'],
        {% for name, level in summary.levels.items() %}
            ['{{ name|capitalize }}', {{ level.tests }}],
        {% endfor %}
        ]);

        var chartResult = new google.visualization.PieChart(document.getElementById('piechart_result'));
        var chartExecution = new google.visualization.PieChart(document.getElementById('piechart_execution'));
        var chartLevel = new google.visualization.PieChart(document.getElementById('piechart_level'));

        chartResult.draw(dataResult, {
            title: 'Test Result',
            chartArea: {width: '95%', height: '80%'},
            pieHole: 0.3,
            colors: ['green','#dc0000', '#a700d1', 'orange', '#74ad09', '#4000f0', '#00c8c8']
        });
        chartExecution.draw(dataExecution, {
            title: 'Test Execution',
            chartArea: {width: '95%', height: '80%'},
            pieHole: 0.3
        });
        chartLevel.draw(dataLevel, {
            title: 'Levels',
            chartArea: {width: '95%', height: '80%'},
            pieHole: 0.3
        });
    }
</script>
<div class="piechart">
    <div id="piechart_result" class="piechart__chart"></div>
    <div id="piechart_execution" class="piechart__chart"></div>
    <div id="piechart_level" class="piechart__chart"></div>
</div>
{% endif %}
