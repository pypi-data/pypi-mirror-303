# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import embeds_pb2 as embeds__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in embeds_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EmbedsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEmbed = channel.unary_unary(
                '/pulsejet.Embeds/GetEmbed',
                request_serializer=embeds__pb2.OpGetEmbed.SerializeToString,
                response_deserializer=embeds__pb2.GetEmbedResponse.FromString,
                _registered_method=True)
        self.GetEmbeds = channel.unary_unary(
                '/pulsejet.Embeds/GetEmbeds',
                request_serializer=embeds__pb2.OpGetEmbeds.SerializeToString,
                response_deserializer=embeds__pb2.GetEmbedsResponse.FromString,
                _registered_method=True)
        self.ListEmbeds = channel.unary_unary(
                '/pulsejet.Embeds/ListEmbeds',
                request_serializer=embeds__pb2.OpListEmbeds.SerializeToString,
                response_deserializer=embeds__pb2.ListEmbedsResponse.FromString,
                _registered_method=True)
        self.InsertEmbed = channel.unary_unary(
                '/pulsejet.Embeds/InsertEmbed',
                request_serializer=embeds__pb2.OpInsertEmbed.SerializeToString,
                response_deserializer=embeds__pb2.InsertEmbedResponse.FromString,
                _registered_method=True)
        self.InsertMultiEmbeds = channel.unary_unary(
                '/pulsejet.Embeds/InsertMultiEmbeds',
                request_serializer=embeds__pb2.OpMultiInsertEmbed.SerializeToString,
                response_deserializer=embeds__pb2.InsertMultiEmbedsResponse.FromString,
                _registered_method=True)
        self.UpdateEmbed = channel.unary_unary(
                '/pulsejet.Embeds/UpdateEmbed',
                request_serializer=embeds__pb2.OpUpdateEmbed.SerializeToString,
                response_deserializer=embeds__pb2.UpdateEmbedResponse.FromString,
                _registered_method=True)
        self.UpdateEmbeds = channel.unary_unary(
                '/pulsejet.Embeds/UpdateEmbeds',
                request_serializer=embeds__pb2.OpMultiUpdateEmbed.SerializeToString,
                response_deserializer=embeds__pb2.UpdateMultiEmbedResponse.FromString,
                _registered_method=True)
        self.DeleteEmbeds = channel.unary_unary(
                '/pulsejet.Embeds/DeleteEmbeds',
                request_serializer=embeds__pb2.OpMultiDeleteEmbed.SerializeToString,
                response_deserializer=embeds__pb2.DeleteEmbedsResponse.FromString,
                _registered_method=True)


class EmbedsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetEmbed(self, request, context):
        """
        Get a single embed with specified ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEmbeds(self, request, context):
        """
        Get multiple embeds with given IDs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEmbeds(self, request, context):
        """
        List all embeds in a collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertEmbed(self, request, context):
        """
        Insert single embed into a given collection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertMultiEmbeds(self, request, context):
        """
        Insert multiple embeds into a given collection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEmbed(self, request, context):
        """
        Update a single embed with given one. This triggers late indexing again.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEmbeds(self, request, context):
        """
        Update multiple embeds at the same time,
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEmbeds(self, request, context):
        """
        Delete embeds from a collection with given IDs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmbedsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEmbed': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEmbed,
                    request_deserializer=embeds__pb2.OpGetEmbed.FromString,
                    response_serializer=embeds__pb2.GetEmbedResponse.SerializeToString,
            ),
            'GetEmbeds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEmbeds,
                    request_deserializer=embeds__pb2.OpGetEmbeds.FromString,
                    response_serializer=embeds__pb2.GetEmbedsResponse.SerializeToString,
            ),
            'ListEmbeds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEmbeds,
                    request_deserializer=embeds__pb2.OpListEmbeds.FromString,
                    response_serializer=embeds__pb2.ListEmbedsResponse.SerializeToString,
            ),
            'InsertEmbed': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertEmbed,
                    request_deserializer=embeds__pb2.OpInsertEmbed.FromString,
                    response_serializer=embeds__pb2.InsertEmbedResponse.SerializeToString,
            ),
            'InsertMultiEmbeds': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertMultiEmbeds,
                    request_deserializer=embeds__pb2.OpMultiInsertEmbed.FromString,
                    response_serializer=embeds__pb2.InsertMultiEmbedsResponse.SerializeToString,
            ),
            'UpdateEmbed': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEmbed,
                    request_deserializer=embeds__pb2.OpUpdateEmbed.FromString,
                    response_serializer=embeds__pb2.UpdateEmbedResponse.SerializeToString,
            ),
            'UpdateEmbeds': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEmbeds,
                    request_deserializer=embeds__pb2.OpMultiUpdateEmbed.FromString,
                    response_serializer=embeds__pb2.UpdateMultiEmbedResponse.SerializeToString,
            ),
            'DeleteEmbeds': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEmbeds,
                    request_deserializer=embeds__pb2.OpMultiDeleteEmbed.FromString,
                    response_serializer=embeds__pb2.DeleteEmbedsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pulsejet.Embeds', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pulsejet.Embeds', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Embeds(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetEmbed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pulsejet.Embeds/GetEmbed',
            embeds__pb2.OpGetEmbed.SerializeToString,
            embeds__pb2.GetEmbedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEmbeds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pulsejet.Embeds/GetEmbeds',
            embeds__pb2.OpGetEmbeds.SerializeToString,
            embeds__pb2.GetEmbedsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListEmbeds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pulsejet.Embeds/ListEmbeds',
            embeds__pb2.OpListEmbeds.SerializeToString,
            embeds__pb2.ListEmbedsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertEmbed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pulsejet.Embeds/InsertEmbed',
            embeds__pb2.OpInsertEmbed.SerializeToString,
            embeds__pb2.InsertEmbedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertMultiEmbeds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pulsejet.Embeds/InsertMultiEmbeds',
            embeds__pb2.OpMultiInsertEmbed.SerializeToString,
            embeds__pb2.InsertMultiEmbedsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEmbed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pulsejet.Embeds/UpdateEmbed',
            embeds__pb2.OpUpdateEmbed.SerializeToString,
            embeds__pb2.UpdateEmbedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateEmbeds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pulsejet.Embeds/UpdateEmbeds',
            embeds__pb2.OpMultiUpdateEmbed.SerializeToString,
            embeds__pb2.UpdateMultiEmbedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteEmbeds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pulsejet.Embeds/DeleteEmbeds',
            embeds__pb2.OpMultiDeleteEmbed.SerializeToString,
            embeds__pb2.DeleteEmbedsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
