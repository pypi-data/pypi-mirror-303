from __future__ import annotations

import re
from typing import Any

from attrs import define, field

from cloudshell.cp.vcenter.exceptions import BaseVCenterException


class VCenterDeploymentAppAttributeNames:
    vm_cluster = "VM Cluster"
    vm_storage = "VM Storage"
    vm_resource_pool = "VM Resource Pool"
    vm_location = "VM Location"
    behavior_during_save = "Behavior during save"
    auto_power_on = "Auto Power On"
    auto_power_off = "Auto Power Off"
    wait_for_ip = "Wait for IP"
    auto_delete = "Auto Delete"
    autoload = "Autoload"
    ip_regex = "IP Regex"
    refresh_ip_timeout = "Refresh IP Timeout"
    customization_spec = "Customization Spec"
    hostname = "Hostname"
    private_ip = "Private IP"
    cpu_num = "CPU"
    ram_amount = "RAM"
    hdd_specs = "HDD"
    autogenerated_name = "Autogenerated Name"
    copy_source_uuid = "Copy source UUID"


class StaticVCenterDeploymentAppAttributeNames:
    vm_name = "VM Name"
    vcenter_resource_name = "vCenter Resource Name"


class VCenterVMFromVMDeploymentAppAttributeNames(VCenterDeploymentAppAttributeNames):
    vcenter_vm = "vCenter VM"


class VCenterVMFromTemplateDeploymentAppAttributeNames(
    VCenterDeploymentAppAttributeNames
):
    vcenter_template = "vCenter Template"


class VCenterVMFromCloneDeployAppAttributeNames(
    VCenterVMFromVMDeploymentAppAttributeNames
):
    vcenter_vm_snapshot = "vCenter VM Snapshot"


class VCenterVMFromImageDeploymentAppAttributeNames(VCenterDeploymentAppAttributeNames):
    vcenter_image = "vCenter Image"
    vcenter_image_arguments = "vCenter Image Arguments"


@define
class ResourceAttrRODeploymentPath:
    name: str
    default: Any = None

    def get_key(self, instance) -> str:
        dp = instance.DEPLOYMENT_PATH
        return f"{dp}.{self.name}"

    def __get__(self, instance, owner):
        if instance is None:
            return self

        return instance.attributes.get(self.get_key(instance), self.default)


class ResourceBoolAttrRODeploymentPath(ResourceAttrRODeploymentPath):
    TRUE_VALUES = {"true", "yes", "y"}
    FALSE_VALUES = {"false", "no", "n"}

    def __get__(self, instance, owner):
        val = super().__get__(instance, owner)
        if val is self or val is self.default or not isinstance(val, str):
            return val
        if val.lower() in self.TRUE_VALUES:
            return True
        if val.lower() in self.FALSE_VALUES:
            return False
        raise ValueError(f"{self.name} is boolean attr, but value is {val}")


class ResourceListAttrRODeploymentPath(ResourceAttrRODeploymentPath):
    def __init__(self, name, sep=";", default=None):
        if default is None:
            default = []
        super().__init__(name, default)
        self._sep = sep

    def __get__(self, instance, owner):
        val = super().__get__(instance, owner)
        if val is self or val is self.default or not isinstance(val, str):
            return val
        return list(filter(bool, map(str.strip, val.split(self._sep))))


class IncorrectHddSpecFormat(BaseVCenterException):
    def __init__(self, text: str):
        self.text = text
        super().__init__(
            f"'{text}' is not a valid HDD format. Should be "
            f"Hard Disk Label: Disk Size (GB)"
        )


class ResourceIntAttrRODeploymentPath(ResourceAttrRODeploymentPath):
    def __get__(self, instance, owner) -> int:
        val = super().__get__(instance, owner)
        if val is self or val is self.default:
            return val
        return int(val) if val else None


class ResourceFloatAttrRODeploymentPath(ResourceAttrRODeploymentPath):
    def __get__(self, instance, owner) -> float:
        val = super().__get__(instance, owner)
        if val is self or val is self.default:
            return val
        return float(val) if val else None


class HddSpecsAttrRO(ResourceListAttrRODeploymentPath):
    def __get__(self, instance, owner) -> list[HddSpec]:
        val = super().__get__(instance, owner)
        if isinstance(val, list):
            val = list(map(HddSpec.from_str, val))
        return val


@define
class HddSpec:
    num: int
    size: float = field(order=False)

    @classmethod
    def from_str(cls, text: str) -> HddSpec:
        try:
            num, size = text.split(":")
            num = int(re.search(r"\d+", num).group())
            size = float(size)
        except ValueError:
            raise IncorrectHddSpecFormat(text)
        return cls(num, size)

    @property
    def size_in_kb(self) -> int:
        return int(self.size * 2**20)
