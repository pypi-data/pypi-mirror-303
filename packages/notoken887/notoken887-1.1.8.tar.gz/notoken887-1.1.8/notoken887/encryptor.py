class TokenCryptor:
    base_replacement_table = {
        'a': '©',
        'b': 'ℓ',
        'c': '∑',
        'd': '∆',
        'e': 'ƒ',
        'f': '◊',
        'g': '♥',
        'h': '♦',
        'i': '♦',
        'j': '♣',
        'k': '♠',
        'l': '✿',
        'm': '✵',
        'n': '✦',
        'o': '✧',
        'p': '★',
        'q': '✩',
        'r': '✪',
        's': '✬',
        't': '✭',
        'u': '✮',
        'v': '✯',
        'w': '✰',
        'x': '✱',
        'y': '✲',
        'z': '✳',
        '0': '⊕',
        '1': '⊗',
        '2': '⊖',
        '3': '⊙',
        '4': '⊚',
        '5': '⊛',
        '6': '⊜',
        '7': '⊝',
        '8': '⊞',
        '9': '⊟',
        'A': 'Ω',
        'B': 'Θ',
        'C': 'Ξ',
        'D': 'Π',
        'E': 'Λ',
        'F': 'Γ',
        'G': 'Φ',
        'H': 'Ψ',
        'I': 'Σ',
        'J': 'Τ',
        'K': 'Δ',
        'L': 'Λ',
        'M': 'Γ',
        'N': 'β',
        'O': 'η',
        'P': 'σ',
        'Q': 'τ',
        'R': 'χ',
        'S': 'ζ',
        'T': 'ρ',
        'U': 'γ',
        'V': 'θ',
        'W': 'λ',
        'X': 'ψ',
        'Y': 'μ',
        'Z': 'ν',
    }

    level2_replacement_table = {
        '©': '✱',
        'ℓ': '✲',
        '∑': '✳',
        '∆': '⊕',
        'ƒ': '⊖',
        '◊': '⊙',
        '♥': '⊚',
        '♦': '⊛',
        '♣': '⊜',
        '♠': '⊝',
        '✿': '⊞',
        '✵': '⊟',
        '✦': '♀',
        '✧': '♂',
        '★': '♠',
        '✩': '♣',
        '✪': '♥',
        '✬': '♦',
        '✭': '∞',
        '✮': '∑',
        '✯': 'τ',
        '✰': 'χ',
        '✱': 'ζ',
        '✲': 'ρ',
        '✳': 'γ',
        '⊕': 'Δ',
        '⊗': 'Φ',
        '⊖': 'Σ',
        '⊙': 'Ω',
        '⊚': 'Λ',
        '⊛': 'Γ',
        '⊜': 'Ψ',
        '⊝': 'Τ',
        '⊞': 'Β',
        '⊟': 'Ζ',
        'Ω': 'Ψ',
        'Θ': 'Β',
        'Ξ': 'Ψ',
        'Π': 'Φ',
        'Λ': 'Γ',
        'Γ': 'Σ',
        'Φ': 'Δ',
        'Ψ': 'Γ',
        'Σ': 'Θ',
        'Τ': 'Γ',
        'Δ': 'λ',
        'β': 'β',
        'η': 'η',
        'σ': 'σ',
        'τ': 'τ',
        'χ': 'χ',
        'ζ': 'ζ',
        'ρ': 'ρ',
        'γ': 'γ',
        'θ': 'θ',
        'λ': 'λ',
        'ψ': 'ψ',
        'μ': 'μ',
        'ν': 'ν',
    }

    level3_replacement_table = {
        '✱': '✦',
        '✲': '✧',
        '✳': '✩',
        '⊕': '✪',
        '⊖': '✬',
        '⊙': '✭',
        '⊚': '✮',
        '⊛': '✯',
        '⊜': '✰',
        '⊝': '✱',
        '⊞': '✲',
        '⊟': '✳',
        '♀': '♀',
        '♂': '♂',
        '♠': '♠',
        '♣': '♣',
        '♥': '♥',
        '♦': '♦',
        '∞': '∞',
        '∑': '∑',
        'τ': 'τ',
        'χ': 'χ',
        'ζ': 'ζ',
        'ρ': 'ρ',
        'γ': 'γ',
        'θ': 'θ',
        'λ': 'λ',
        'ψ': 'ψ',
        'μ': 'μ',
        'ν': 'ν',
        'Δ': 'Δ',
        'Φ': 'Φ',
        'Σ': 'Σ',
        'Ω': 'Ω',
        'Β': 'Β',
        'Ζ': 'Ζ',
    }

    level4_replacement_table = {
        '✦': '✵',
        '✧': '✷',
        '✩': '✧',
        '✪': '✲',
        '✬': '✳',
        '✭': '✰',
        '✮': '✵',
        '✯': '✻',
        '✰': '✮',
        '♠': '♣',
        '♣': '♦',
        '♥': '♥',
        '♦': '⌂',
        '♀': '♂',
        '♂': '♀',
        'Ω': '╡',
        'Φ': '╔',
        'Σ': '╚',
        'Δ': '╩',
        'Γ': '╣',
        'Ψ': '╝',
        'ζ': '═',
        'ρ': '╚',
        'γ': '╦',
        'θ': '╩',
        'λ': '╠',
        'ψ': '╬',
        'μ': '╣',
        'ν': '╔',
    }

    def encrypt(self, token, levels=1):
        transformed = token
        for level in range(levels):
            if level == 0:
                replacement_table = self.base_replacement_table
            elif level == 1:
                replacement_table = self.level2_replacement_table
            elif level == 2:
                replacement_table = self.level3_replacement_table
            elif level == 3:
                replacement_table = self.level4_replacement_table
            
            transformed = ''.join(replacement_table.get(char, char) for char in transformed)
            transformed = transformed[::-1]
        return f"ENC#{transformed}"

    def decrypt(self, encrypted_token, levels=1):
        token = encrypted_token[4:]
        for level in range(levels):
            token = token[::-1]
            if level == 0:
                reversed_table = {v: k for k, v in self.base_replacement_table.items()}
            elif level == 1:
                reversed_table = {v: k for k, v in self.level2_replacement_table.items()}
            elif level == 2:
                reversed_table = {v: k for k, v in self.level3_replacement_table.items()}
            elif level == 3:
                reversed_table = {v: k for k, v in self.level4_replacement_table.items()}
            token = ''.join(reversed_table.get(char, char) for char in token)
        return token
