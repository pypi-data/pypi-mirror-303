from datetime import date, datetime
from enum import Enum, IntEnum
from re import search
from typing import Dict, List, Tuple, Union
from uuid import UUID

try:
    from zoneinfo import ZoneInfo
except ImportError:
    from backports.zoneinfo import ZoneInfo  # type: ignore


# For potential future use.
CLICKHOUSE_DTYPES: Dict[str, type] = {
    "AggregateFunction": str,
    "Array": list,
    "BIGINT": int,
    "BIGINT SIGNED": int,
    "BIGINT UNSIGNED": int,
    "BINARY": str,
    "BINARY LARGE OBJECT": str,
    "BINARY VARYING": str,
    "BIT": int,
    "BLOB": str,
    "BYTE": int,
    "BYTEA": str,
    "Bool": bool,
    "bool": bool,
    "boolean": bool,
    "CHAR": str,
    "CHAR LARGE OBJECT": str,
    "CHAR VARYING": str,
    "CHARACTER": str,
    "CHARACTER LARGE OBJECT": str,
    "CHARACTER VARYING": str,
    "CLOB": str,
    "DEC": float,
    "DOUBLE": float,
    "DOUBLE PRECISION": float,
    "Date": date,
    "Date32": date,
    "DateTime": datetime,
    "DateTime32": datetime,
    "DateTime64": datetime,
    "Decimal": float,
    "Decimal128": float,
    "Decimal256": float,
    "Decimal32": float,
    "Decimal64": float,
    "ENUM": Enum,
    "Enum": Enum,
    "Enum16": IntEnum,
    "Enum8": IntEnum,
    "FIXED": float,
    "FLOAT": float,
    "FixedString": str,
    "Float32": float,
    "Float64": float,
    "GEOMETRY": str,
    "INET4": str,
    "INET6": str,
    "INT": int,
    "INT SIGNED": int,
    "INT UNSIGNED": int,
    "INT1": int,
    "INT1 SIGNED": int,
    "INT1 UNSIGNED": int,
    "INTEGER": int,
    "INTEGER SIGNED": int,
    "INTEGER UNSIGNED": int,
    "IPv4": str,
    "IPv6": str,
    "Int128": int,
    "Int16": int,
    "Int256": int,
    "Int32": int,
    "Int64": int,
    "Int8": int,
    "IntervalDay": int,
    "IntervalHour": int,
    "IntervalMicrosecond": int,
    "IntervalMillisecond": int,
    "IntervalMinute": int,
    "IntervalMonth": int,
    "IntervalNanosecond": int,
    "IntervalQuarter": int,
    "IntervalSecond": int,
    "IntervalWeek": int,
    "IntervalYear": int,
    "JSON": str,
    "LONGBLOB": str,
    "LONGTEXT": str,
    "LowCardinality": Enum,
    "MEDIUMBLOB": str,
    "MEDIUMINT": int,
    "MEDIUMINT SIGNED": int,
    "MEDIUMINT UNSIGNED": int,
    "MEDIUMTEXT": str,
    "Map": Dict,
    "MultiPolygon": List[List[List[Tuple[float, float]]]],
    "NATIONAL CHAR": str,
    "NATIONAL CHAR VARYING": str,
    "NATIONAL CHARACTER": str,
    "NATIONAL CHARACTER LARGE OBJECT": str,
    "NATIONAL CHARACTER VARYING": str,
    "NCHAR": str,
    "NCHAR LARGE OBJECT": str,
    "NCHAR VARYING": str,
    "NUMERIC": float,
    "NVARCHAR": str,
    "Nested": object,
    "Nothing": None,
    "Nullable": Enum,
    "Object": object,
    "Point": Tuple[float, float],
    "Polygon": List[List[Tuple[float, float]]],
    "REAL": float,
    "Ring": List[Tuple[float, float]],
    "SET": int,
    "SINGLE": float,
    "SMALLINT": int,
    "SMALLINT SIGNED": int,
    "SMALLINT UNSIGNED": int,
    "SimpleAggregateFunction": str,
    "String": str,
    "TEXT": str,
    "TIME": int,
    "TIMESTAMP": datetime,
    "TINYBLOB": str,
    "TINYINT": int,
    "TINYINT SIGNED": int,
    "TINYINT UNSIGNED": int,
    "TINYTEXT": str,
    "Tuple": list,
    "UInt128": int,
    "UInt16": int,
    "UInt256": int,
    "UInt32": int,
    "UInt64": int,
    "UInt8": int,
    "UUID": UUID,
    "VARBINARY": str,
    "VARCHAR": str,
    "VARCHAR2": str,
    "YEAR": int,
}


def dt_detect(dtype: str) -> Union[date, datetime, ZoneInfo]:
    """Determine the data type related to datetime."""

    if dtype.startswith("Nullable"):
        return dt_detect(search(r"Nullable\((.*?)\)", dtype).group(1))

    if dtype in ("Date", "Date32",):
        return date
    elif dtype in ("DateTime", "DateTime32", "DateTime64", "TIMESTAMP",):
        return datetime
    elif dtype.startswith("DateTime"):
        return ZoneInfo(search(r"\(.*?'(.*?)'\)", dtype).group(1))
