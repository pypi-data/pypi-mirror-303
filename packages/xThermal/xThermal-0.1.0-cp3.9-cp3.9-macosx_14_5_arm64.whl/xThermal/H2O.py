# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _H2O
else:
    import _H2O

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _H2O.delete_SwigPyIterator

    def value(self):
        return _H2O.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _H2O.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _H2O.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _H2O.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _H2O.SwigPyIterator_equal(self, x)

    def copy(self):
        return _H2O.SwigPyIterator_copy(self)

    def next(self):
        return _H2O.SwigPyIterator_next(self)

    def __next__(self):
        return _H2O.SwigPyIterator___next__(self)

    def previous(self):
        return _H2O.SwigPyIterator_previous(self)

    def advance(self, n):
        return _H2O.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _H2O.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _H2O.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _H2O.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _H2O.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _H2O.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _H2O.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _H2O:
_H2O.SwigPyIterator_swigregister(SwigPyIterator)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2O.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2O.IntVector___nonzero__(self)

    def __bool__(self):
        return _H2O.IntVector___bool__(self)

    def __len__(self):
        return _H2O.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _H2O.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2O.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2O.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2O.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2O.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2O.IntVector___setitem__(self, *args)

    def pop(self):
        return _H2O.IntVector_pop(self)

    def append(self, x):
        return _H2O.IntVector_append(self, x)

    def empty(self):
        return _H2O.IntVector_empty(self)

    def size(self):
        return _H2O.IntVector_size(self)

    def swap(self, v):
        return _H2O.IntVector_swap(self, v)

    def begin(self):
        return _H2O.IntVector_begin(self)

    def end(self):
        return _H2O.IntVector_end(self)

    def rbegin(self):
        return _H2O.IntVector_rbegin(self)

    def rend(self):
        return _H2O.IntVector_rend(self)

    def clear(self):
        return _H2O.IntVector_clear(self)

    def get_allocator(self):
        return _H2O.IntVector_get_allocator(self)

    def pop_back(self):
        return _H2O.IntVector_pop_back(self)

    def erase(self, *args):
        return _H2O.IntVector_erase(self, *args)

    def __init__(self, *args):
        _H2O.IntVector_swiginit(self, _H2O.new_IntVector(*args))

    def push_back(self, x):
        return _H2O.IntVector_push_back(self, x)

    def front(self):
        return _H2O.IntVector_front(self)

    def back(self):
        return _H2O.IntVector_back(self)

    def assign(self, n, x):
        return _H2O.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _H2O.IntVector_resize(self, *args)

    def insert(self, *args):
        return _H2O.IntVector_insert(self, *args)

    def reserve(self, n):
        return _H2O.IntVector_reserve(self, n)

    def capacity(self):
        return _H2O.IntVector_capacity(self)
    __swig_destroy__ = _H2O.delete_IntVector

# Register IntVector in _H2O:
_H2O.IntVector_swigregister(IntVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2O.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2O.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _H2O.DoubleVector___bool__(self)

    def __len__(self):
        return _H2O.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _H2O.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2O.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2O.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2O.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2O.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2O.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _H2O.DoubleVector_pop(self)

    def append(self, x):
        return _H2O.DoubleVector_append(self, x)

    def empty(self):
        return _H2O.DoubleVector_empty(self)

    def size(self):
        return _H2O.DoubleVector_size(self)

    def swap(self, v):
        return _H2O.DoubleVector_swap(self, v)

    def begin(self):
        return _H2O.DoubleVector_begin(self)

    def end(self):
        return _H2O.DoubleVector_end(self)

    def rbegin(self):
        return _H2O.DoubleVector_rbegin(self)

    def rend(self):
        return _H2O.DoubleVector_rend(self)

    def clear(self):
        return _H2O.DoubleVector_clear(self)

    def get_allocator(self):
        return _H2O.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _H2O.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _H2O.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _H2O.DoubleVector_swiginit(self, _H2O.new_DoubleVector(*args))

    def push_back(self, x):
        return _H2O.DoubleVector_push_back(self, x)

    def front(self):
        return _H2O.DoubleVector_front(self)

    def back(self):
        return _H2O.DoubleVector_back(self)

    def assign(self, n, x):
        return _H2O.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _H2O.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _H2O.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _H2O.DoubleVector_reserve(self, n)

    def capacity(self):
        return _H2O.DoubleVector_capacity(self)
    __swig_destroy__ = _H2O.delete_DoubleVector

# Register DoubleVector in _H2O:
_H2O.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2O.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2O.StringVector___nonzero__(self)

    def __bool__(self):
        return _H2O.StringVector___bool__(self)

    def __len__(self):
        return _H2O.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _H2O.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2O.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2O.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2O.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2O.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2O.StringVector___setitem__(self, *args)

    def pop(self):
        return _H2O.StringVector_pop(self)

    def append(self, x):
        return _H2O.StringVector_append(self, x)

    def empty(self):
        return _H2O.StringVector_empty(self)

    def size(self):
        return _H2O.StringVector_size(self)

    def swap(self, v):
        return _H2O.StringVector_swap(self, v)

    def begin(self):
        return _H2O.StringVector_begin(self)

    def end(self):
        return _H2O.StringVector_end(self)

    def rbegin(self):
        return _H2O.StringVector_rbegin(self)

    def rend(self):
        return _H2O.StringVector_rend(self)

    def clear(self):
        return _H2O.StringVector_clear(self)

    def get_allocator(self):
        return _H2O.StringVector_get_allocator(self)

    def pop_back(self):
        return _H2O.StringVector_pop_back(self)

    def erase(self, *args):
        return _H2O.StringVector_erase(self, *args)

    def __init__(self, *args):
        _H2O.StringVector_swiginit(self, _H2O.new_StringVector(*args))

    def push_back(self, x):
        return _H2O.StringVector_push_back(self, x)

    def front(self):
        return _H2O.StringVector_front(self)

    def back(self):
        return _H2O.StringVector_back(self)

    def assign(self, n, x):
        return _H2O.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _H2O.StringVector_resize(self, *args)

    def insert(self, *args):
        return _H2O.StringVector_insert(self, *args)

    def reserve(self, n):
        return _H2O.StringVector_reserve(self, n)

    def capacity(self):
        return _H2O.StringVector_capacity(self)
    __swig_destroy__ = _H2O.delete_StringVector

# Register StringVector in _H2O:
_H2O.StringVector_swigregister(StringVector)
class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2O.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2O.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _H2O.ConstCharVector___bool__(self)

    def __len__(self):
        return _H2O.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _H2O.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2O.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2O.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2O.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2O.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2O.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _H2O.ConstCharVector_pop(self)

    def append(self, x):
        return _H2O.ConstCharVector_append(self, x)

    def empty(self):
        return _H2O.ConstCharVector_empty(self)

    def size(self):
        return _H2O.ConstCharVector_size(self)

    def swap(self, v):
        return _H2O.ConstCharVector_swap(self, v)

    def begin(self):
        return _H2O.ConstCharVector_begin(self)

    def end(self):
        return _H2O.ConstCharVector_end(self)

    def rbegin(self):
        return _H2O.ConstCharVector_rbegin(self)

    def rend(self):
        return _H2O.ConstCharVector_rend(self)

    def clear(self):
        return _H2O.ConstCharVector_clear(self)

    def get_allocator(self):
        return _H2O.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _H2O.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _H2O.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _H2O.ConstCharVector_swiginit(self, _H2O.new_ConstCharVector(*args))

    def push_back(self, x):
        return _H2O.ConstCharVector_push_back(self, x)

    def front(self):
        return _H2O.ConstCharVector_front(self)

    def back(self):
        return _H2O.ConstCharVector_back(self)

    def assign(self, n, x):
        return _H2O.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _H2O.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _H2O.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _H2O.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _H2O.ConstCharVector_capacity(self)
    __swig_destroy__ = _H2O.delete_ConstCharVector

# Register ConstCharVector in _H2O:
_H2O.ConstCharVector_swigregister(ConstCharVector)
class UnsignedLongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2O.UnsignedLongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2O.UnsignedLongVector___nonzero__(self)

    def __bool__(self):
        return _H2O.UnsignedLongVector___bool__(self)

    def __len__(self):
        return _H2O.UnsignedLongVector___len__(self)

    def __getslice__(self, i, j):
        return _H2O.UnsignedLongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2O.UnsignedLongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2O.UnsignedLongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2O.UnsignedLongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2O.UnsignedLongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2O.UnsignedLongVector___setitem__(self, *args)

    def pop(self):
        return _H2O.UnsignedLongVector_pop(self)

    def append(self, x):
        return _H2O.UnsignedLongVector_append(self, x)

    def empty(self):
        return _H2O.UnsignedLongVector_empty(self)

    def size(self):
        return _H2O.UnsignedLongVector_size(self)

    def swap(self, v):
        return _H2O.UnsignedLongVector_swap(self, v)

    def begin(self):
        return _H2O.UnsignedLongVector_begin(self)

    def end(self):
        return _H2O.UnsignedLongVector_end(self)

    def rbegin(self):
        return _H2O.UnsignedLongVector_rbegin(self)

    def rend(self):
        return _H2O.UnsignedLongVector_rend(self)

    def clear(self):
        return _H2O.UnsignedLongVector_clear(self)

    def get_allocator(self):
        return _H2O.UnsignedLongVector_get_allocator(self)

    def pop_back(self):
        return _H2O.UnsignedLongVector_pop_back(self)

    def erase(self, *args):
        return _H2O.UnsignedLongVector_erase(self, *args)

    def __init__(self, *args):
        _H2O.UnsignedLongVector_swiginit(self, _H2O.new_UnsignedLongVector(*args))

    def push_back(self, x):
        return _H2O.UnsignedLongVector_push_back(self, x)

    def front(self):
        return _H2O.UnsignedLongVector_front(self)

    def back(self):
        return _H2O.UnsignedLongVector_back(self)

    def assign(self, n, x):
        return _H2O.UnsignedLongVector_assign(self, n, x)

    def resize(self, *args):
        return _H2O.UnsignedLongVector_resize(self, *args)

    def insert(self, *args):
        return _H2O.UnsignedLongVector_insert(self, *args)

    def reserve(self, n):
        return _H2O.UnsignedLongVector_reserve(self, n)

    def capacity(self):
        return _H2O.UnsignedLongVector_capacity(self)
    __swig_destroy__ = _H2O.delete_UnsignedLongVector

# Register UnsignedLongVector in _H2O:
_H2O.UnsignedLongVector_swigregister(UnsignedLongVector)
MixPhaseRegion = _H2O.MixPhaseRegion
r""" MixPhaseRegion is used in AMR lookup table."""
SinglePhase_L = _H2O.SinglePhase_L
r""" Single phase: liquid. Regard single-phase "liquid-like" and "vapor-like" fluid as "Single phase liquid" as well."""
SinglePhase_V = _H2O.SinglePhase_V
r""" Single phase: vapor"""
SinglePhase_S = _H2O.SinglePhase_S
r""" Single phase: solid, e.g. NaCl"""
Supercritical = _H2O.Supercritical
r""" Supercritical (p > pc, T > Tc) for pure water"""
Supercritical_vapor = _H2O.Supercritical_vapor
r""" Supercritical vapor (p < pc, T > Tc) for pure water"""
Supercritical_liquid = _H2O.Supercritical_liquid
r""" Supercritical liquid (p > pc, T < Tc) for pure water"""
Critical = _H2O.Critical
r""" At the critical point of pure water or on critical curve of H2ONaCl"""
TwoPhase_VL_Water = _H2O.TwoPhase_VL_Water
r""" Two phase: liquid + vapor, salinity = 0"""
TwoPhase_LH = _H2O.TwoPhase_LH
r""" Two phase: liquid + halite"""
TwoPhase_VH = _H2O.TwoPhase_VH
r""" Two phase: vapor + halite"""
TwoPhase_VL = _H2O.TwoPhase_VL
r""" Two phase: VL region"""
ThreePhase_VLH = _H2O.ThreePhase_VLH
r""" Three phase: vapor + liquid + halite"""
UnknownPhase = _H2O.UnknownPhase
r""" UnknownPhase phase region for bug report"""
NotImposed = _H2O.NotImposed
r""" Phase is not imposed"""
class ThermodynamicProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_H2O.ThermodynamicProperties_T_get, _H2O.ThermodynamicProperties_T_set)
    p = property(_H2O.ThermodynamicProperties_p_get, _H2O.ThermodynamicProperties_p_set)
    X = property(_H2O.ThermodynamicProperties_X_get, _H2O.ThermodynamicProperties_X_set)
    H = property(_H2O.ThermodynamicProperties_H_get, _H2O.ThermodynamicProperties_H_set)
    phase = property(_H2O.ThermodynamicProperties_phase_get, _H2O.ThermodynamicProperties_phase_set)
    S_l = property(_H2O.ThermodynamicProperties_S_l_get, _H2O.ThermodynamicProperties_S_l_set)
    S_v = property(_H2O.ThermodynamicProperties_S_v_get, _H2O.ThermodynamicProperties_S_v_set)
    S_h = property(_H2O.ThermodynamicProperties_S_h_get, _H2O.ThermodynamicProperties_S_h_set)
    X_l = property(_H2O.ThermodynamicProperties_X_l_get, _H2O.ThermodynamicProperties_X_l_set)
    X_v = property(_H2O.ThermodynamicProperties_X_v_get, _H2O.ThermodynamicProperties_X_v_set)
    Rho_l = property(_H2O.ThermodynamicProperties_Rho_l_get, _H2O.ThermodynamicProperties_Rho_l_set)
    Rho_v = property(_H2O.ThermodynamicProperties_Rho_v_get, _H2O.ThermodynamicProperties_Rho_v_set)
    Rho_h = property(_H2O.ThermodynamicProperties_Rho_h_get, _H2O.ThermodynamicProperties_Rho_h_set)
    H_l = property(_H2O.ThermodynamicProperties_H_l_get, _H2O.ThermodynamicProperties_H_l_set)
    H_v = property(_H2O.ThermodynamicProperties_H_v_get, _H2O.ThermodynamicProperties_H_v_set)
    H_h = property(_H2O.ThermodynamicProperties_H_h_get, _H2O.ThermodynamicProperties_H_h_set)
    Cp_l = property(_H2O.ThermodynamicProperties_Cp_l_get, _H2O.ThermodynamicProperties_Cp_l_set)
    Cp_v = property(_H2O.ThermodynamicProperties_Cp_v_get, _H2O.ThermodynamicProperties_Cp_v_set)
    Cp_h = property(_H2O.ThermodynamicProperties_Cp_h_get, _H2O.ThermodynamicProperties_Cp_h_set)
    Mu_l = property(_H2O.ThermodynamicProperties_Mu_l_get, _H2O.ThermodynamicProperties_Mu_l_set)
    Mu_v = property(_H2O.ThermodynamicProperties_Mu_v_get, _H2O.ThermodynamicProperties_Mu_v_set)
    Rho = property(_H2O.ThermodynamicProperties_Rho_get, _H2O.ThermodynamicProperties_Rho_set)
    Cp = property(_H2O.ThermodynamicProperties_Cp_get, _H2O.ThermodynamicProperties_Cp_set)
    Mu = property(_H2O.ThermodynamicProperties_Mu_get, _H2O.ThermodynamicProperties_Mu_set)
    dRhodP = property(_H2O.ThermodynamicProperties_dRhodP_get, _H2O.ThermodynamicProperties_dRhodP_set)
    dRhodP_l = property(_H2O.ThermodynamicProperties_dRhodP_l_get, _H2O.ThermodynamicProperties_dRhodP_l_set)
    dRhodP_v = property(_H2O.ThermodynamicProperties_dRhodP_v_get, _H2O.ThermodynamicProperties_dRhodP_v_set)
    dRhodT = property(_H2O.ThermodynamicProperties_dRhodT_get, _H2O.ThermodynamicProperties_dRhodT_set)
    dRhodT_l = property(_H2O.ThermodynamicProperties_dRhodT_l_get, _H2O.ThermodynamicProperties_dRhodT_l_set)
    dRhodT_v = property(_H2O.ThermodynamicProperties_dRhodT_v_get, _H2O.ThermodynamicProperties_dRhodT_v_set)
    IsothermalCompressibility = property(_H2O.ThermodynamicProperties_IsothermalCompressibility_get, _H2O.ThermodynamicProperties_IsothermalCompressibility_set)
    IsothermalCompressibility_l = property(_H2O.ThermodynamicProperties_IsothermalCompressibility_l_get, _H2O.ThermodynamicProperties_IsothermalCompressibility_l_set)
    IsothermalCompressibility_v = property(_H2O.ThermodynamicProperties_IsothermalCompressibility_v_get, _H2O.ThermodynamicProperties_IsothermalCompressibility_v_set)
    IsobaricExpansivity = property(_H2O.ThermodynamicProperties_IsobaricExpansivity_get, _H2O.ThermodynamicProperties_IsobaricExpansivity_set)
    IsobaricExpansivity_l = property(_H2O.ThermodynamicProperties_IsobaricExpansivity_l_get, _H2O.ThermodynamicProperties_IsobaricExpansivity_l_set)
    IsobaricExpansivity_v = property(_H2O.ThermodynamicProperties_IsobaricExpansivity_v_get, _H2O.ThermodynamicProperties_IsobaricExpansivity_v_set)
    fluidName = property(_H2O.ThermodynamicProperties_fluidName_get, _H2O.ThermodynamicProperties_fluidName_set)

    def info(self, _self):
        return _H2O.ThermodynamicProperties_info(self, _self)

    def __str__(self):
        return _H2O.ThermodynamicProperties___str__(self)

    def __init__(self):
        _H2O.ThermodynamicProperties_swiginit(self, _H2O.new_ThermodynamicProperties())
    __swig_destroy__ = _H2O.delete_ThermodynamicProperties

# Register ThermodynamicProperties in _H2O:
_H2O.ThermodynamicProperties_swigregister(ThermodynamicProperties)
class ThermodynamicPropertiesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_H2O.ThermodynamicPropertiesVector_T_get, _H2O.ThermodynamicPropertiesVector_T_set)
    p = property(_H2O.ThermodynamicPropertiesVector_p_get, _H2O.ThermodynamicPropertiesVector_p_set)
    X = property(_H2O.ThermodynamicPropertiesVector_X_get, _H2O.ThermodynamicPropertiesVector_X_set)
    H = property(_H2O.ThermodynamicPropertiesVector_H_get, _H2O.ThermodynamicPropertiesVector_H_set)
    phase = property(_H2O.ThermodynamicPropertiesVector_phase_get, _H2O.ThermodynamicPropertiesVector_phase_set)
    S_l = property(_H2O.ThermodynamicPropertiesVector_S_l_get, _H2O.ThermodynamicPropertiesVector_S_l_set)
    S_v = property(_H2O.ThermodynamicPropertiesVector_S_v_get, _H2O.ThermodynamicPropertiesVector_S_v_set)
    S_h = property(_H2O.ThermodynamicPropertiesVector_S_h_get, _H2O.ThermodynamicPropertiesVector_S_h_set)
    X_l = property(_H2O.ThermodynamicPropertiesVector_X_l_get, _H2O.ThermodynamicPropertiesVector_X_l_set)
    X_v = property(_H2O.ThermodynamicPropertiesVector_X_v_get, _H2O.ThermodynamicPropertiesVector_X_v_set)
    Rho_l = property(_H2O.ThermodynamicPropertiesVector_Rho_l_get, _H2O.ThermodynamicPropertiesVector_Rho_l_set)
    Rho_v = property(_H2O.ThermodynamicPropertiesVector_Rho_v_get, _H2O.ThermodynamicPropertiesVector_Rho_v_set)
    Rho_h = property(_H2O.ThermodynamicPropertiesVector_Rho_h_get, _H2O.ThermodynamicPropertiesVector_Rho_h_set)
    H_l = property(_H2O.ThermodynamicPropertiesVector_H_l_get, _H2O.ThermodynamicPropertiesVector_H_l_set)
    H_v = property(_H2O.ThermodynamicPropertiesVector_H_v_get, _H2O.ThermodynamicPropertiesVector_H_v_set)
    H_h = property(_H2O.ThermodynamicPropertiesVector_H_h_get, _H2O.ThermodynamicPropertiesVector_H_h_set)
    Cp_l = property(_H2O.ThermodynamicPropertiesVector_Cp_l_get, _H2O.ThermodynamicPropertiesVector_Cp_l_set)
    Cp_v = property(_H2O.ThermodynamicPropertiesVector_Cp_v_get, _H2O.ThermodynamicPropertiesVector_Cp_v_set)
    Cp_h = property(_H2O.ThermodynamicPropertiesVector_Cp_h_get, _H2O.ThermodynamicPropertiesVector_Cp_h_set)
    Mu_l = property(_H2O.ThermodynamicPropertiesVector_Mu_l_get, _H2O.ThermodynamicPropertiesVector_Mu_l_set)
    Mu_v = property(_H2O.ThermodynamicPropertiesVector_Mu_v_get, _H2O.ThermodynamicPropertiesVector_Mu_v_set)
    Rho = property(_H2O.ThermodynamicPropertiesVector_Rho_get, _H2O.ThermodynamicPropertiesVector_Rho_set)
    Cp = property(_H2O.ThermodynamicPropertiesVector_Cp_get, _H2O.ThermodynamicPropertiesVector_Cp_set)
    Mu = property(_H2O.ThermodynamicPropertiesVector_Mu_get, _H2O.ThermodynamicPropertiesVector_Mu_set)
    dRhodP = property(_H2O.ThermodynamicPropertiesVector_dRhodP_get, _H2O.ThermodynamicPropertiesVector_dRhodP_set)
    dRhodP_l = property(_H2O.ThermodynamicPropertiesVector_dRhodP_l_get, _H2O.ThermodynamicPropertiesVector_dRhodP_l_set)
    dRhodP_v = property(_H2O.ThermodynamicPropertiesVector_dRhodP_v_get, _H2O.ThermodynamicPropertiesVector_dRhodP_v_set)
    dRhodT = property(_H2O.ThermodynamicPropertiesVector_dRhodT_get, _H2O.ThermodynamicPropertiesVector_dRhodT_set)
    dRhodT_l = property(_H2O.ThermodynamicPropertiesVector_dRhodT_l_get, _H2O.ThermodynamicPropertiesVector_dRhodT_l_set)
    dRhodT_v = property(_H2O.ThermodynamicPropertiesVector_dRhodT_v_get, _H2O.ThermodynamicPropertiesVector_dRhodT_v_set)
    IsothermalCompressibility = property(_H2O.ThermodynamicPropertiesVector_IsothermalCompressibility_get, _H2O.ThermodynamicPropertiesVector_IsothermalCompressibility_set)
    IsothermalCompressibility_l = property(_H2O.ThermodynamicPropertiesVector_IsothermalCompressibility_l_get, _H2O.ThermodynamicPropertiesVector_IsothermalCompressibility_l_set)
    IsothermalCompressibility_v = property(_H2O.ThermodynamicPropertiesVector_IsothermalCompressibility_v_get, _H2O.ThermodynamicPropertiesVector_IsothermalCompressibility_v_set)
    IsobaricExpansivity = property(_H2O.ThermodynamicPropertiesVector_IsobaricExpansivity_get, _H2O.ThermodynamicPropertiesVector_IsobaricExpansivity_set)
    IsobaricExpansivity_l = property(_H2O.ThermodynamicPropertiesVector_IsobaricExpansivity_l_get, _H2O.ThermodynamicPropertiesVector_IsobaricExpansivity_l_set)
    IsobaricExpansivity_v = property(_H2O.ThermodynamicPropertiesVector_IsobaricExpansivity_v_get, _H2O.ThermodynamicPropertiesVector_IsobaricExpansivity_v_set)
    fluidName = property(_H2O.ThermodynamicPropertiesVector_fluidName_get, _H2O.ThermodynamicPropertiesVector_fluidName_set)

    def info(self, _self):
        return _H2O.ThermodynamicPropertiesVector_info(self, _self)

    def __str__(self):
        return _H2O.ThermodynamicPropertiesVector___str__(self)

    def __init__(self):
        _H2O.ThermodynamicPropertiesVector_swiginit(self, _H2O.new_ThermodynamicPropertiesVector())
    __swig_destroy__ = _H2O.delete_ThermodynamicPropertiesVector

# Register ThermodynamicPropertiesVector in _H2O:
_H2O.ThermodynamicPropertiesVector_swigregister(ThermodynamicPropertiesVector)
Fluid_Unknown = _H2O.Fluid_Unknown
FLUID_Water = _H2O.FLUID_Water
FLUID_H2O_NaCl = _H2O.FLUID_H2O_NaCl
class cxThermal(object):
    r"""Top abstract class of the thermodynamic model."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _H2O.delete_cxThermal
    m_isShowProgressBar = property(_H2O.cxThermal_m_isShowProgressBar_get, _H2O.cxThermal_m_isShowProgressBar_set)

    def showProgressBar(self, isShow):
        return _H2O.cxThermal_showProgressBar(self, isShow)

    @staticmethod
    def validateFluid(fluidName):
        return _H2O.cxThermal_validateFluid(fluidName)

    def name(self):
        r""" Name of the model"""
        return _H2O.cxThermal_name(self)

    def Tmin(self):
        r""" Get the minimum temperature in K"""
        return _H2O.cxThermal_Tmin(self)

    def Tmax(self):
        r""" Get the maximum temperature in K"""
        return _H2O.cxThermal_Tmax(self)

    def pmin(self):
        r""" Get the minimum pressure in Pa"""
        return _H2O.cxThermal_pmin(self)

    def pmax(self):
        r""" Get the maximum pressure in Pa"""
        return _H2O.cxThermal_pmax(self)

    def Ttriple(self):
        r""" Get the triple point temperature in K"""
        return _H2O.cxThermal_Ttriple(self)

    def T_critical(self):
        r""" Return the critical temperature in K"""
        return _H2O.cxThermal_T_critical(self)

    def p_critical(self):
        r""" Return the critical pressure in Pa"""
        return _H2O.cxThermal_p_critical(self)

    def rhomass_critical(self):
        r""" Return the critical mass density in :math:`kg/m^3`"""
        return _H2O.cxThermal_rhomass_critical(self)

    def molar_mass(self):
        r""" Return the molar mass in kg/mol"""
        return _H2O.cxThermal_molar_mass(self)

    def rhomolar_critical(self):
        return _H2O.cxThermal_rhomolar_critical(self)

    def phase_name(self, phase_index):
        return _H2O.cxThermal_phase_name(self, phase_index)

    def set_num_threads(self, num_threads):
        return _H2O.cxThermal_set_num_threads(self, num_threads)

    def get_num_threads(self):
        return _H2O.cxThermal_get_num_threads(self)

    def findPhaseRegion_TPX(self, T, p, X=0):
        return _H2O.cxThermal_findPhaseRegion_TPX(self, T, p, X)

    def get_UpdateWhichProps(self):
        return _H2O.cxThermal_get_UpdateWhichProps(self)

    def createLUT_2D(self, *args):
        return _H2O.cxThermal_createLUT_2D(self, *args)

    def createLUT_3D(self, *args):
        return _H2O.cxThermal_createLUT_3D(self, *args)

    def save_lut_to_vtk(self, filename, isNormalizeXYZ=True):
        return _H2O.cxThermal_save_lut_to_vtk(self, filename, isNormalizeXYZ)

    def save_lut_to_binary(self, filename):
        return _H2O.cxThermal_save_lut_to_binary(self, filename)

    def lookup(self, *args):
        return _H2O.cxThermal_lookup(self, *args)

    def lookup_only(self, *args):
        return _H2O.cxThermal_lookup_only(self, *args)

    def loadLUT(self, filename, printStatus=True):
        return _H2O.cxThermal_loadLUT(self, filename, printStatus)

    def get_pLUT(self):
        return _H2O.cxThermal_get_pLUT(self)

    def get_pLUT_lookup(self):
        return _H2O.cxThermal_get_pLUT_lookup(self)

    def get_dim_lut(self):
        return _H2O.cxThermal_get_dim_lut(self)

    def get_dim_lut_lookup(self):
        return _H2O.cxThermal_get_dim_lut_lookup(self)

    def Rho_lookup(self, Rho_estimate, Rho_min, Rho_max, T, P):
        return _H2O.cxThermal_Rho_lookup(self, Rho_estimate, Rho_min, Rho_max, T, P)

    def Boiling_p_rho(self, T, rho_l, rho_v):
        r"""
        Calculate both boiling temperature and density of liquid and vapor phase.
        :type T: float
        :param T: [K]
        :type rho_l: float
        :param rho_l: [kg/m3]
        :type rho_v: float
        :param rho_v: [kg/m3]
        :rtype: float
        :return: 
        """
        return _H2O.cxThermal_Boiling_p_rho(self, T, rho_l, rho_v)

    def Boiling_T_rho(self, p, rho_l, rho_v):
        r"""
        Calculate both boiling temperature and density of liquid and vapor phase.
        :type p: float
        :param p: [Pa]
        :type rho_l: float
        :param rho_l: [kg/m3]
        :type rho_v: float
        :param rho_v: [kg/m3]
        :rtype: float
        :return: 
        """
        return _H2O.cxThermal_Boiling_T_rho(self, p, rho_l, rho_v)

    def Boiling_T(self, *args):
        return _H2O.cxThermal_Boiling_T(self, *args)

    def Boiling_p(self, *args):
        return _H2O.cxThermal_Boiling_p(self, *args)

    def Triangulation(self, x_poly, y_poly, pointInMesh, dxdy, trimesh, normalize=True):
        return _H2O.cxThermal_Triangulation(self, x_poly, y_poly, pointInMesh, dxdy, trimesh, normalize)

    def writeTriMesh2Txt(self, *args):
        return _H2O.cxThermal_writeTriMesh2Txt(self, *args)

    def writeXXYYZZ2VTU(self, vtuFile, XX, YY, ZZ, scale_x=1.0, scale_y=1.0, scale_z=1.0):
        return _H2O.cxThermal_writeXXYYZZ2VTU(self, vtuFile, XX, YY, ZZ, scale_x, scale_y, scale_z)

    def writeLine2VTU(self, vtuFile, X, Y, Z, scale_x=1.0, scale_y=1.0, scale_z=1.0):
        return _H2O.cxThermal_writeLine2VTU(self, vtuFile, X, Y, Z, scale_x, scale_y, scale_z)

    def writePhaseBoundaries2VTU(self, outputPath, phaseBoundaries, scale_T=1, scale_p=1, scale_X=1):
        return _H2O.cxThermal_writePhaseBoundaries2VTU(self, outputPath, phaseBoundaries, scale_T, scale_p, scale_X)

    def normalizePhaseBoundaries(self, phaseBoundaries):
        return _H2O.cxThermal_normalizePhaseBoundaries(self, phaseBoundaries)

    def writeMeshGrid2VTK(self, vtkFile, x, xTitle, y, yTitle, z, zTitle, props, propsInfo, isNormalize=False):
        return _H2O.cxThermal_writeMeshGrid2VTK(self, vtkFile, x, xTitle, y, yTitle, z, zTitle, props, propsInfo, isNormalize)

    def Boiling_p_props(self, T):
        return _H2O.cxThermal_Boiling_p_props(self, T)

    def Boiling_T_props(self, p):
        return _H2O.cxThermal_Boiling_T_props(self, p)

    def UpdateState_TPX(self, *args):
        return _H2O.cxThermal_UpdateState_TPX(self, *args)

    def UpdateState_HPX(self, *args):
        return _H2O.cxThermal_UpdateState_HPX(self, *args)

    def getLutInfo(self, file_lut, printSummary=True):
        return _H2O.cxThermal_getLutInfo(self, file_lut, printSummary)

# Register cxThermal in _H2O:
_H2O.cxThermal_swigregister(cxThermal)
cvar = _H2O.cvar
R = cvar.R


def fill_prop2data(pEOS, prop, update_which_props, data):
    return _H2O.fill_prop2data(pEOS, prop, update_which_props, data)
Name_Backend_IAPS84 = _H2O.Name_Backend_IAPS84
r"""
    Author: Zhikui Guo (zguo.de)
    EOS of H2O in formula of IAPS84 which is based on 'prost'
    Version: 0.1
    2022-03-27

    Copyright: Copyright (c) 2022
    """
class cIAPS84(cxThermal):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _H2O.cIAPS84_swiginit(self, _H2O.new_cIAPS84(*args))
    __swig_destroy__ = _H2O.delete_cIAPS84

    def name(self):
        return _H2O.cIAPS84_name(self)

    def Tmin(self):
        return _H2O.cIAPS84_Tmin(self)

    def Tmax(self):
        return _H2O.cIAPS84_Tmax(self)

    def pmin(self):
        return _H2O.cIAPS84_pmin(self)

    def pmax(self):
        return _H2O.cIAPS84_pmax(self)

    def Ttriple(self):
        return _H2O.cIAPS84_Ttriple(self)

    def T_critical(self):
        return _H2O.cIAPS84_T_critical(self)

    def p_critical(self):
        return _H2O.cIAPS84_p_critical(self)

    def rhomass_critical(self):
        return _H2O.cIAPS84_rhomass_critical(self)

    def molar_mass(self):
        return _H2O.cIAPS84_molar_mass(self)

    def findPhaseRegion_TPX(self, T, p, X=0):
        return _H2O.cIAPS84_findPhaseRegion_TPX(self, T, p, X)

    def UpdateState_TPX(self, T, p, X=0):
        return _H2O.cIAPS84_UpdateState_TPX(self, T, p, X)

    def Boiling_p_rho(self, T, rho_l, rho_v):
        return _H2O.cIAPS84_Boiling_p_rho(self, T, rho_l, rho_v)

    def Boiling_T_rho(self, p, rho_l, rho_v):
        return _H2O.cIAPS84_Boiling_T_rho(self, p, rho_l, rho_v)

    def Boiling_p(self, *args):
        return _H2O.cIAPS84_Boiling_p(self, *args)

    def Boiling_T(self, *args):
        return _H2O.cIAPS84_Boiling_T(self, *args)

# Register cIAPS84 in _H2O:
_H2O.cIAPS84_swigregister(cIAPS84)
Name_Backend_IAPWS95 = _H2O.Name_Backend_IAPWS95
Update_phi_d = _H2O.Update_phi_d
r""" :math:`2^1`: :math:`\left(\frac{\partial \phi}{\partial \delta} \right)_{\tau}`"""
Update_phi_dd = _H2O.Update_phi_dd
r""" ^2:math:`:` (^2 ^2} )_{:math:``"""
Update_phi_t = _H2O.Update_phi_t
r""" ^3:math:`:` ()_{:math:``"""
Update_phi_tt = _H2O.Update_phi_tt
r""" ^4:math:`:` (^2 ^2} )_{:math:``"""
Update_phi_dt = _H2O.Update_phi_dt
r""" ^5:math:`:` (^2 ) :math:``"""
Update_phi_all = _H2O.Update_phi_all
r""" Update all"""
ITERATION_MAX = _H2O.ITERATION_MAX
r""" Maximum iteration step"""
TOL_Pressure = _H2O.TOL_Pressure
r""" Tolerance for pressure with unit Pa"""
TOL_PTRro = _H2O.TOL_PTRro
r""" Tolerance for solving saturated :math:`T, P, \rho_l, \rho_v` at phase boundary, or for solving :math:`\rho` by given [T,P], or solving T by given [P, H]"""
class HelmholtzEnergy_dimensionless(object):
    r"""Dimensionless Helmholtz free energy :math:`\phi = f/(RT)` and its partial derivatives."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_H2O.HelmholtzEnergy_dimensionless_value_get, _H2O.HelmholtzEnergy_dimensionless_value_set, doc=r""" :math:`\phi`""")
    d = property(_H2O.HelmholtzEnergy_dimensionless_d_get, _H2O.HelmholtzEnergy_dimensionless_d_set, doc=r""" :math:`\left[ \frac{\partial \phi}{\partial \delta} \right]_{\tau}`""")
    dd = property(_H2O.HelmholtzEnergy_dimensionless_dd_get, _H2O.HelmholtzEnergy_dimensionless_dd_set, doc=r""" :math:`\left[ \frac{\partial^2 \phi}{\partial \delta^2} \right]_{\tau}`""")
    t = property(_H2O.HelmholtzEnergy_dimensionless_t_get, _H2O.HelmholtzEnergy_dimensionless_t_set, doc=r""" :math:`\left[ \frac{\partial \phi}{\partial \tau} \right]_{\delta}`""")
    tt = property(_H2O.HelmholtzEnergy_dimensionless_tt_get, _H2O.HelmholtzEnergy_dimensionless_tt_set, doc=r""" :math:`\left[ \frac{\partial^2 \phi}{\partial \tau^2} \right]_{\delta}`""")
    dt = property(_H2O.HelmholtzEnergy_dimensionless_dt_get, _H2O.HelmholtzEnergy_dimensionless_dt_set, doc=r""" :math:`\frac{\partial^2 \phi}{\partial \delta \partial \tau}`""")

    def __eq__(self, phi):
        return _H2O.HelmholtzEnergy_dimensionless___eq__(self, phi)

    def __add__(self, phi):
        return _H2O.HelmholtzEnergy_dimensionless___add__(self, phi)

    def __sub__(self, phi):
        return _H2O.HelmholtzEnergy_dimensionless___sub__(self, phi)

    def __init__(self):
        _H2O.HelmholtzEnergy_dimensionless_swiginit(self, _H2O.new_HelmholtzEnergy_dimensionless())
    __swig_destroy__ = _H2O.delete_HelmholtzEnergy_dimensionless

# Register HelmholtzEnergy_dimensionless in _H2O:
_H2O.HelmholtzEnergy_dimensionless_swigregister(HelmholtzEnergy_dimensionless)
class Coeff_phi_o(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n2 = property(_H2O.Coeff_phi_o_n2_get)
    n0_term1 = property(_H2O.Coeff_phi_o_n0_term1_get)
    n0_term2 = property(_H2O.Coeff_phi_o_n0_term2_get)
    gamma0_term2 = property(_H2O.Coeff_phi_o_gamma0_term2_get)

    def __init__(self):
        _H2O.Coeff_phi_o_swiginit(self, _H2O.new_Coeff_phi_o())
    __swig_destroy__ = _H2O.delete_Coeff_phi_o

# Register Coeff_phi_o in _H2O:
_H2O.Coeff_phi_o_swigregister(Coeff_phi_o)
class Coeff_phi_r(object):
    r"""Numerical values of the coefficients and parameters of the residual part of the dimensionless Helmholtz free energy. Eq.6 in 'IAPWS-95' cIAPWS95::phi_r"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    n1 = property(_H2O.Coeff_phi_r_n1_get)
    n2 = property(_H2O.Coeff_phi_r_n2_get)
    n3 = property(_H2O.Coeff_phi_r_n3_get)
    n4 = property(_H2O.Coeff_phi_r_n4_get)
    ni_term1 = property(_H2O.Coeff_phi_r_ni_term1_get)
    di_term1 = property(_H2O.Coeff_phi_r_di_term1_get)
    ti_term1 = property(_H2O.Coeff_phi_r_ti_term1_get)
    ni_term2 = property(_H2O.Coeff_phi_r_ni_term2_get)
    ci_term2 = property(_H2O.Coeff_phi_r_ci_term2_get)
    di_term2 = property(_H2O.Coeff_phi_r_di_term2_get)
    ti_term2 = property(_H2O.Coeff_phi_r_ti_term2_get)
    ni_term3 = property(_H2O.Coeff_phi_r_ni_term3_get)
    d_term3 = property(_H2O.Coeff_phi_r_d_term3_get)
    ti_term3 = property(_H2O.Coeff_phi_r_ti_term3_get)
    alpha_term3 = property(_H2O.Coeff_phi_r_alpha_term3_get)
    betai_term3 = property(_H2O.Coeff_phi_r_betai_term3_get)
    gammai_term3 = property(_H2O.Coeff_phi_r_gammai_term3_get)
    epsilon_term3 = property(_H2O.Coeff_phi_r_epsilon_term3_get)
    ni_term4 = property(_H2O.Coeff_phi_r_ni_term4_get)
    a_term4 = property(_H2O.Coeff_phi_r_a_term4_get)
    bi_term4 = property(_H2O.Coeff_phi_r_bi_term4_get)
    B_term4 = property(_H2O.Coeff_phi_r_B_term4_get)
    Ci_term4 = property(_H2O.Coeff_phi_r_Ci_term4_get)
    Di_term4 = property(_H2O.Coeff_phi_r_Di_term4_get)
    A_term4 = property(_H2O.Coeff_phi_r_A_term4_get)
    beta_term4 = property(_H2O.Coeff_phi_r_beta_term4_get)

    def __init__(self):
        _H2O.Coeff_phi_r_swiginit(self, _H2O.new_Coeff_phi_r())
    __swig_destroy__ = _H2O.delete_Coeff_phi_r

# Register Coeff_phi_r in _H2O:
_H2O.Coeff_phi_r_swigregister(Coeff_phi_r)
class Constants_Viscosity2008_Water(object):
    r"""Constants for water viscosity calculation, see 'mu2008'."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T_star = property(_H2O.Constants_Viscosity2008_Water_T_star_get)
    rho_star = property(_H2O.Constants_Viscosity2008_Water_rho_star_get)
    p_star = property(_H2O.Constants_Viscosity2008_Water_p_star_get)
    mu_star = property(_H2O.Constants_Viscosity2008_Water_mu_star_get)
    N_Hi = _H2O.Constants_Viscosity2008_Water_N_Hi
    H_i = property(_H2O.Constants_Viscosity2008_Water_H_i_get)
    row_Hij = _H2O.Constants_Viscosity2008_Water_row_Hij
    col_Hij = _H2O.Constants_Viscosity2008_Water_col_Hij
    H_ij = property(_H2O.Constants_Viscosity2008_Water_H_ij_get)
    x_mu = property(_H2O.Constants_Viscosity2008_Water_x_mu_get)
    qC = property(_H2O.Constants_Viscosity2008_Water_qC_get)
    qD = property(_H2O.Constants_Viscosity2008_Water_qD_get)
    nu = property(_H2O.Constants_Viscosity2008_Water_nu_get)
    gamma = property(_H2O.Constants_Viscosity2008_Water_gamma_get)
    xi0 = property(_H2O.Constants_Viscosity2008_Water_xi0_get)
    Gamma0 = property(_H2O.Constants_Viscosity2008_Water_Gamma0_get)
    T_R_bar = property(_H2O.Constants_Viscosity2008_Water_T_R_bar_get)
    T_R = property(_H2O.Constants_Viscosity2008_Water_T_R_get)
    p_starByRho_star = property(_H2O.Constants_Viscosity2008_Water_p_starByRho_star_get)
    nuBygamma = property(_H2O.Constants_Viscosity2008_Water_nuBygamma_get)

    def __init__(self):
        _H2O.Constants_Viscosity2008_Water_swiginit(self, _H2O.new_Constants_Viscosity2008_Water())
    __swig_destroy__ = _H2O.delete_Constants_Viscosity2008_Water

# Register Constants_Viscosity2008_Water in _H2O:
_H2O.Constants_Viscosity2008_Water_swigregister(Constants_Viscosity2008_Water)
class HelmholtzEnergy_dimensionless_SinglePhase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    phio = property(_H2O.HelmholtzEnergy_dimensionless_SinglePhase_phio_get, _H2O.HelmholtzEnergy_dimensionless_SinglePhase_phio_set)
    phir = property(_H2O.HelmholtzEnergy_dimensionless_SinglePhase_phir_get, _H2O.HelmholtzEnergy_dimensionless_SinglePhase_phir_set)

    def __init__(self):
        _H2O.HelmholtzEnergy_dimensionless_SinglePhase_swiginit(self, _H2O.new_HelmholtzEnergy_dimensionless_SinglePhase())
    __swig_destroy__ = _H2O.delete_HelmholtzEnergy_dimensionless_SinglePhase

# Register HelmholtzEnergy_dimensionless_SinglePhase in _H2O:
_H2O.HelmholtzEnergy_dimensionless_SinglePhase_swigregister(HelmholtzEnergy_dimensionless_SinglePhase)
class HelmholtzEnergy_dimensionless_TwoPhase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    phio_l = property(_H2O.HelmholtzEnergy_dimensionless_TwoPhase_phio_l_get, _H2O.HelmholtzEnergy_dimensionless_TwoPhase_phio_l_set)
    phir_l = property(_H2O.HelmholtzEnergy_dimensionless_TwoPhase_phir_l_get, _H2O.HelmholtzEnergy_dimensionless_TwoPhase_phir_l_set)
    phio_v = property(_H2O.HelmholtzEnergy_dimensionless_TwoPhase_phio_v_get, _H2O.HelmholtzEnergy_dimensionless_TwoPhase_phio_v_set)
    phir_v = property(_H2O.HelmholtzEnergy_dimensionless_TwoPhase_phir_v_get, _H2O.HelmholtzEnergy_dimensionless_TwoPhase_phir_v_set)

    def __init__(self):
        _H2O.HelmholtzEnergy_dimensionless_TwoPhase_swiginit(self, _H2O.new_HelmholtzEnergy_dimensionless_TwoPhase())
    __swig_destroy__ = _H2O.delete_HelmholtzEnergy_dimensionless_TwoPhase

# Register HelmholtzEnergy_dimensionless_TwoPhase in _H2O:
_H2O.HelmholtzEnergy_dimensionless_TwoPhase_swigregister(HelmholtzEnergy_dimensionless_TwoPhase)
class STRUCT_delta_TwoPhase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    delta_l = property(_H2O.STRUCT_delta_TwoPhase_delta_l_get, _H2O.STRUCT_delta_TwoPhase_delta_l_set)
    delta_v = property(_H2O.STRUCT_delta_TwoPhase_delta_v_get, _H2O.STRUCT_delta_TwoPhase_delta_v_set)

    def __init__(self):
        _H2O.STRUCT_delta_TwoPhase_swiginit(self, _H2O.new_STRUCT_delta_TwoPhase())
    __swig_destroy__ = _H2O.delete_STRUCT_delta_TwoPhase

# Register STRUCT_delta_TwoPhase in _H2O:
_H2O.STRUCT_delta_TwoPhase_swigregister(STRUCT_delta_TwoPhase)
class State(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    phase = property(_H2O.State_phase_get, _H2O.State_phase_set)
    x = property(_H2O.State_x_get, _H2O.State_x_set, doc=r""" vapor mass fraction""")
    tau = property(_H2O.State_tau_get, _H2O.State_tau_set)

    def __init__(self):
        _H2O.State_swiginit(self, _H2O.new_State())
    __swig_destroy__ = _H2O.delete_State

# Register State in _H2O:
_H2O.State_swigregister(State)
class cIAPWS95(cxThermal):
    r"""Class of IAPWS-95 formula of H2O, which inherits from IAPWS_IF97::cIAPWS_IF97."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _H2O.cIAPWS95_swiginit(self, _H2O.new_cIAPWS95())
    __swig_destroy__ = _H2O.delete_cIAPWS95
    m_constants = property(_H2O.cIAPWS95_m_constants_get, _H2O.cIAPWS95_m_constants_set)

    def phi_o(self, *args):
        return _H2O.cIAPWS95_phi_o(self, *args)

    def P_Sat_estimate(self, *args):
        return _H2O.cIAPWS95_P_Sat_estimate(self, *args)

    def T_Sat_estimate(self, P):
        return _H2O.cIAPWS95_T_Sat_estimate(self, P)

    def Rho_Liquid_Sat_estimate(self, T):
        return _H2O.cIAPWS95_Rho_Liquid_Sat_estimate(self, T)

    def Rho_Vapor_Sat_estimate(self, T):
        return _H2O.cIAPWS95_Rho_Vapor_Sat_estimate(self, T)

    def P_delta_tau(self, delta, tau):
        return _H2O.cIAPWS95_P_delta_tau(self, delta, tau)

    def Rho(self, *args):
        return _H2O.cIAPWS95_Rho(self, *args)

    def _enthalpy(self, *args):
        return _H2O.cIAPWS95__enthalpy(self, *args)

    def Mu(self, T, P):
        return _H2O.cIAPWS95_Mu(self, T, P)

    def Verification_Mu(self):
        return _H2O.cIAPWS95_Verification_Mu(self)

    def name(self):
        return _H2O.cIAPWS95_name(self)

    def Tmin(self):
        return _H2O.cIAPWS95_Tmin(self)

    def Tmax(self):
        return _H2O.cIAPWS95_Tmax(self)

    def pmin(self):
        return _H2O.cIAPWS95_pmin(self)

    def pmax(self):
        return _H2O.cIAPWS95_pmax(self)

    def Ttriple(self):
        return _H2O.cIAPWS95_Ttriple(self)

    def T_critical(self):
        return _H2O.cIAPWS95_T_critical(self)

    def p_critical(self):
        return _H2O.cIAPWS95_p_critical(self)

    def rhomass_critical(self):
        return _H2O.cIAPWS95_rhomass_critical(self)

    def molar_mass(self):
        return _H2O.cIAPWS95_molar_mass(self)

    def findPhaseRegion_TPX(self, T, p, X=0):
        return _H2O.cIAPWS95_findPhaseRegion_TPX(self, T, p, X)

    def UpdateState_TPX(self, T, p, X=0):
        return _H2O.cIAPWS95_UpdateState_TPX(self, T, p, X)

    def findPhaseRegion_HPX(self, H, p, X=0):
        return _H2O.cIAPWS95_findPhaseRegion_HPX(self, H, p, X)

    def Boiling_p_rho(self, T, rho_l, rho_v):
        return _H2O.cIAPWS95_Boiling_p_rho(self, T, rho_l, rho_v)

    def Boiling_p(self, *args):
        return _H2O.cIAPWS95_Boiling_p(self, *args)

    def Boiling_T_rho(self, p, rho_l, rho_v):
        return _H2O.cIAPWS95_Boiling_T_rho(self, p, rho_l, rho_v)

    def Boiling_T(self, *args):
        return _H2O.cIAPWS95_Boiling_T(self, *args)

    def phi_r(self, *args):
        return _H2O.cIAPWS95_phi_r(self, *args)

    def phi_r_d(self, *args):
        return _H2O.cIAPWS95_phi_r_d(self, *args)

    def phi_r_dd(self, *args):
        return _H2O.cIAPWS95_phi_r_dd(self, *args)

    def phi_r_t(self, *args):
        return _H2O.cIAPWS95_phi_r_t(self, *args)

    def phi_r_tt(self, *args):
        return _H2O.cIAPWS95_phi_r_tt(self, *args)

    def phi_r_dt(self, *args):
        return _H2O.cIAPWS95_phi_r_dt(self, *args)

# Register cIAPWS95 in _H2O:
_H2O.cIAPWS95_swigregister(cIAPWS95)
class Params_SolvePhaseEquilibrium(object):
    r"""Data struct for phase equilibrium solving. It is used in func_PhaseEquilibrium  , cIAPWS95::Boiling_P  and cIAPWS95::Boiling_T"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iapws = property(_H2O.Params_SolvePhaseEquilibrium_iapws_get, _H2O.Params_SolvePhaseEquilibrium_iapws_set)
    RT = property(_H2O.Params_SolvePhaseEquilibrium_RT_get, _H2O.Params_SolvePhaseEquilibrium_RT_set, doc=r""" xThermal::R times T: :math:`[J/kg]`""")
    Solve_PorT = property(_H2O.Params_SolvePhaseEquilibrium_Solve_PorT_get, _H2O.Params_SolvePhaseEquilibrium_Solve_PorT_set, doc=r""" Flag of solving :math:`P_{sat}` or :math:`T_{sat}`, the value will be one of #SOLVE_SATURATED_P, #SOLVE_SATURATED_T""")

    def __init__(self):
        _H2O.Params_SolvePhaseEquilibrium_swiginit(self, _H2O.new_Params_SolvePhaseEquilibrium())
    __swig_destroy__ = _H2O.delete_Params_SolvePhaseEquilibrium

# Register Params_SolvePhaseEquilibrium in _H2O:
_H2O.Params_SolvePhaseEquilibrium_swigregister(Params_SolvePhaseEquilibrium)
class Params_TP2Rho(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iapws = property(_H2O.Params_TP2Rho_iapws_get, _H2O.Params_TP2Rho_iapws_set)
    T_K = property(_H2O.Params_TP2Rho_T_K_get, _H2O.Params_TP2Rho_T_K_set)
    tau = property(_H2O.Params_TP2Rho_tau_get, _H2O.Params_TP2Rho_tau_set)
    p = property(_H2O.Params_TP2Rho_p_get, _H2O.Params_TP2Rho_p_set)
    RhocRT = property(_H2O.Params_TP2Rho_RhocRT_get, _H2O.Params_TP2Rho_RhocRT_set)

    def __init__(self):
        _H2O.Params_TP2Rho_swiginit(self, _H2O.new_Params_TP2Rho())
    __swig_destroy__ = _H2O.delete_Params_TP2Rho

# Register Params_TP2Rho in _H2O:
_H2O.Params_TP2Rho_swigregister(Params_TP2Rho)
class Params_HP2RhoT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iapws = property(_H2O.Params_HP2RhoT_iapws_get, _H2O.Params_HP2RhoT_iapws_set)
    h = property(_H2O.Params_HP2RhoT_h_get, _H2O.Params_HP2RhoT_h_set)
    p = property(_H2O.Params_HP2RhoT_p_get, _H2O.Params_HP2RhoT_p_set)

    def __init__(self):
        _H2O.Params_HP2RhoT_swiginit(self, _H2O.new_Params_HP2RhoT())
    __swig_destroy__ = _H2O.delete_Params_HP2RhoT

# Register Params_HP2RhoT in _H2O:
_H2O.Params_HP2RhoT_swigregister(Params_HP2RhoT)
class Params_T_Sat_estimate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iapws = property(_H2O.Params_T_Sat_estimate_iapws_get, _H2O.Params_T_Sat_estimate_iapws_set)
    p = property(_H2O.Params_T_Sat_estimate_p_get, _H2O.Params_T_Sat_estimate_p_set)

    def __init__(self):
        _H2O.Params_T_Sat_estimate_swiginit(self, _H2O.new_Params_T_Sat_estimate())
    __swig_destroy__ = _H2O.delete_Params_T_Sat_estimate

# Register Params_T_Sat_estimate in _H2O:
_H2O.Params_T_Sat_estimate_swigregister(Params_T_Sat_estimate)

