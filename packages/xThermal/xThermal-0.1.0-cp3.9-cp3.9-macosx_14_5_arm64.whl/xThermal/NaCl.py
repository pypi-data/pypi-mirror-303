# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _NaCl
else:
    import _NaCl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NaCl.delete_SwigPyIterator

    def value(self):
        return _NaCl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _NaCl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _NaCl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _NaCl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _NaCl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _NaCl.SwigPyIterator_copy(self)

    def next(self):
        return _NaCl.SwigPyIterator_next(self)

    def __next__(self):
        return _NaCl.SwigPyIterator___next__(self)

    def previous(self):
        return _NaCl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _NaCl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _NaCl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _NaCl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _NaCl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _NaCl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _NaCl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _NaCl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _NaCl:
_NaCl.SwigPyIterator_swigregister(SwigPyIterator)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NaCl.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NaCl.IntVector___nonzero__(self)

    def __bool__(self):
        return _NaCl.IntVector___bool__(self)

    def __len__(self):
        return _NaCl.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _NaCl.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NaCl.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NaCl.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NaCl.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NaCl.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NaCl.IntVector___setitem__(self, *args)

    def pop(self):
        return _NaCl.IntVector_pop(self)

    def append(self, x):
        return _NaCl.IntVector_append(self, x)

    def empty(self):
        return _NaCl.IntVector_empty(self)

    def size(self):
        return _NaCl.IntVector_size(self)

    def swap(self, v):
        return _NaCl.IntVector_swap(self, v)

    def begin(self):
        return _NaCl.IntVector_begin(self)

    def end(self):
        return _NaCl.IntVector_end(self)

    def rbegin(self):
        return _NaCl.IntVector_rbegin(self)

    def rend(self):
        return _NaCl.IntVector_rend(self)

    def clear(self):
        return _NaCl.IntVector_clear(self)

    def get_allocator(self):
        return _NaCl.IntVector_get_allocator(self)

    def pop_back(self):
        return _NaCl.IntVector_pop_back(self)

    def erase(self, *args):
        return _NaCl.IntVector_erase(self, *args)

    def __init__(self, *args):
        _NaCl.IntVector_swiginit(self, _NaCl.new_IntVector(*args))

    def push_back(self, x):
        return _NaCl.IntVector_push_back(self, x)

    def front(self):
        return _NaCl.IntVector_front(self)

    def back(self):
        return _NaCl.IntVector_back(self)

    def assign(self, n, x):
        return _NaCl.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _NaCl.IntVector_resize(self, *args)

    def insert(self, *args):
        return _NaCl.IntVector_insert(self, *args)

    def reserve(self, n):
        return _NaCl.IntVector_reserve(self, n)

    def capacity(self):
        return _NaCl.IntVector_capacity(self)
    __swig_destroy__ = _NaCl.delete_IntVector

# Register IntVector in _NaCl:
_NaCl.IntVector_swigregister(IntVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NaCl.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NaCl.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _NaCl.DoubleVector___bool__(self)

    def __len__(self):
        return _NaCl.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _NaCl.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NaCl.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NaCl.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NaCl.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NaCl.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NaCl.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _NaCl.DoubleVector_pop(self)

    def append(self, x):
        return _NaCl.DoubleVector_append(self, x)

    def empty(self):
        return _NaCl.DoubleVector_empty(self)

    def size(self):
        return _NaCl.DoubleVector_size(self)

    def swap(self, v):
        return _NaCl.DoubleVector_swap(self, v)

    def begin(self):
        return _NaCl.DoubleVector_begin(self)

    def end(self):
        return _NaCl.DoubleVector_end(self)

    def rbegin(self):
        return _NaCl.DoubleVector_rbegin(self)

    def rend(self):
        return _NaCl.DoubleVector_rend(self)

    def clear(self):
        return _NaCl.DoubleVector_clear(self)

    def get_allocator(self):
        return _NaCl.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _NaCl.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _NaCl.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _NaCl.DoubleVector_swiginit(self, _NaCl.new_DoubleVector(*args))

    def push_back(self, x):
        return _NaCl.DoubleVector_push_back(self, x)

    def front(self):
        return _NaCl.DoubleVector_front(self)

    def back(self):
        return _NaCl.DoubleVector_back(self)

    def assign(self, n, x):
        return _NaCl.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _NaCl.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _NaCl.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _NaCl.DoubleVector_reserve(self, n)

    def capacity(self):
        return _NaCl.DoubleVector_capacity(self)
    __swig_destroy__ = _NaCl.delete_DoubleVector

# Register DoubleVector in _NaCl:
_NaCl.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NaCl.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NaCl.StringVector___nonzero__(self)

    def __bool__(self):
        return _NaCl.StringVector___bool__(self)

    def __len__(self):
        return _NaCl.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _NaCl.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NaCl.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NaCl.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NaCl.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NaCl.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NaCl.StringVector___setitem__(self, *args)

    def pop(self):
        return _NaCl.StringVector_pop(self)

    def append(self, x):
        return _NaCl.StringVector_append(self, x)

    def empty(self):
        return _NaCl.StringVector_empty(self)

    def size(self):
        return _NaCl.StringVector_size(self)

    def swap(self, v):
        return _NaCl.StringVector_swap(self, v)

    def begin(self):
        return _NaCl.StringVector_begin(self)

    def end(self):
        return _NaCl.StringVector_end(self)

    def rbegin(self):
        return _NaCl.StringVector_rbegin(self)

    def rend(self):
        return _NaCl.StringVector_rend(self)

    def clear(self):
        return _NaCl.StringVector_clear(self)

    def get_allocator(self):
        return _NaCl.StringVector_get_allocator(self)

    def pop_back(self):
        return _NaCl.StringVector_pop_back(self)

    def erase(self, *args):
        return _NaCl.StringVector_erase(self, *args)

    def __init__(self, *args):
        _NaCl.StringVector_swiginit(self, _NaCl.new_StringVector(*args))

    def push_back(self, x):
        return _NaCl.StringVector_push_back(self, x)

    def front(self):
        return _NaCl.StringVector_front(self)

    def back(self):
        return _NaCl.StringVector_back(self)

    def assign(self, n, x):
        return _NaCl.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _NaCl.StringVector_resize(self, *args)

    def insert(self, *args):
        return _NaCl.StringVector_insert(self, *args)

    def reserve(self, n):
        return _NaCl.StringVector_reserve(self, n)

    def capacity(self):
        return _NaCl.StringVector_capacity(self)
    __swig_destroy__ = _NaCl.delete_StringVector

# Register StringVector in _NaCl:
_NaCl.StringVector_swigregister(StringVector)
class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NaCl.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NaCl.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _NaCl.ConstCharVector___bool__(self)

    def __len__(self):
        return _NaCl.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _NaCl.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NaCl.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NaCl.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NaCl.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NaCl.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NaCl.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _NaCl.ConstCharVector_pop(self)

    def append(self, x):
        return _NaCl.ConstCharVector_append(self, x)

    def empty(self):
        return _NaCl.ConstCharVector_empty(self)

    def size(self):
        return _NaCl.ConstCharVector_size(self)

    def swap(self, v):
        return _NaCl.ConstCharVector_swap(self, v)

    def begin(self):
        return _NaCl.ConstCharVector_begin(self)

    def end(self):
        return _NaCl.ConstCharVector_end(self)

    def rbegin(self):
        return _NaCl.ConstCharVector_rbegin(self)

    def rend(self):
        return _NaCl.ConstCharVector_rend(self)

    def clear(self):
        return _NaCl.ConstCharVector_clear(self)

    def get_allocator(self):
        return _NaCl.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _NaCl.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _NaCl.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _NaCl.ConstCharVector_swiginit(self, _NaCl.new_ConstCharVector(*args))

    def push_back(self, x):
        return _NaCl.ConstCharVector_push_back(self, x)

    def front(self):
        return _NaCl.ConstCharVector_front(self)

    def back(self):
        return _NaCl.ConstCharVector_back(self)

    def assign(self, n, x):
        return _NaCl.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _NaCl.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _NaCl.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _NaCl.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _NaCl.ConstCharVector_capacity(self)
    __swig_destroy__ = _NaCl.delete_ConstCharVector

# Register ConstCharVector in _NaCl:
_NaCl.ConstCharVector_swigregister(ConstCharVector)
class UnsignedLongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _NaCl.UnsignedLongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NaCl.UnsignedLongVector___nonzero__(self)

    def __bool__(self):
        return _NaCl.UnsignedLongVector___bool__(self)

    def __len__(self):
        return _NaCl.UnsignedLongVector___len__(self)

    def __getslice__(self, i, j):
        return _NaCl.UnsignedLongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NaCl.UnsignedLongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NaCl.UnsignedLongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NaCl.UnsignedLongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NaCl.UnsignedLongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NaCl.UnsignedLongVector___setitem__(self, *args)

    def pop(self):
        return _NaCl.UnsignedLongVector_pop(self)

    def append(self, x):
        return _NaCl.UnsignedLongVector_append(self, x)

    def empty(self):
        return _NaCl.UnsignedLongVector_empty(self)

    def size(self):
        return _NaCl.UnsignedLongVector_size(self)

    def swap(self, v):
        return _NaCl.UnsignedLongVector_swap(self, v)

    def begin(self):
        return _NaCl.UnsignedLongVector_begin(self)

    def end(self):
        return _NaCl.UnsignedLongVector_end(self)

    def rbegin(self):
        return _NaCl.UnsignedLongVector_rbegin(self)

    def rend(self):
        return _NaCl.UnsignedLongVector_rend(self)

    def clear(self):
        return _NaCl.UnsignedLongVector_clear(self)

    def get_allocator(self):
        return _NaCl.UnsignedLongVector_get_allocator(self)

    def pop_back(self):
        return _NaCl.UnsignedLongVector_pop_back(self)

    def erase(self, *args):
        return _NaCl.UnsignedLongVector_erase(self, *args)

    def __init__(self, *args):
        _NaCl.UnsignedLongVector_swiginit(self, _NaCl.new_UnsignedLongVector(*args))

    def push_back(self, x):
        return _NaCl.UnsignedLongVector_push_back(self, x)

    def front(self):
        return _NaCl.UnsignedLongVector_front(self)

    def back(self):
        return _NaCl.UnsignedLongVector_back(self)

    def assign(self, n, x):
        return _NaCl.UnsignedLongVector_assign(self, n, x)

    def resize(self, *args):
        return _NaCl.UnsignedLongVector_resize(self, *args)

    def insert(self, *args):
        return _NaCl.UnsignedLongVector_insert(self, *args)

    def reserve(self, n):
        return _NaCl.UnsignedLongVector_reserve(self, n)

    def capacity(self):
        return _NaCl.UnsignedLongVector_capacity(self)
    __swig_destroy__ = _NaCl.delete_UnsignedLongVector

# Register UnsignedLongVector in _NaCl:
_NaCl.UnsignedLongVector_swigregister(UnsignedLongVector)
MixPhaseRegion = _NaCl.MixPhaseRegion
r""" MixPhaseRegion is used in AMR lookup table."""
SinglePhase_L = _NaCl.SinglePhase_L
r""" Single phase: liquid. Regard single-phase "liquid-like" and "vapor-like" fluid as "Single phase liquid" as well."""
SinglePhase_V = _NaCl.SinglePhase_V
r""" Single phase: vapor"""
SinglePhase_S = _NaCl.SinglePhase_S
r""" Single phase: solid, e.g. NaCl"""
Supercritical = _NaCl.Supercritical
r""" Supercritical (p > pc, T > Tc) for pure water"""
Supercritical_vapor = _NaCl.Supercritical_vapor
r""" Supercritical vapor (p < pc, T > Tc) for pure water"""
Supercritical_liquid = _NaCl.Supercritical_liquid
r""" Supercritical liquid (p > pc, T < Tc) for pure water"""
Critical = _NaCl.Critical
r""" At the critical point of pure water or on critical curve of H2ONaCl"""
TwoPhase_VL_Water = _NaCl.TwoPhase_VL_Water
r""" Two phase: liquid + vapor, salinity = 0"""
TwoPhase_LH = _NaCl.TwoPhase_LH
r""" Two phase: liquid + halite"""
TwoPhase_VH = _NaCl.TwoPhase_VH
r""" Two phase: vapor + halite"""
TwoPhase_VL = _NaCl.TwoPhase_VL
r""" Two phase: VL region"""
ThreePhase_VLH = _NaCl.ThreePhase_VLH
r""" Three phase: vapor + liquid + halite"""
UnknownPhase = _NaCl.UnknownPhase
r""" UnknownPhase phase region for bug report"""
NotImposed = _NaCl.NotImposed
r""" Phase is not imposed"""
class ThermodynamicProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_NaCl.ThermodynamicProperties_T_get, _NaCl.ThermodynamicProperties_T_set)
    p = property(_NaCl.ThermodynamicProperties_p_get, _NaCl.ThermodynamicProperties_p_set)
    X = property(_NaCl.ThermodynamicProperties_X_get, _NaCl.ThermodynamicProperties_X_set)
    H = property(_NaCl.ThermodynamicProperties_H_get, _NaCl.ThermodynamicProperties_H_set)
    phase = property(_NaCl.ThermodynamicProperties_phase_get, _NaCl.ThermodynamicProperties_phase_set)
    S_l = property(_NaCl.ThermodynamicProperties_S_l_get, _NaCl.ThermodynamicProperties_S_l_set)
    S_v = property(_NaCl.ThermodynamicProperties_S_v_get, _NaCl.ThermodynamicProperties_S_v_set)
    S_h = property(_NaCl.ThermodynamicProperties_S_h_get, _NaCl.ThermodynamicProperties_S_h_set)
    X_l = property(_NaCl.ThermodynamicProperties_X_l_get, _NaCl.ThermodynamicProperties_X_l_set)
    X_v = property(_NaCl.ThermodynamicProperties_X_v_get, _NaCl.ThermodynamicProperties_X_v_set)
    Rho_l = property(_NaCl.ThermodynamicProperties_Rho_l_get, _NaCl.ThermodynamicProperties_Rho_l_set)
    Rho_v = property(_NaCl.ThermodynamicProperties_Rho_v_get, _NaCl.ThermodynamicProperties_Rho_v_set)
    Rho_h = property(_NaCl.ThermodynamicProperties_Rho_h_get, _NaCl.ThermodynamicProperties_Rho_h_set)
    H_l = property(_NaCl.ThermodynamicProperties_H_l_get, _NaCl.ThermodynamicProperties_H_l_set)
    H_v = property(_NaCl.ThermodynamicProperties_H_v_get, _NaCl.ThermodynamicProperties_H_v_set)
    H_h = property(_NaCl.ThermodynamicProperties_H_h_get, _NaCl.ThermodynamicProperties_H_h_set)
    Cp_l = property(_NaCl.ThermodynamicProperties_Cp_l_get, _NaCl.ThermodynamicProperties_Cp_l_set)
    Cp_v = property(_NaCl.ThermodynamicProperties_Cp_v_get, _NaCl.ThermodynamicProperties_Cp_v_set)
    Cp_h = property(_NaCl.ThermodynamicProperties_Cp_h_get, _NaCl.ThermodynamicProperties_Cp_h_set)
    Mu_l = property(_NaCl.ThermodynamicProperties_Mu_l_get, _NaCl.ThermodynamicProperties_Mu_l_set)
    Mu_v = property(_NaCl.ThermodynamicProperties_Mu_v_get, _NaCl.ThermodynamicProperties_Mu_v_set)
    Rho = property(_NaCl.ThermodynamicProperties_Rho_get, _NaCl.ThermodynamicProperties_Rho_set)
    Cp = property(_NaCl.ThermodynamicProperties_Cp_get, _NaCl.ThermodynamicProperties_Cp_set)
    Mu = property(_NaCl.ThermodynamicProperties_Mu_get, _NaCl.ThermodynamicProperties_Mu_set)
    dRhodP = property(_NaCl.ThermodynamicProperties_dRhodP_get, _NaCl.ThermodynamicProperties_dRhodP_set)
    dRhodP_l = property(_NaCl.ThermodynamicProperties_dRhodP_l_get, _NaCl.ThermodynamicProperties_dRhodP_l_set)
    dRhodP_v = property(_NaCl.ThermodynamicProperties_dRhodP_v_get, _NaCl.ThermodynamicProperties_dRhodP_v_set)
    dRhodT = property(_NaCl.ThermodynamicProperties_dRhodT_get, _NaCl.ThermodynamicProperties_dRhodT_set)
    dRhodT_l = property(_NaCl.ThermodynamicProperties_dRhodT_l_get, _NaCl.ThermodynamicProperties_dRhodT_l_set)
    dRhodT_v = property(_NaCl.ThermodynamicProperties_dRhodT_v_get, _NaCl.ThermodynamicProperties_dRhodT_v_set)
    IsothermalCompressibility = property(_NaCl.ThermodynamicProperties_IsothermalCompressibility_get, _NaCl.ThermodynamicProperties_IsothermalCompressibility_set)
    IsothermalCompressibility_l = property(_NaCl.ThermodynamicProperties_IsothermalCompressibility_l_get, _NaCl.ThermodynamicProperties_IsothermalCompressibility_l_set)
    IsothermalCompressibility_v = property(_NaCl.ThermodynamicProperties_IsothermalCompressibility_v_get, _NaCl.ThermodynamicProperties_IsothermalCompressibility_v_set)
    IsobaricExpansivity = property(_NaCl.ThermodynamicProperties_IsobaricExpansivity_get, _NaCl.ThermodynamicProperties_IsobaricExpansivity_set)
    IsobaricExpansivity_l = property(_NaCl.ThermodynamicProperties_IsobaricExpansivity_l_get, _NaCl.ThermodynamicProperties_IsobaricExpansivity_l_set)
    IsobaricExpansivity_v = property(_NaCl.ThermodynamicProperties_IsobaricExpansivity_v_get, _NaCl.ThermodynamicProperties_IsobaricExpansivity_v_set)
    fluidName = property(_NaCl.ThermodynamicProperties_fluidName_get, _NaCl.ThermodynamicProperties_fluidName_set)

    def info(self, _self):
        return _NaCl.ThermodynamicProperties_info(self, _self)

    def __str__(self):
        return _NaCl.ThermodynamicProperties___str__(self)

    def __init__(self):
        _NaCl.ThermodynamicProperties_swiginit(self, _NaCl.new_ThermodynamicProperties())
    __swig_destroy__ = _NaCl.delete_ThermodynamicProperties

# Register ThermodynamicProperties in _NaCl:
_NaCl.ThermodynamicProperties_swigregister(ThermodynamicProperties)
class ThermodynamicPropertiesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_NaCl.ThermodynamicPropertiesVector_T_get, _NaCl.ThermodynamicPropertiesVector_T_set)
    p = property(_NaCl.ThermodynamicPropertiesVector_p_get, _NaCl.ThermodynamicPropertiesVector_p_set)
    X = property(_NaCl.ThermodynamicPropertiesVector_X_get, _NaCl.ThermodynamicPropertiesVector_X_set)
    H = property(_NaCl.ThermodynamicPropertiesVector_H_get, _NaCl.ThermodynamicPropertiesVector_H_set)
    phase = property(_NaCl.ThermodynamicPropertiesVector_phase_get, _NaCl.ThermodynamicPropertiesVector_phase_set)
    S_l = property(_NaCl.ThermodynamicPropertiesVector_S_l_get, _NaCl.ThermodynamicPropertiesVector_S_l_set)
    S_v = property(_NaCl.ThermodynamicPropertiesVector_S_v_get, _NaCl.ThermodynamicPropertiesVector_S_v_set)
    S_h = property(_NaCl.ThermodynamicPropertiesVector_S_h_get, _NaCl.ThermodynamicPropertiesVector_S_h_set)
    X_l = property(_NaCl.ThermodynamicPropertiesVector_X_l_get, _NaCl.ThermodynamicPropertiesVector_X_l_set)
    X_v = property(_NaCl.ThermodynamicPropertiesVector_X_v_get, _NaCl.ThermodynamicPropertiesVector_X_v_set)
    Rho_l = property(_NaCl.ThermodynamicPropertiesVector_Rho_l_get, _NaCl.ThermodynamicPropertiesVector_Rho_l_set)
    Rho_v = property(_NaCl.ThermodynamicPropertiesVector_Rho_v_get, _NaCl.ThermodynamicPropertiesVector_Rho_v_set)
    Rho_h = property(_NaCl.ThermodynamicPropertiesVector_Rho_h_get, _NaCl.ThermodynamicPropertiesVector_Rho_h_set)
    H_l = property(_NaCl.ThermodynamicPropertiesVector_H_l_get, _NaCl.ThermodynamicPropertiesVector_H_l_set)
    H_v = property(_NaCl.ThermodynamicPropertiesVector_H_v_get, _NaCl.ThermodynamicPropertiesVector_H_v_set)
    H_h = property(_NaCl.ThermodynamicPropertiesVector_H_h_get, _NaCl.ThermodynamicPropertiesVector_H_h_set)
    Cp_l = property(_NaCl.ThermodynamicPropertiesVector_Cp_l_get, _NaCl.ThermodynamicPropertiesVector_Cp_l_set)
    Cp_v = property(_NaCl.ThermodynamicPropertiesVector_Cp_v_get, _NaCl.ThermodynamicPropertiesVector_Cp_v_set)
    Cp_h = property(_NaCl.ThermodynamicPropertiesVector_Cp_h_get, _NaCl.ThermodynamicPropertiesVector_Cp_h_set)
    Mu_l = property(_NaCl.ThermodynamicPropertiesVector_Mu_l_get, _NaCl.ThermodynamicPropertiesVector_Mu_l_set)
    Mu_v = property(_NaCl.ThermodynamicPropertiesVector_Mu_v_get, _NaCl.ThermodynamicPropertiesVector_Mu_v_set)
    Rho = property(_NaCl.ThermodynamicPropertiesVector_Rho_get, _NaCl.ThermodynamicPropertiesVector_Rho_set)
    Cp = property(_NaCl.ThermodynamicPropertiesVector_Cp_get, _NaCl.ThermodynamicPropertiesVector_Cp_set)
    Mu = property(_NaCl.ThermodynamicPropertiesVector_Mu_get, _NaCl.ThermodynamicPropertiesVector_Mu_set)
    dRhodP = property(_NaCl.ThermodynamicPropertiesVector_dRhodP_get, _NaCl.ThermodynamicPropertiesVector_dRhodP_set)
    dRhodP_l = property(_NaCl.ThermodynamicPropertiesVector_dRhodP_l_get, _NaCl.ThermodynamicPropertiesVector_dRhodP_l_set)
    dRhodP_v = property(_NaCl.ThermodynamicPropertiesVector_dRhodP_v_get, _NaCl.ThermodynamicPropertiesVector_dRhodP_v_set)
    dRhodT = property(_NaCl.ThermodynamicPropertiesVector_dRhodT_get, _NaCl.ThermodynamicPropertiesVector_dRhodT_set)
    dRhodT_l = property(_NaCl.ThermodynamicPropertiesVector_dRhodT_l_get, _NaCl.ThermodynamicPropertiesVector_dRhodT_l_set)
    dRhodT_v = property(_NaCl.ThermodynamicPropertiesVector_dRhodT_v_get, _NaCl.ThermodynamicPropertiesVector_dRhodT_v_set)
    IsothermalCompressibility = property(_NaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_get, _NaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_set)
    IsothermalCompressibility_l = property(_NaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_l_get, _NaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_l_set)
    IsothermalCompressibility_v = property(_NaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_v_get, _NaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_v_set)
    IsobaricExpansivity = property(_NaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_get, _NaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_set)
    IsobaricExpansivity_l = property(_NaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_l_get, _NaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_l_set)
    IsobaricExpansivity_v = property(_NaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_v_get, _NaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_v_set)
    fluidName = property(_NaCl.ThermodynamicPropertiesVector_fluidName_get, _NaCl.ThermodynamicPropertiesVector_fluidName_set)

    def info(self, _self):
        return _NaCl.ThermodynamicPropertiesVector_info(self, _self)

    def __str__(self):
        return _NaCl.ThermodynamicPropertiesVector___str__(self)

    def __init__(self):
        _NaCl.ThermodynamicPropertiesVector_swiginit(self, _NaCl.new_ThermodynamicPropertiesVector())
    __swig_destroy__ = _NaCl.delete_ThermodynamicPropertiesVector

# Register ThermodynamicPropertiesVector in _NaCl:
_NaCl.ThermodynamicPropertiesVector_swigregister(ThermodynamicPropertiesVector)
Fluid_Unknown = _NaCl.Fluid_Unknown
FLUID_Water = _NaCl.FLUID_Water
FLUID_H2O_NaCl = _NaCl.FLUID_H2O_NaCl
class cxThermal(object):
    r"""Top abstract class of the thermodynamic model."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NaCl.delete_cxThermal
    m_isShowProgressBar = property(_NaCl.cxThermal_m_isShowProgressBar_get, _NaCl.cxThermal_m_isShowProgressBar_set)

    def showProgressBar(self, isShow):
        return _NaCl.cxThermal_showProgressBar(self, isShow)

    @staticmethod
    def validateFluid(fluidName):
        return _NaCl.cxThermal_validateFluid(fluidName)

    def name(self):
        r""" Name of the model"""
        return _NaCl.cxThermal_name(self)

    def Tmin(self):
        r""" Get the minimum temperature in K"""
        return _NaCl.cxThermal_Tmin(self)

    def Tmax(self):
        r""" Get the maximum temperature in K"""
        return _NaCl.cxThermal_Tmax(self)

    def pmin(self):
        r""" Get the minimum pressure in Pa"""
        return _NaCl.cxThermal_pmin(self)

    def pmax(self):
        r""" Get the maximum pressure in Pa"""
        return _NaCl.cxThermal_pmax(self)

    def Ttriple(self):
        r""" Get the triple point temperature in K"""
        return _NaCl.cxThermal_Ttriple(self)

    def T_critical(self):
        r""" Return the critical temperature in K"""
        return _NaCl.cxThermal_T_critical(self)

    def p_critical(self):
        r""" Return the critical pressure in Pa"""
        return _NaCl.cxThermal_p_critical(self)

    def rhomass_critical(self):
        r""" Return the critical mass density in :math:`kg/m^3`"""
        return _NaCl.cxThermal_rhomass_critical(self)

    def molar_mass(self):
        r""" Return the molar mass in kg/mol"""
        return _NaCl.cxThermal_molar_mass(self)

    def rhomolar_critical(self):
        return _NaCl.cxThermal_rhomolar_critical(self)

    def phase_name(self, phase_index):
        return _NaCl.cxThermal_phase_name(self, phase_index)

    def set_num_threads(self, num_threads):
        return _NaCl.cxThermal_set_num_threads(self, num_threads)

    def get_num_threads(self):
        return _NaCl.cxThermal_get_num_threads(self)

    def findPhaseRegion_TPX(self, T, p, X=0):
        return _NaCl.cxThermal_findPhaseRegion_TPX(self, T, p, X)

    def get_UpdateWhichProps(self):
        return _NaCl.cxThermal_get_UpdateWhichProps(self)

    def createLUT_2D(self, *args):
        return _NaCl.cxThermal_createLUT_2D(self, *args)

    def createLUT_3D(self, *args):
        return _NaCl.cxThermal_createLUT_3D(self, *args)

    def save_lut_to_vtk(self, filename, isNormalizeXYZ=True):
        return _NaCl.cxThermal_save_lut_to_vtk(self, filename, isNormalizeXYZ)

    def save_lut_to_binary(self, filename):
        return _NaCl.cxThermal_save_lut_to_binary(self, filename)

    def lookup(self, *args):
        return _NaCl.cxThermal_lookup(self, *args)

    def lookup_only(self, *args):
        return _NaCl.cxThermal_lookup_only(self, *args)

    def loadLUT(self, filename, printStatus=True):
        return _NaCl.cxThermal_loadLUT(self, filename, printStatus)

    def get_pLUT(self):
        return _NaCl.cxThermal_get_pLUT(self)

    def get_pLUT_lookup(self):
        return _NaCl.cxThermal_get_pLUT_lookup(self)

    def get_dim_lut(self):
        return _NaCl.cxThermal_get_dim_lut(self)

    def get_dim_lut_lookup(self):
        return _NaCl.cxThermal_get_dim_lut_lookup(self)

    def Rho_lookup(self, Rho_estimate, Rho_min, Rho_max, T, P):
        return _NaCl.cxThermal_Rho_lookup(self, Rho_estimate, Rho_min, Rho_max, T, P)

    def Boiling_p_rho(self, T, rho_l, rho_v):
        r"""
        Calculate both boiling temperature and density of liquid and vapor phase.
        :type T: float
        :param T: [K]
        :type rho_l: float
        :param rho_l: [kg/m3]
        :type rho_v: float
        :param rho_v: [kg/m3]
        :rtype: float
        :return: 
        """
        return _NaCl.cxThermal_Boiling_p_rho(self, T, rho_l, rho_v)

    def Boiling_T_rho(self, p, rho_l, rho_v):
        r"""
        Calculate both boiling temperature and density of liquid and vapor phase.
        :type p: float
        :param p: [Pa]
        :type rho_l: float
        :param rho_l: [kg/m3]
        :type rho_v: float
        :param rho_v: [kg/m3]
        :rtype: float
        :return: 
        """
        return _NaCl.cxThermal_Boiling_T_rho(self, p, rho_l, rho_v)

    def Boiling_T(self, *args):
        return _NaCl.cxThermal_Boiling_T(self, *args)

    def Boiling_p(self, *args):
        return _NaCl.cxThermal_Boiling_p(self, *args)

    def Triangulation(self, x_poly, y_poly, pointInMesh, dxdy, trimesh, normalize=True):
        return _NaCl.cxThermal_Triangulation(self, x_poly, y_poly, pointInMesh, dxdy, trimesh, normalize)

    def writeTriMesh2Txt(self, *args):
        return _NaCl.cxThermal_writeTriMesh2Txt(self, *args)

    def writeXXYYZZ2VTU(self, vtuFile, XX, YY, ZZ, scale_x=1.0, scale_y=1.0, scale_z=1.0):
        return _NaCl.cxThermal_writeXXYYZZ2VTU(self, vtuFile, XX, YY, ZZ, scale_x, scale_y, scale_z)

    def writeLine2VTU(self, vtuFile, X, Y, Z, scale_x=1.0, scale_y=1.0, scale_z=1.0):
        return _NaCl.cxThermal_writeLine2VTU(self, vtuFile, X, Y, Z, scale_x, scale_y, scale_z)

    def writePhaseBoundaries2VTU(self, outputPath, phaseBoundaries, scale_T=1, scale_p=1, scale_X=1):
        return _NaCl.cxThermal_writePhaseBoundaries2VTU(self, outputPath, phaseBoundaries, scale_T, scale_p, scale_X)

    def normalizePhaseBoundaries(self, phaseBoundaries):
        return _NaCl.cxThermal_normalizePhaseBoundaries(self, phaseBoundaries)

    def writeMeshGrid2VTK(self, vtkFile, x, xTitle, y, yTitle, z, zTitle, props, propsInfo, isNormalize=False):
        return _NaCl.cxThermal_writeMeshGrid2VTK(self, vtkFile, x, xTitle, y, yTitle, z, zTitle, props, propsInfo, isNormalize)

    def Boiling_p_props(self, T):
        return _NaCl.cxThermal_Boiling_p_props(self, T)

    def Boiling_T_props(self, p):
        return _NaCl.cxThermal_Boiling_T_props(self, p)

    def UpdateState_TPX(self, *args):
        return _NaCl.cxThermal_UpdateState_TPX(self, *args)

    def UpdateState_HPX(self, *args):
        return _NaCl.cxThermal_UpdateState_HPX(self, *args)

    def getLutInfo(self, file_lut, printSummary=True):
        return _NaCl.cxThermal_getLutInfo(self, file_lut, printSummary)

# Register cxThermal in _NaCl:
_NaCl.cxThermal_swigregister(cxThermal)
cvar = _NaCl.cvar
R = cvar.R


def fill_prop2data(pEOS, prop, update_which_props, data):
    return _NaCl.fill_prop2data(pEOS, prop, update_which_props, data)
class H_halite_ref(object):
    r""" Reference point and enthalpy of halite. The JANAF table can be found at https://janaf.nist.gov. While this reference point data comes from Falko Vehling(personal communication: he said this table comes from an attached table to a paper)"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    H = property(_NaCl.H_halite_ref_H_get, doc=r""" Enthalpy of halite at reference point (T0, P0). TODO: need to confirm the reference point of halite enthalpy.""")
    T_C = property(_NaCl.H_halite_ref_T_C_get, doc=r""" Temperature [deg.C] at reference point""")
    P = property(_NaCl.H_halite_ref_P_get, doc=r""" Pressure [Pa] at reference point""")
    R0 = property(_NaCl.H_halite_ref_R0_get, _NaCl.H_halite_ref_R0_set, doc=r""" H1 = R0 + R1*T + R2*T^2 + R3*T^3""")
    R1 = property(_NaCl.H_halite_ref_R1_get, _NaCl.H_halite_ref_R1_set, doc=r""" Coefficient R1 as function of P in equation of H1: R1 = R1[0] + R1[1]*P0 + R1[2]*P0^2""")
    R2 = property(_NaCl.H_halite_ref_R2_get, _NaCl.H_halite_ref_R2_set, doc=r""" Coefficient R2 as function of P in equation of H1: R2 = R2[0] + R2[1]*P0""")
    R3 = property(_NaCl.H_halite_ref_R3_get, _NaCl.H_halite_ref_R3_set, doc=r""" Coefficient R2 as function of P in equation of H1: R2 = R1[0] + R2[1]*P0""")

    def __init__(self):
        _NaCl.H_halite_ref_swiginit(self, _NaCl.new_H_halite_ref())
    __swig_destroy__ = _NaCl.delete_H_halite_ref

# Register H_halite_ref in _NaCl:
_NaCl.H_halite_ref_swigregister(H_halite_ref)
M = cvar.M
T_Triple_C = cvar.T_Triple_C
T_Triple = cvar.T_Triple
P_Triple = cvar.P_Triple
log10_P_Triple = cvar.log10_P_Triple
inv_T_Triple = cvar.inv_T_Triple
T_Triple_sqr = cvar.T_Triple_sqr
T_Triple_sqr_C = cvar.T_Triple_sqr_C
slope_Clapeyron = cvar.slope_Clapeyron

class Coeff_Rho(object):
    r"""
    Parameters for halite and liquid NaCl volumetric properties. See table 3 of 'Driesner2007Part2'.

    Notes: In order to make the input pressure with unit [Pa], change _3, l_4 :math:`to be 0.005727E-5 and 0.002715E-5, respectively. Because the pressure unit in equation (1-3) is [bar]. In addition, change` m_4, m_5 :math:`to be -1.5259E-10, 5.5058E-13 for the same reason. (See equation 5,6 of \cite Driesner2007Part2)`
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    l = property(_NaCl.Coeff_Rho_l_get)
    m = property(_NaCl.Coeff_Rho_m_get)

    def __init__(self):
        _NaCl.Coeff_Rho_swiginit(self, _NaCl.new_Coeff_Rho())
    __swig_destroy__ = _NaCl.delete_Coeff_Rho

# Register Coeff_Rho in _NaCl:
_NaCl.Coeff_Rho_swigregister(Coeff_Rho)
class Coeff_H(object):
    r"""
    Parameters for enthalpies. See table 5 of 'Driesner2007Part2'.

    Notes: r[3] is a function of T, need to updated inside function Cp .

    Again, in order to make input P with unit [Pa], multiply 1E-5 and 1E-10 to :math:`r_3, r_4`, respectively, see equation 30 of 'Driesner2007Part2'.

    Warning: Why the r4 is written as summation of some tiny values in the Tab. 5 ?

    TODO: Need to confirm r4 in Tab.5 is correct
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r = property(_NaCl.Coeff_H_r_get, _NaCl.Coeff_H_r_set)
    r3 = property(_NaCl.Coeff_H_r3_get)

    def __init__(self):
        _NaCl.Coeff_H_swiginit(self, _NaCl.new_Coeff_H())
    __swig_destroy__ = _NaCl.delete_Coeff_H

# Register Coeff_H in _NaCl:
_NaCl.Coeff_H_swigregister(Coeff_H)
class cNaCl(cxThermal):
    r"""
    Class of NaCl EOS.

    Image: Melting_Sublimation_Boiling_NaCl.svg(The), sublimation and melting curve of NaCl. width=50%
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _NaCl.cNaCl_swiginit(self, _NaCl.new_cNaCl(*args))
    __swig_destroy__ = _NaCl.delete_cNaCl

    def name(self):
        return _NaCl.cNaCl_name(self)

    def name_backend(self):
        return _NaCl.cNaCl_name_backend(self)

    def Tmin(self):
        return _NaCl.cNaCl_Tmin(self)

    def Tmax(self):
        return _NaCl.cNaCl_Tmax(self)

    def pmin(self):
        return _NaCl.cNaCl_pmin(self)

    def pmax(self):
        return _NaCl.cNaCl_pmax(self)

    def Ttriple(self):
        return _NaCl.cNaCl_Ttriple(self)

    def T_critical(self):
        return _NaCl.cNaCl_T_critical(self)

    def p_critical(self):
        return _NaCl.cNaCl_p_critical(self)

    def rhomass_critical(self):
        return _NaCl.cNaCl_rhomass_critical(self)

    def molar_mass(self):
        return _NaCl.cNaCl_molar_mass(self)

    def Melting_T_C(self, P):
        return _NaCl.cNaCl_Melting_T_C(self, P)

    def Rho_Solid(self, *args):
        return _NaCl.cNaCl_Rho_Solid(self, *args)

    def Rho_Liquid(self, *args):
        return _NaCl.cNaCl_Rho_Liquid(self, *args)

    def Cp_Liquid(self, T, P):
        return _NaCl.cNaCl_Cp_Liquid(self, T, P)

    def Boiling_p(self, *args):
        return _NaCl.cNaCl_Boiling_p(self, *args)

    def Melting_T(self, *args):
        return _NaCl.cNaCl_Melting_T(self, *args)

    def Sublimation_p(self, *args):
        return _NaCl.cNaCl_Sublimation_p(self, *args)

    def Melting_p(self, *args):
        return _NaCl.cNaCl_Melting_p(self, *args)

    def Boiling_T(self, *args):
        return _NaCl.cNaCl_Boiling_T(self, *args)

    def Sublimation_T(self, *args):
        return _NaCl.cNaCl_Sublimation_T(self, *args)

    def T_Vapor(self, *args):
        return _NaCl.cNaCl_T_Vapor(self, *args)

    def P_Vapor(self, *args):
        return _NaCl.cNaCl_P_Vapor(self, *args)

    def Cp_Solid(self, *args):
        return _NaCl.cNaCl_Cp_Solid(self, *args)

    def DeltaH_fus(self, T, P):
        return _NaCl.cNaCl_DeltaH_fus(self, T, P)

    def H_Solid(self, *args):
        return _NaCl.cNaCl_H_Solid(self, *args)

    def H_Liquid(self, *args):
        return _NaCl.cNaCl_H_Liquid(self, *args)

# Register cNaCl in _NaCl:
_NaCl.cNaCl_swigregister(cNaCl)

