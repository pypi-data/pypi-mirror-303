# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _H2ONaCl
else:
    import _H2ONaCl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _H2ONaCl.delete_SwigPyIterator

    def value(self):
        return _H2ONaCl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _H2ONaCl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _H2ONaCl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _H2ONaCl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _H2ONaCl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _H2ONaCl.SwigPyIterator_copy(self)

    def next(self):
        return _H2ONaCl.SwigPyIterator_next(self)

    def __next__(self):
        return _H2ONaCl.SwigPyIterator___next__(self)

    def previous(self):
        return _H2ONaCl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _H2ONaCl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _H2ONaCl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _H2ONaCl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _H2ONaCl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _H2ONaCl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _H2ONaCl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _H2ONaCl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _H2ONaCl:
_H2ONaCl.SwigPyIterator_swigregister(SwigPyIterator)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.IntVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.IntVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.IntVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.IntVector_pop(self)

    def append(self, x):
        return _H2ONaCl.IntVector_append(self, x)

    def empty(self):
        return _H2ONaCl.IntVector_empty(self)

    def size(self):
        return _H2ONaCl.IntVector_size(self)

    def swap(self, v):
        return _H2ONaCl.IntVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.IntVector_begin(self)

    def end(self):
        return _H2ONaCl.IntVector_end(self)

    def rbegin(self):
        return _H2ONaCl.IntVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.IntVector_rend(self)

    def clear(self):
        return _H2ONaCl.IntVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.IntVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.IntVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.IntVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.IntVector_swiginit(self, _H2ONaCl.new_IntVector(*args))

    def push_back(self, x):
        return _H2ONaCl.IntVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.IntVector_front(self)

    def back(self):
        return _H2ONaCl.IntVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.IntVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.IntVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.IntVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.IntVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_IntVector

# Register IntVector in _H2ONaCl:
_H2ONaCl.IntVector_swigregister(IntVector)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.DoubleVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.DoubleVector_pop(self)

    def append(self, x):
        return _H2ONaCl.DoubleVector_append(self, x)

    def empty(self):
        return _H2ONaCl.DoubleVector_empty(self)

    def size(self):
        return _H2ONaCl.DoubleVector_size(self)

    def swap(self, v):
        return _H2ONaCl.DoubleVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.DoubleVector_begin(self)

    def end(self):
        return _H2ONaCl.DoubleVector_end(self)

    def rbegin(self):
        return _H2ONaCl.DoubleVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.DoubleVector_rend(self)

    def clear(self):
        return _H2ONaCl.DoubleVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.DoubleVector_swiginit(self, _H2ONaCl.new_DoubleVector(*args))

    def push_back(self, x):
        return _H2ONaCl.DoubleVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.DoubleVector_front(self)

    def back(self):
        return _H2ONaCl.DoubleVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.DoubleVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.DoubleVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_DoubleVector

# Register DoubleVector in _H2ONaCl:
_H2ONaCl.DoubleVector_swigregister(DoubleVector)
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.StringVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.StringVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.StringVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.StringVector_pop(self)

    def append(self, x):
        return _H2ONaCl.StringVector_append(self, x)

    def empty(self):
        return _H2ONaCl.StringVector_empty(self)

    def size(self):
        return _H2ONaCl.StringVector_size(self)

    def swap(self, v):
        return _H2ONaCl.StringVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.StringVector_begin(self)

    def end(self):
        return _H2ONaCl.StringVector_end(self)

    def rbegin(self):
        return _H2ONaCl.StringVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.StringVector_rend(self)

    def clear(self):
        return _H2ONaCl.StringVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.StringVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.StringVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.StringVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.StringVector_swiginit(self, _H2ONaCl.new_StringVector(*args))

    def push_back(self, x):
        return _H2ONaCl.StringVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.StringVector_front(self)

    def back(self):
        return _H2ONaCl.StringVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.StringVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.StringVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.StringVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.StringVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_StringVector

# Register StringVector in _H2ONaCl:
_H2ONaCl.StringVector_swigregister(StringVector)
class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.ConstCharVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.ConstCharVector_pop(self)

    def append(self, x):
        return _H2ONaCl.ConstCharVector_append(self, x)

    def empty(self):
        return _H2ONaCl.ConstCharVector_empty(self)

    def size(self):
        return _H2ONaCl.ConstCharVector_size(self)

    def swap(self, v):
        return _H2ONaCl.ConstCharVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.ConstCharVector_begin(self)

    def end(self):
        return _H2ONaCl.ConstCharVector_end(self)

    def rbegin(self):
        return _H2ONaCl.ConstCharVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.ConstCharVector_rend(self)

    def clear(self):
        return _H2ONaCl.ConstCharVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.ConstCharVector_swiginit(self, _H2ONaCl.new_ConstCharVector(*args))

    def push_back(self, x):
        return _H2ONaCl.ConstCharVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.ConstCharVector_front(self)

    def back(self):
        return _H2ONaCl.ConstCharVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.ConstCharVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_ConstCharVector

# Register ConstCharVector in _H2ONaCl:
_H2ONaCl.ConstCharVector_swigregister(ConstCharVector)
class UnsignedLongVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.UnsignedLongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.UnsignedLongVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.UnsignedLongVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.UnsignedLongVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.UnsignedLongVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.UnsignedLongVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.UnsignedLongVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.UnsignedLongVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.UnsignedLongVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.UnsignedLongVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.UnsignedLongVector_pop(self)

    def append(self, x):
        return _H2ONaCl.UnsignedLongVector_append(self, x)

    def empty(self):
        return _H2ONaCl.UnsignedLongVector_empty(self)

    def size(self):
        return _H2ONaCl.UnsignedLongVector_size(self)

    def swap(self, v):
        return _H2ONaCl.UnsignedLongVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.UnsignedLongVector_begin(self)

    def end(self):
        return _H2ONaCl.UnsignedLongVector_end(self)

    def rbegin(self):
        return _H2ONaCl.UnsignedLongVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.UnsignedLongVector_rend(self)

    def clear(self):
        return _H2ONaCl.UnsignedLongVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.UnsignedLongVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.UnsignedLongVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.UnsignedLongVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.UnsignedLongVector_swiginit(self, _H2ONaCl.new_UnsignedLongVector(*args))

    def push_back(self, x):
        return _H2ONaCl.UnsignedLongVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.UnsignedLongVector_front(self)

    def back(self):
        return _H2ONaCl.UnsignedLongVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.UnsignedLongVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.UnsignedLongVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.UnsignedLongVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.UnsignedLongVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.UnsignedLongVector_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_UnsignedLongVector

# Register UnsignedLongVector in _H2ONaCl:
_H2ONaCl.UnsignedLongVector_swigregister(UnsignedLongVector)
class vector_vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.vector_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.vector_vector_double___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.vector_vector_double___bool__(self)

    def __len__(self):
        return _H2ONaCl.vector_vector_double___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.vector_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.vector_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.vector_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.vector_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.vector_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.vector_vector_double___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.vector_vector_double_pop(self)

    def append(self, x):
        return _H2ONaCl.vector_vector_double_append(self, x)

    def empty(self):
        return _H2ONaCl.vector_vector_double_empty(self)

    def size(self):
        return _H2ONaCl.vector_vector_double_size(self)

    def swap(self, v):
        return _H2ONaCl.vector_vector_double_swap(self, v)

    def begin(self):
        return _H2ONaCl.vector_vector_double_begin(self)

    def end(self):
        return _H2ONaCl.vector_vector_double_end(self)

    def rbegin(self):
        return _H2ONaCl.vector_vector_double_rbegin(self)

    def rend(self):
        return _H2ONaCl.vector_vector_double_rend(self)

    def clear(self):
        return _H2ONaCl.vector_vector_double_clear(self)

    def get_allocator(self):
        return _H2ONaCl.vector_vector_double_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.vector_vector_double_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.vector_vector_double_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.vector_vector_double_swiginit(self, _H2ONaCl.new_vector_vector_double(*args))

    def push_back(self, x):
        return _H2ONaCl.vector_vector_double_push_back(self, x)

    def front(self):
        return _H2ONaCl.vector_vector_double_front(self)

    def back(self):
        return _H2ONaCl.vector_vector_double_back(self)

    def assign(self, n, x):
        return _H2ONaCl.vector_vector_double_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.vector_vector_double_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.vector_vector_double_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.vector_vector_double_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.vector_vector_double_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_vector_vector_double

# Register vector_vector_double in _H2ONaCl:
_H2ONaCl.vector_vector_double_swigregister(vector_vector_double)
class vector_vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.vector_vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.vector_vector_int___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.vector_vector_int___bool__(self)

    def __len__(self):
        return _H2ONaCl.vector_vector_int___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.vector_vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.vector_vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.vector_vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.vector_vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.vector_vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.vector_vector_int___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.vector_vector_int_pop(self)

    def append(self, x):
        return _H2ONaCl.vector_vector_int_append(self, x)

    def empty(self):
        return _H2ONaCl.vector_vector_int_empty(self)

    def size(self):
        return _H2ONaCl.vector_vector_int_size(self)

    def swap(self, v):
        return _H2ONaCl.vector_vector_int_swap(self, v)

    def begin(self):
        return _H2ONaCl.vector_vector_int_begin(self)

    def end(self):
        return _H2ONaCl.vector_vector_int_end(self)

    def rbegin(self):
        return _H2ONaCl.vector_vector_int_rbegin(self)

    def rend(self):
        return _H2ONaCl.vector_vector_int_rend(self)

    def clear(self):
        return _H2ONaCl.vector_vector_int_clear(self)

    def get_allocator(self):
        return _H2ONaCl.vector_vector_int_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.vector_vector_int_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.vector_vector_int_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.vector_vector_int_swiginit(self, _H2ONaCl.new_vector_vector_int(*args))

    def push_back(self, x):
        return _H2ONaCl.vector_vector_int_push_back(self, x)

    def front(self):
        return _H2ONaCl.vector_vector_int_front(self)

    def back(self):
        return _H2ONaCl.vector_vector_int_back(self)

    def assign(self, n, x):
        return _H2ONaCl.vector_vector_int_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.vector_vector_int_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.vector_vector_int_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.vector_vector_int_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.vector_vector_int_capacity(self)
    __swig_destroy__ = _H2ONaCl.delete_vector_vector_int

# Register vector_vector_int in _H2ONaCl:
_H2ONaCl.vector_vector_int_swigregister(vector_vector_int)
class map_string_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.map_string_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.map_string_string___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.map_string_string___bool__(self)

    def __len__(self):
        return _H2ONaCl.map_string_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _H2ONaCl.map_string_string___getitem__(self, key)

    def __delitem__(self, key):
        return _H2ONaCl.map_string_string___delitem__(self, key)

    def has_key(self, key):
        return _H2ONaCl.map_string_string_has_key(self, key)

    def keys(self):
        return _H2ONaCl.map_string_string_keys(self)

    def values(self):
        return _H2ONaCl.map_string_string_values(self)

    def items(self):
        return _H2ONaCl.map_string_string_items(self)

    def __contains__(self, key):
        return _H2ONaCl.map_string_string___contains__(self, key)

    def key_iterator(self):
        return _H2ONaCl.map_string_string_key_iterator(self)

    def value_iterator(self):
        return _H2ONaCl.map_string_string_value_iterator(self)

    def __setitem__(self, *args):
        return _H2ONaCl.map_string_string___setitem__(self, *args)

    def asdict(self):
        return _H2ONaCl.map_string_string_asdict(self)

    def __init__(self, *args):
        _H2ONaCl.map_string_string_swiginit(self, _H2ONaCl.new_map_string_string(*args))

    def empty(self):
        return _H2ONaCl.map_string_string_empty(self)

    def size(self):
        return _H2ONaCl.map_string_string_size(self)

    def swap(self, v):
        return _H2ONaCl.map_string_string_swap(self, v)

    def begin(self):
        return _H2ONaCl.map_string_string_begin(self)

    def end(self):
        return _H2ONaCl.map_string_string_end(self)

    def rbegin(self):
        return _H2ONaCl.map_string_string_rbegin(self)

    def rend(self):
        return _H2ONaCl.map_string_string_rend(self)

    def clear(self):
        return _H2ONaCl.map_string_string_clear(self)

    def get_allocator(self):
        return _H2ONaCl.map_string_string_get_allocator(self)

    def count(self, x):
        return _H2ONaCl.map_string_string_count(self, x)

    def erase(self, *args):
        return _H2ONaCl.map_string_string_erase(self, *args)

    def find(self, x):
        return _H2ONaCl.map_string_string_find(self, x)

    def lower_bound(self, x):
        return _H2ONaCl.map_string_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _H2ONaCl.map_string_string_upper_bound(self, x)
    __swig_destroy__ = _H2ONaCl.delete_map_string_string

# Register map_string_string in _H2ONaCl:
_H2ONaCl.map_string_string_swigregister(map_string_string)
MixPhaseRegion = _H2ONaCl.MixPhaseRegion
r"""MixPhaseRegion is used in AMR lookup table."""
SinglePhase_L = _H2ONaCl.SinglePhase_L
r"""Single phase: liquid. Regard single-phase "liquid-like" and "vapor-like" fluid as "Single phase liquid" as well."""
SinglePhase_V = _H2ONaCl.SinglePhase_V
r"""Single phase: vapor"""
SinglePhase_S = _H2ONaCl.SinglePhase_S
r"""Single phase: solid, e.g. NaCl"""
Supercritical = _H2ONaCl.Supercritical
r"""Supercritical (p > pc, T > Tc) for pure water"""
Supercritical_vapor = _H2ONaCl.Supercritical_vapor
r"""Supercritical vapor (p < pc, T > Tc) for pure water"""
Supercritical_liquid = _H2ONaCl.Supercritical_liquid
r"""Supercritical liquid (p > pc, T < Tc) for pure water"""
Critical = _H2ONaCl.Critical
r"""At the critical point of pure water or on critical curve of H2ONaCl"""
TwoPhase_VL_Water = _H2ONaCl.TwoPhase_VL_Water
r"""Two phase: liquid + vapor, salinity = 0"""
TwoPhase_LH = _H2ONaCl.TwoPhase_LH
r"""Two phase: liquid + halite"""
TwoPhase_VH = _H2ONaCl.TwoPhase_VH
r"""Two phase: vapor + halite"""
TwoPhase_VL = _H2ONaCl.TwoPhase_VL
r"""Two phase: VL region"""
ThreePhase_VLH = _H2ONaCl.ThreePhase_VLH
r"""Three phase: vapor + liquid + halite"""
UnknownPhase = _H2ONaCl.UnknownPhase
r"""UnknownPhase phase region for bug report"""
NotImposed = _H2ONaCl.NotImposed
r"""Phase is not imposed"""
class ThermodynamicProperties(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_H2ONaCl.ThermodynamicProperties_T_get, _H2ONaCl.ThermodynamicProperties_T_set)
    p = property(_H2ONaCl.ThermodynamicProperties_p_get, _H2ONaCl.ThermodynamicProperties_p_set)
    X = property(_H2ONaCl.ThermodynamicProperties_X_get, _H2ONaCl.ThermodynamicProperties_X_set)
    H = property(_H2ONaCl.ThermodynamicProperties_H_get, _H2ONaCl.ThermodynamicProperties_H_set)
    phase = property(_H2ONaCl.ThermodynamicProperties_phase_get, _H2ONaCl.ThermodynamicProperties_phase_set)
    S_l = property(_H2ONaCl.ThermodynamicProperties_S_l_get, _H2ONaCl.ThermodynamicProperties_S_l_set)
    S_v = property(_H2ONaCl.ThermodynamicProperties_S_v_get, _H2ONaCl.ThermodynamicProperties_S_v_set)
    S_h = property(_H2ONaCl.ThermodynamicProperties_S_h_get, _H2ONaCl.ThermodynamicProperties_S_h_set)
    X_l = property(_H2ONaCl.ThermodynamicProperties_X_l_get, _H2ONaCl.ThermodynamicProperties_X_l_set)
    X_v = property(_H2ONaCl.ThermodynamicProperties_X_v_get, _H2ONaCl.ThermodynamicProperties_X_v_set)
    Rho_l = property(_H2ONaCl.ThermodynamicProperties_Rho_l_get, _H2ONaCl.ThermodynamicProperties_Rho_l_set)
    Rho_v = property(_H2ONaCl.ThermodynamicProperties_Rho_v_get, _H2ONaCl.ThermodynamicProperties_Rho_v_set)
    Rho_h = property(_H2ONaCl.ThermodynamicProperties_Rho_h_get, _H2ONaCl.ThermodynamicProperties_Rho_h_set)
    H_l = property(_H2ONaCl.ThermodynamicProperties_H_l_get, _H2ONaCl.ThermodynamicProperties_H_l_set)
    H_v = property(_H2ONaCl.ThermodynamicProperties_H_v_get, _H2ONaCl.ThermodynamicProperties_H_v_set)
    H_h = property(_H2ONaCl.ThermodynamicProperties_H_h_get, _H2ONaCl.ThermodynamicProperties_H_h_set)
    Cp_l = property(_H2ONaCl.ThermodynamicProperties_Cp_l_get, _H2ONaCl.ThermodynamicProperties_Cp_l_set)
    Cp_v = property(_H2ONaCl.ThermodynamicProperties_Cp_v_get, _H2ONaCl.ThermodynamicProperties_Cp_v_set)
    Cp_h = property(_H2ONaCl.ThermodynamicProperties_Cp_h_get, _H2ONaCl.ThermodynamicProperties_Cp_h_set)
    Mu_l = property(_H2ONaCl.ThermodynamicProperties_Mu_l_get, _H2ONaCl.ThermodynamicProperties_Mu_l_set)
    Mu_v = property(_H2ONaCl.ThermodynamicProperties_Mu_v_get, _H2ONaCl.ThermodynamicProperties_Mu_v_set)
    Rho = property(_H2ONaCl.ThermodynamicProperties_Rho_get, _H2ONaCl.ThermodynamicProperties_Rho_set)
    Cp = property(_H2ONaCl.ThermodynamicProperties_Cp_get, _H2ONaCl.ThermodynamicProperties_Cp_set)
    Mu = property(_H2ONaCl.ThermodynamicProperties_Mu_get, _H2ONaCl.ThermodynamicProperties_Mu_set)
    dRhodP = property(_H2ONaCl.ThermodynamicProperties_dRhodP_get, _H2ONaCl.ThermodynamicProperties_dRhodP_set)
    dRhodP_l = property(_H2ONaCl.ThermodynamicProperties_dRhodP_l_get, _H2ONaCl.ThermodynamicProperties_dRhodP_l_set)
    dRhodP_v = property(_H2ONaCl.ThermodynamicProperties_dRhodP_v_get, _H2ONaCl.ThermodynamicProperties_dRhodP_v_set)
    dRhodT = property(_H2ONaCl.ThermodynamicProperties_dRhodT_get, _H2ONaCl.ThermodynamicProperties_dRhodT_set)
    dRhodT_l = property(_H2ONaCl.ThermodynamicProperties_dRhodT_l_get, _H2ONaCl.ThermodynamicProperties_dRhodT_l_set)
    dRhodT_v = property(_H2ONaCl.ThermodynamicProperties_dRhodT_v_get, _H2ONaCl.ThermodynamicProperties_dRhodT_v_set)
    IsothermalCompressibility = property(_H2ONaCl.ThermodynamicProperties_IsothermalCompressibility_get, _H2ONaCl.ThermodynamicProperties_IsothermalCompressibility_set)
    IsothermalCompressibility_l = property(_H2ONaCl.ThermodynamicProperties_IsothermalCompressibility_l_get, _H2ONaCl.ThermodynamicProperties_IsothermalCompressibility_l_set)
    IsothermalCompressibility_v = property(_H2ONaCl.ThermodynamicProperties_IsothermalCompressibility_v_get, _H2ONaCl.ThermodynamicProperties_IsothermalCompressibility_v_set)
    IsobaricExpansivity = property(_H2ONaCl.ThermodynamicProperties_IsobaricExpansivity_get, _H2ONaCl.ThermodynamicProperties_IsobaricExpansivity_set)
    IsobaricExpansivity_l = property(_H2ONaCl.ThermodynamicProperties_IsobaricExpansivity_l_get, _H2ONaCl.ThermodynamicProperties_IsobaricExpansivity_l_set)
    IsobaricExpansivity_v = property(_H2ONaCl.ThermodynamicProperties_IsobaricExpansivity_v_get, _H2ONaCl.ThermodynamicProperties_IsobaricExpansivity_v_set)
    fluidName = property(_H2ONaCl.ThermodynamicProperties_fluidName_get, _H2ONaCl.ThermodynamicProperties_fluidName_set)

    def info(self, _self):
        return _H2ONaCl.ThermodynamicProperties_info(self, _self)

    def __str__(self):
        return _H2ONaCl.ThermodynamicProperties___str__(self)

    def __init__(self):
        _H2ONaCl.ThermodynamicProperties_swiginit(self, _H2ONaCl.new_ThermodynamicProperties())
    __swig_destroy__ = _H2ONaCl.delete_ThermodynamicProperties

# Register ThermodynamicProperties in _H2ONaCl:
_H2ONaCl.ThermodynamicProperties_swigregister(ThermodynamicProperties)
class ThermodynamicPropertiesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_H2ONaCl.ThermodynamicPropertiesVector_T_get, _H2ONaCl.ThermodynamicPropertiesVector_T_set)
    p = property(_H2ONaCl.ThermodynamicPropertiesVector_p_get, _H2ONaCl.ThermodynamicPropertiesVector_p_set)
    X = property(_H2ONaCl.ThermodynamicPropertiesVector_X_get, _H2ONaCl.ThermodynamicPropertiesVector_X_set)
    H = property(_H2ONaCl.ThermodynamicPropertiesVector_H_get, _H2ONaCl.ThermodynamicPropertiesVector_H_set)
    phase = property(_H2ONaCl.ThermodynamicPropertiesVector_phase_get, _H2ONaCl.ThermodynamicPropertiesVector_phase_set)
    S_l = property(_H2ONaCl.ThermodynamicPropertiesVector_S_l_get, _H2ONaCl.ThermodynamicPropertiesVector_S_l_set)
    S_v = property(_H2ONaCl.ThermodynamicPropertiesVector_S_v_get, _H2ONaCl.ThermodynamicPropertiesVector_S_v_set)
    S_h = property(_H2ONaCl.ThermodynamicPropertiesVector_S_h_get, _H2ONaCl.ThermodynamicPropertiesVector_S_h_set)
    X_l = property(_H2ONaCl.ThermodynamicPropertiesVector_X_l_get, _H2ONaCl.ThermodynamicPropertiesVector_X_l_set)
    X_v = property(_H2ONaCl.ThermodynamicPropertiesVector_X_v_get, _H2ONaCl.ThermodynamicPropertiesVector_X_v_set)
    Rho_l = property(_H2ONaCl.ThermodynamicPropertiesVector_Rho_l_get, _H2ONaCl.ThermodynamicPropertiesVector_Rho_l_set)
    Rho_v = property(_H2ONaCl.ThermodynamicPropertiesVector_Rho_v_get, _H2ONaCl.ThermodynamicPropertiesVector_Rho_v_set)
    Rho_h = property(_H2ONaCl.ThermodynamicPropertiesVector_Rho_h_get, _H2ONaCl.ThermodynamicPropertiesVector_Rho_h_set)
    H_l = property(_H2ONaCl.ThermodynamicPropertiesVector_H_l_get, _H2ONaCl.ThermodynamicPropertiesVector_H_l_set)
    H_v = property(_H2ONaCl.ThermodynamicPropertiesVector_H_v_get, _H2ONaCl.ThermodynamicPropertiesVector_H_v_set)
    H_h = property(_H2ONaCl.ThermodynamicPropertiesVector_H_h_get, _H2ONaCl.ThermodynamicPropertiesVector_H_h_set)
    Cp_l = property(_H2ONaCl.ThermodynamicPropertiesVector_Cp_l_get, _H2ONaCl.ThermodynamicPropertiesVector_Cp_l_set)
    Cp_v = property(_H2ONaCl.ThermodynamicPropertiesVector_Cp_v_get, _H2ONaCl.ThermodynamicPropertiesVector_Cp_v_set)
    Cp_h = property(_H2ONaCl.ThermodynamicPropertiesVector_Cp_h_get, _H2ONaCl.ThermodynamicPropertiesVector_Cp_h_set)
    Mu_l = property(_H2ONaCl.ThermodynamicPropertiesVector_Mu_l_get, _H2ONaCl.ThermodynamicPropertiesVector_Mu_l_set)
    Mu_v = property(_H2ONaCl.ThermodynamicPropertiesVector_Mu_v_get, _H2ONaCl.ThermodynamicPropertiesVector_Mu_v_set)
    Rho = property(_H2ONaCl.ThermodynamicPropertiesVector_Rho_get, _H2ONaCl.ThermodynamicPropertiesVector_Rho_set)
    Cp = property(_H2ONaCl.ThermodynamicPropertiesVector_Cp_get, _H2ONaCl.ThermodynamicPropertiesVector_Cp_set)
    Mu = property(_H2ONaCl.ThermodynamicPropertiesVector_Mu_get, _H2ONaCl.ThermodynamicPropertiesVector_Mu_set)
    dRhodP = property(_H2ONaCl.ThermodynamicPropertiesVector_dRhodP_get, _H2ONaCl.ThermodynamicPropertiesVector_dRhodP_set)
    dRhodP_l = property(_H2ONaCl.ThermodynamicPropertiesVector_dRhodP_l_get, _H2ONaCl.ThermodynamicPropertiesVector_dRhodP_l_set)
    dRhodP_v = property(_H2ONaCl.ThermodynamicPropertiesVector_dRhodP_v_get, _H2ONaCl.ThermodynamicPropertiesVector_dRhodP_v_set)
    dRhodT = property(_H2ONaCl.ThermodynamicPropertiesVector_dRhodT_get, _H2ONaCl.ThermodynamicPropertiesVector_dRhodT_set)
    dRhodT_l = property(_H2ONaCl.ThermodynamicPropertiesVector_dRhodT_l_get, _H2ONaCl.ThermodynamicPropertiesVector_dRhodT_l_set)
    dRhodT_v = property(_H2ONaCl.ThermodynamicPropertiesVector_dRhodT_v_get, _H2ONaCl.ThermodynamicPropertiesVector_dRhodT_v_set)
    IsothermalCompressibility = property(_H2ONaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_get, _H2ONaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_set)
    IsothermalCompressibility_l = property(_H2ONaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_l_get, _H2ONaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_l_set)
    IsothermalCompressibility_v = property(_H2ONaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_v_get, _H2ONaCl.ThermodynamicPropertiesVector_IsothermalCompressibility_v_set)
    IsobaricExpansivity = property(_H2ONaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_get, _H2ONaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_set)
    IsobaricExpansivity_l = property(_H2ONaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_l_get, _H2ONaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_l_set)
    IsobaricExpansivity_v = property(_H2ONaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_v_get, _H2ONaCl.ThermodynamicPropertiesVector_IsobaricExpansivity_v_set)
    fluidName = property(_H2ONaCl.ThermodynamicPropertiesVector_fluidName_get, _H2ONaCl.ThermodynamicPropertiesVector_fluidName_set)

    def info(self, _self):
        return _H2ONaCl.ThermodynamicPropertiesVector_info(self, _self)

    def __str__(self):
        return _H2ONaCl.ThermodynamicPropertiesVector___str__(self)

    def __init__(self):
        _H2ONaCl.ThermodynamicPropertiesVector_swiginit(self, _H2ONaCl.new_ThermodynamicPropertiesVector())
    __swig_destroy__ = _H2ONaCl.delete_ThermodynamicPropertiesVector

# Register ThermodynamicPropertiesVector in _H2ONaCl:
_H2ONaCl.ThermodynamicPropertiesVector_swigregister(ThermodynamicPropertiesVector)
Vapor = _H2ONaCl.Vapor
Liquid = _H2ONaCl.Liquid
class DeformLinearMesh(object):
    r"""2D Deformable linear "structured" mesh. Related to matplotlib ax.plot_wireframe()"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_H2ONaCl.DeformLinearMesh_T_get, _H2ONaCl.DeformLinearMesh_T_set)
    p = property(_H2ONaCl.DeformLinearMesh_p_get, _H2ONaCl.DeformLinearMesh_p_set)
    X = property(_H2ONaCl.DeformLinearMesh_X_get, _H2ONaCl.DeformLinearMesh_X_set)

    def __init__(self):
        _H2ONaCl.DeformLinearMesh_swiginit(self, _H2ONaCl.new_DeformLinearMesh())
    __swig_destroy__ = _H2ONaCl.delete_DeformLinearMesh

# Register DeformLinearMesh in _H2ONaCl:
_H2ONaCl.DeformLinearMesh_swigregister(DeformLinearMesh)
class TriMesh(object):
    r"""2D triangle mesh structure. Relate to matplotlib ax.tri_plot() in 2D or ax.plot_trisurf() in 3D"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_H2ONaCl.TriMesh_x_get, _H2ONaCl.TriMesh_x_set)
    y = property(_H2ONaCl.TriMesh_y_get, _H2ONaCl.TriMesh_y_set)
    z = property(_H2ONaCl.TriMesh_z_get, _H2ONaCl.TriMesh_z_set)
    connection = property(_H2ONaCl.TriMesh_connection_get, _H2ONaCl.TriMesh_connection_set)
    names = property(_H2ONaCl.TriMesh_names_get, _H2ONaCl.TriMesh_names_set)

    def __init__(self):
        _H2ONaCl.TriMesh_swiginit(self, _H2ONaCl.new_TriMesh())
    __swig_destroy__ = _H2ONaCl.delete_TriMesh

# Register TriMesh in _H2ONaCl:
_H2ONaCl.TriMesh_swigregister(TriMesh)
class Surface(object):
    r"""Data structure for a phase boundary surface"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_H2ONaCl.Surface_name_get, _H2ONaCl.Surface_name_set)
    shortName = property(_H2ONaCl.Surface_shortName_get, _H2ONaCl.Surface_shortName_set)
    mesh = property(_H2ONaCl.Surface_mesh_get, _H2ONaCl.Surface_mesh_set)
    color = property(_H2ONaCl.Surface_color_get, _H2ONaCl.Surface_color_set)

    def __init__(self):
        _H2ONaCl.Surface_swiginit(self, _H2ONaCl.new_Surface())
    __swig_destroy__ = _H2ONaCl.delete_Surface

# Register Surface in _H2ONaCl:
_H2ONaCl.Surface_swigregister(Surface)
class Line(object):
    r"""Data structure for a phase boundary line"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_H2ONaCl.Line_name_get, _H2ONaCl.Line_name_set)
    shortName = property(_H2ONaCl.Line_shortName_get, _H2ONaCl.Line_shortName_set)
    T = property(_H2ONaCl.Line_T_get, _H2ONaCl.Line_T_set)
    p = property(_H2ONaCl.Line_p_get, _H2ONaCl.Line_p_set)
    X = property(_H2ONaCl.Line_X_get, _H2ONaCl.Line_X_set)
    color = property(_H2ONaCl.Line_color_get, _H2ONaCl.Line_color_set)

    def __init__(self):
        _H2ONaCl.Line_swiginit(self, _H2ONaCl.new_Line())
    __swig_destroy__ = _H2ONaCl.delete_Line

# Register Line in _H2ONaCl:
_H2ONaCl.Line_swigregister(Line)
class Point(object):
    r"""Data structure for a phase boundary point"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_H2ONaCl.Point_name_get, _H2ONaCl.Point_name_set)
    shortName = property(_H2ONaCl.Point_shortName_get, _H2ONaCl.Point_shortName_set)
    T = property(_H2ONaCl.Point_T_get, _H2ONaCl.Point_T_set)
    p = property(_H2ONaCl.Point_p_get, _H2ONaCl.Point_p_set)
    X = property(_H2ONaCl.Point_X_get, _H2ONaCl.Point_X_set)
    color = property(_H2ONaCl.Point_color_get, _H2ONaCl.Point_color_set)

    def __init__(self):
        _H2ONaCl.Point_swiginit(self, _H2ONaCl.new_Point())
    __swig_destroy__ = _H2ONaCl.delete_Point

# Register Point in _H2ONaCl:
_H2ONaCl.Point_swigregister(Point)
SCALE_X_linear = _H2ONaCl.SCALE_X_linear
SCALE_X_log = _H2ONaCl.SCALE_X_log
SCALE_X_loglinear = _H2ONaCl.SCALE_X_loglinear
class PhaseBoundaries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    surfaces = property(_H2ONaCl.PhaseBoundaries_surfaces_get, _H2ONaCl.PhaseBoundaries_surfaces_set)
    lines = property(_H2ONaCl.PhaseBoundaries_lines_get, _H2ONaCl.PhaseBoundaries_lines_set)
    points = property(_H2ONaCl.PhaseBoundaries_points_get, _H2ONaCl.PhaseBoundaries_points_set)
    scale_X = property(_H2ONaCl.PhaseBoundaries_scale_X_get, _H2ONaCl.PhaseBoundaries_scale_X_set)
    Xcenter = property(_H2ONaCl.PhaseBoundaries_Xcenter_get, _H2ONaCl.PhaseBoundaries_Xcenter_set)
    ratio_log_to_linear = property(_H2ONaCl.PhaseBoundaries_ratio_log_to_linear_get, _H2ONaCl.PhaseBoundaries_ratio_log_to_linear_set)
    Tmin = property(_H2ONaCl.PhaseBoundaries_Tmin_get, _H2ONaCl.PhaseBoundaries_Tmin_set)
    Tmax = property(_H2ONaCl.PhaseBoundaries_Tmax_get, _H2ONaCl.PhaseBoundaries_Tmax_set)
    pmin = property(_H2ONaCl.PhaseBoundaries_pmin_get, _H2ONaCl.PhaseBoundaries_pmin_set)
    pmax = property(_H2ONaCl.PhaseBoundaries_pmax_get, _H2ONaCl.PhaseBoundaries_pmax_set)
    Xmin = property(_H2ONaCl.PhaseBoundaries_Xmin_get, _H2ONaCl.PhaseBoundaries_Xmin_set)
    Xmax = property(_H2ONaCl.PhaseBoundaries_Xmax_get, _H2ONaCl.PhaseBoundaries_Xmax_set)

    def __init__(self):
        _H2ONaCl.PhaseBoundaries_swiginit(self, _H2ONaCl.new_PhaseBoundaries())
    __swig_destroy__ = _H2ONaCl.delete_PhaseBoundaries

# Register PhaseBoundaries in _H2ONaCl:
_H2ONaCl.PhaseBoundaries_swigregister(PhaseBoundaries)
class Head_AMR_LUT(object):
    r"""Head info of AMR_LUT which are used for Python API"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dim = property(_H2ONaCl.Head_AMR_LUT_dim_get, _H2ONaCl.Head_AMR_LUT_dim_set)
    space = property(_H2ONaCl.Head_AMR_LUT_space_get, _H2ONaCl.Head_AMR_LUT_space_set)
    spaceName = property(_H2ONaCl.Head_AMR_LUT_spaceName_get, _H2ONaCl.Head_AMR_LUT_spaceName_set)
    constWhich = property(_H2ONaCl.Head_AMR_LUT_constWhich_get, _H2ONaCl.Head_AMR_LUT_constWhich_set)
    constWhich_Name = property(_H2ONaCl.Head_AMR_LUT_constWhich_Name_get, _H2ONaCl.Head_AMR_LUT_constWhich_Name_set)
    constValue = property(_H2ONaCl.Head_AMR_LUT_constValue_get, _H2ONaCl.Head_AMR_LUT_constValue_set)
    var_names = property(_H2ONaCl.Head_AMR_LUT_var_names_get, _H2ONaCl.Head_AMR_LUT_var_names_set)
    var_ranges = property(_H2ONaCl.Head_AMR_LUT_var_ranges_get, _H2ONaCl.Head_AMR_LUT_var_ranges_set)
    var_maxResolution = property(_H2ONaCl.Head_AMR_LUT_var_maxResolution_get, _H2ONaCl.Head_AMR_LUT_var_maxResolution_set)
    min_level = property(_H2ONaCl.Head_AMR_LUT_min_level_get, _H2ONaCl.Head_AMR_LUT_min_level_set)
    max_level = property(_H2ONaCl.Head_AMR_LUT_max_level_get, _H2ONaCl.Head_AMR_LUT_max_level_set)
    num_leaves = property(_H2ONaCl.Head_AMR_LUT_num_leaves_get, _H2ONaCl.Head_AMR_LUT_num_leaves_set)
    num_quads = property(_H2ONaCl.Head_AMR_LUT_num_quads_get, _H2ONaCl.Head_AMR_LUT_num_quads_set)
    num_nodes = property(_H2ONaCl.Head_AMR_LUT_num_nodes_get, _H2ONaCl.Head_AMR_LUT_num_nodes_set)
    num_need_refine = property(_H2ONaCl.Head_AMR_LUT_num_need_refine_get, _H2ONaCl.Head_AMR_LUT_num_need_refine_set)
    num_leaves_nextRefine = property(_H2ONaCl.Head_AMR_LUT_num_leaves_nextRefine_get, _H2ONaCl.Head_AMR_LUT_num_leaves_nextRefine_set)
    num_props = property(_H2ONaCl.Head_AMR_LUT_num_props_get, _H2ONaCl.Head_AMR_LUT_num_props_set)
    prop_names = property(_H2ONaCl.Head_AMR_LUT_prop_names_get, _H2ONaCl.Head_AMR_LUT_prop_names_set)
    memory_total = property(_H2ONaCl.Head_AMR_LUT_memory_total_get, _H2ONaCl.Head_AMR_LUT_memory_total_set)
    memory_leaves = property(_H2ONaCl.Head_AMR_LUT_memory_leaves_get, _H2ONaCl.Head_AMR_LUT_memory_leaves_set)
    memory_nonLeaves = property(_H2ONaCl.Head_AMR_LUT_memory_nonLeaves_get, _H2ONaCl.Head_AMR_LUT_memory_nonLeaves_set)
    memory_quads = property(_H2ONaCl.Head_AMR_LUT_memory_quads_get, _H2ONaCl.Head_AMR_LUT_memory_quads_set)
    memory_properties = property(_H2ONaCl.Head_AMR_LUT_memory_properties_get, _H2ONaCl.Head_AMR_LUT_memory_properties_set)

    def __init__(self):
        _H2ONaCl.Head_AMR_LUT_swiginit(self, _H2ONaCl.new_Head_AMR_LUT())
    __swig_destroy__ = _H2ONaCl.delete_Head_AMR_LUT

# Register Head_AMR_LUT in _H2ONaCl:
_H2ONaCl.Head_AMR_LUT_swigregister(Head_AMR_LUT)
class COLOR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r = property(_H2ONaCl.COLOR_r_get, _H2ONaCl.COLOR_r_set)
    g = property(_H2ONaCl.COLOR_g_get, _H2ONaCl.COLOR_g_set)
    b = property(_H2ONaCl.COLOR_b_get, _H2ONaCl.COLOR_b_set)

    def __init__(self):
        _H2ONaCl.COLOR_swiginit(self, _H2ONaCl.new_COLOR())
    __swig_destroy__ = _H2ONaCl.delete_COLOR

# Register COLOR in _H2ONaCl:
_H2ONaCl.COLOR_swigregister(COLOR)
class Polygon_slice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_H2ONaCl.Polygon_slice_T_get, _H2ONaCl.Polygon_slice_T_set)
    P = property(_H2ONaCl.Polygon_slice_P_get, _H2ONaCl.Polygon_slice_P_set)
    X = property(_H2ONaCl.Polygon_slice_X_get, _H2ONaCl.Polygon_slice_X_set)
    H = property(_H2ONaCl.Polygon_slice_H_get, _H2ONaCl.Polygon_slice_H_set)
    name = property(_H2ONaCl.Polygon_slice_name_get, _H2ONaCl.Polygon_slice_name_set)
    fc = property(_H2ONaCl.Polygon_slice_fc_get, _H2ONaCl.Polygon_slice_fc_set)
    ec = property(_H2ONaCl.Polygon_slice_ec_get, _H2ONaCl.Polygon_slice_ec_set)

    def __init__(self, *args):
        _H2ONaCl.Polygon_slice_swiginit(self, _H2ONaCl.new_Polygon_slice(*args))

    def __lt__(self, other):
        return _H2ONaCl.Polygon_slice___lt__(self, other)

    def __eq__(self, other):
        return _H2ONaCl.Polygon_slice___eq__(self, other)

    def info(self, _self):
        return _H2ONaCl.Polygon_slice_info(self, _self)

    def __str__(self):
        return _H2ONaCl.Polygon_slice___str__(self)
    __swig_destroy__ = _H2ONaCl.delete_Polygon_slice

# Register Polygon_slice in _H2ONaCl:
_H2ONaCl.Polygon_slice_swigregister(Polygon_slice)
class Line_slice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_H2ONaCl.Line_slice_T_get, _H2ONaCl.Line_slice_T_set)
    P = property(_H2ONaCl.Line_slice_P_get, _H2ONaCl.Line_slice_P_set)
    X = property(_H2ONaCl.Line_slice_X_get, _H2ONaCl.Line_slice_X_set)
    H = property(_H2ONaCl.Line_slice_H_get, _H2ONaCl.Line_slice_H_set)
    name = property(_H2ONaCl.Line_slice_name_get, _H2ONaCl.Line_slice_name_set)
    color = property(_H2ONaCl.Line_slice_color_get, _H2ONaCl.Line_slice_color_set)
    ls = property(_H2ONaCl.Line_slice_ls_get, _H2ONaCl.Line_slice_ls_set)
    lw = property(_H2ONaCl.Line_slice_lw_get, _H2ONaCl.Line_slice_lw_set)

    def __init__(self, *args):
        _H2ONaCl.Line_slice_swiginit(self, _H2ONaCl.new_Line_slice(*args))

    def __lt__(self, other):
        return _H2ONaCl.Line_slice___lt__(self, other)

    def __eq__(self, other):
        return _H2ONaCl.Line_slice___eq__(self, other)

    def info(self, _self):
        return _H2ONaCl.Line_slice_info(self, _self)

    def __str__(self):
        return _H2ONaCl.Line_slice___str__(self)
    __swig_destroy__ = _H2ONaCl.delete_Line_slice

# Register Line_slice in _H2ONaCl:
_H2ONaCl.Line_slice_swigregister(Line_slice)
class Point_slice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_H2ONaCl.Point_slice_T_get, _H2ONaCl.Point_slice_T_set)
    P = property(_H2ONaCl.Point_slice_P_get, _H2ONaCl.Point_slice_P_set)
    X = property(_H2ONaCl.Point_slice_X_get, _H2ONaCl.Point_slice_X_set)
    H = property(_H2ONaCl.Point_slice_H_get, _H2ONaCl.Point_slice_H_set)
    name = property(_H2ONaCl.Point_slice_name_get, _H2ONaCl.Point_slice_name_set)
    marker = property(_H2ONaCl.Point_slice_marker_get, _H2ONaCl.Point_slice_marker_set)
    mfc = property(_H2ONaCl.Point_slice_mfc_get, _H2ONaCl.Point_slice_mfc_set)
    mec = property(_H2ONaCl.Point_slice_mec_get, _H2ONaCl.Point_slice_mec_set)

    def __init__(self, *args):
        _H2ONaCl.Point_slice_swiginit(self, _H2ONaCl.new_Point_slice(*args))

    def __lt__(self, other):
        return _H2ONaCl.Point_slice___lt__(self, other)

    def __eq__(self, other):
        return _H2ONaCl.Point_slice___eq__(self, other)

    def info(self, _self):
        return _H2ONaCl.Point_slice_info(self, _self)

    def __str__(self):
        return _H2ONaCl.Point_slice___str__(self)
    __swig_destroy__ = _H2ONaCl.delete_Point_slice

# Register Point_slice in _H2ONaCl:
_H2ONaCl.Point_slice_swigregister(Point_slice)
class Point_sliceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.Point_sliceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.Point_sliceVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.Point_sliceVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.Point_sliceVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.Point_sliceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.Point_sliceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.Point_sliceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.Point_sliceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.Point_sliceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.Point_sliceVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.Point_sliceVector_pop(self)

    def append(self, x):
        return _H2ONaCl.Point_sliceVector_append(self, x)

    def empty(self):
        return _H2ONaCl.Point_sliceVector_empty(self)

    def size(self):
        return _H2ONaCl.Point_sliceVector_size(self)

    def swap(self, v):
        return _H2ONaCl.Point_sliceVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.Point_sliceVector_begin(self)

    def end(self):
        return _H2ONaCl.Point_sliceVector_end(self)

    def rbegin(self):
        return _H2ONaCl.Point_sliceVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.Point_sliceVector_rend(self)

    def clear(self):
        return _H2ONaCl.Point_sliceVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.Point_sliceVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.Point_sliceVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.Point_sliceVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.Point_sliceVector_swiginit(self, _H2ONaCl.new_Point_sliceVector(*args))

    def push_back(self, x):
        return _H2ONaCl.Point_sliceVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.Point_sliceVector_front(self)

    def back(self):
        return _H2ONaCl.Point_sliceVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.Point_sliceVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.Point_sliceVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.Point_sliceVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.Point_sliceVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.Point_sliceVector_capacity(self)

    def __str__(self):
        return _H2ONaCl.Point_sliceVector___str__(self)
    __swig_destroy__ = _H2ONaCl.delete_Point_sliceVector

# Register Point_sliceVector in _H2ONaCl:
_H2ONaCl.Point_sliceVector_swigregister(Point_sliceVector)
class Line_sliceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.Line_sliceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.Line_sliceVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.Line_sliceVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.Line_sliceVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.Line_sliceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.Line_sliceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.Line_sliceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.Line_sliceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.Line_sliceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.Line_sliceVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.Line_sliceVector_pop(self)

    def append(self, x):
        return _H2ONaCl.Line_sliceVector_append(self, x)

    def empty(self):
        return _H2ONaCl.Line_sliceVector_empty(self)

    def size(self):
        return _H2ONaCl.Line_sliceVector_size(self)

    def swap(self, v):
        return _H2ONaCl.Line_sliceVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.Line_sliceVector_begin(self)

    def end(self):
        return _H2ONaCl.Line_sliceVector_end(self)

    def rbegin(self):
        return _H2ONaCl.Line_sliceVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.Line_sliceVector_rend(self)

    def clear(self):
        return _H2ONaCl.Line_sliceVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.Line_sliceVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.Line_sliceVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.Line_sliceVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.Line_sliceVector_swiginit(self, _H2ONaCl.new_Line_sliceVector(*args))

    def push_back(self, x):
        return _H2ONaCl.Line_sliceVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.Line_sliceVector_front(self)

    def back(self):
        return _H2ONaCl.Line_sliceVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.Line_sliceVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.Line_sliceVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.Line_sliceVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.Line_sliceVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.Line_sliceVector_capacity(self)

    def __str__(self):
        return _H2ONaCl.Line_sliceVector___str__(self)
    __swig_destroy__ = _H2ONaCl.delete_Line_sliceVector

# Register Line_sliceVector in _H2ONaCl:
_H2ONaCl.Line_sliceVector_swigregister(Line_sliceVector)
class Polygon_sliceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.Polygon_sliceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.Polygon_sliceVector___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.Polygon_sliceVector___bool__(self)

    def __len__(self):
        return _H2ONaCl.Polygon_sliceVector___len__(self)

    def __getslice__(self, i, j):
        return _H2ONaCl.Polygon_sliceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _H2ONaCl.Polygon_sliceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _H2ONaCl.Polygon_sliceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _H2ONaCl.Polygon_sliceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _H2ONaCl.Polygon_sliceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _H2ONaCl.Polygon_sliceVector___setitem__(self, *args)

    def pop(self):
        return _H2ONaCl.Polygon_sliceVector_pop(self)

    def append(self, x):
        return _H2ONaCl.Polygon_sliceVector_append(self, x)

    def empty(self):
        return _H2ONaCl.Polygon_sliceVector_empty(self)

    def size(self):
        return _H2ONaCl.Polygon_sliceVector_size(self)

    def swap(self, v):
        return _H2ONaCl.Polygon_sliceVector_swap(self, v)

    def begin(self):
        return _H2ONaCl.Polygon_sliceVector_begin(self)

    def end(self):
        return _H2ONaCl.Polygon_sliceVector_end(self)

    def rbegin(self):
        return _H2ONaCl.Polygon_sliceVector_rbegin(self)

    def rend(self):
        return _H2ONaCl.Polygon_sliceVector_rend(self)

    def clear(self):
        return _H2ONaCl.Polygon_sliceVector_clear(self)

    def get_allocator(self):
        return _H2ONaCl.Polygon_sliceVector_get_allocator(self)

    def pop_back(self):
        return _H2ONaCl.Polygon_sliceVector_pop_back(self)

    def erase(self, *args):
        return _H2ONaCl.Polygon_sliceVector_erase(self, *args)

    def __init__(self, *args):
        _H2ONaCl.Polygon_sliceVector_swiginit(self, _H2ONaCl.new_Polygon_sliceVector(*args))

    def push_back(self, x):
        return _H2ONaCl.Polygon_sliceVector_push_back(self, x)

    def front(self):
        return _H2ONaCl.Polygon_sliceVector_front(self)

    def back(self):
        return _H2ONaCl.Polygon_sliceVector_back(self)

    def assign(self, n, x):
        return _H2ONaCl.Polygon_sliceVector_assign(self, n, x)

    def resize(self, *args):
        return _H2ONaCl.Polygon_sliceVector_resize(self, *args)

    def insert(self, *args):
        return _H2ONaCl.Polygon_sliceVector_insert(self, *args)

    def reserve(self, n):
        return _H2ONaCl.Polygon_sliceVector_reserve(self, n)

    def capacity(self):
        return _H2ONaCl.Polygon_sliceVector_capacity(self)

    def __str__(self):
        return _H2ONaCl.Polygon_sliceVector___str__(self)
    __swig_destroy__ = _H2ONaCl.delete_Polygon_sliceVector

# Register Polygon_sliceVector in _H2ONaCl:
_H2ONaCl.Polygon_sliceVector_swigregister(Polygon_sliceVector)
class stringPolygon_sliceMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.stringPolygon_sliceMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.stringPolygon_sliceMap___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.stringPolygon_sliceMap___bool__(self)

    def __len__(self):
        return _H2ONaCl.stringPolygon_sliceMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _H2ONaCl.stringPolygon_sliceMap___getitem__(self, key)

    def __delitem__(self, key):
        return _H2ONaCl.stringPolygon_sliceMap___delitem__(self, key)

    def has_key(self, key):
        return _H2ONaCl.stringPolygon_sliceMap_has_key(self, key)

    def keys(self):
        return _H2ONaCl.stringPolygon_sliceMap_keys(self)

    def values(self):
        return _H2ONaCl.stringPolygon_sliceMap_values(self)

    def items(self):
        return _H2ONaCl.stringPolygon_sliceMap_items(self)

    def __contains__(self, key):
        return _H2ONaCl.stringPolygon_sliceMap___contains__(self, key)

    def key_iterator(self):
        return _H2ONaCl.stringPolygon_sliceMap_key_iterator(self)

    def value_iterator(self):
        return _H2ONaCl.stringPolygon_sliceMap_value_iterator(self)

    def __setitem__(self, *args):
        return _H2ONaCl.stringPolygon_sliceMap___setitem__(self, *args)

    def asdict(self):
        return _H2ONaCl.stringPolygon_sliceMap_asdict(self)

    def __init__(self, *args):
        _H2ONaCl.stringPolygon_sliceMap_swiginit(self, _H2ONaCl.new_stringPolygon_sliceMap(*args))

    def empty(self):
        return _H2ONaCl.stringPolygon_sliceMap_empty(self)

    def size(self):
        return _H2ONaCl.stringPolygon_sliceMap_size(self)

    def swap(self, v):
        return _H2ONaCl.stringPolygon_sliceMap_swap(self, v)

    def begin(self):
        return _H2ONaCl.stringPolygon_sliceMap_begin(self)

    def end(self):
        return _H2ONaCl.stringPolygon_sliceMap_end(self)

    def rbegin(self):
        return _H2ONaCl.stringPolygon_sliceMap_rbegin(self)

    def rend(self):
        return _H2ONaCl.stringPolygon_sliceMap_rend(self)

    def clear(self):
        return _H2ONaCl.stringPolygon_sliceMap_clear(self)

    def get_allocator(self):
        return _H2ONaCl.stringPolygon_sliceMap_get_allocator(self)

    def count(self, x):
        return _H2ONaCl.stringPolygon_sliceMap_count(self, x)

    def erase(self, *args):
        return _H2ONaCl.stringPolygon_sliceMap_erase(self, *args)

    def find(self, x):
        return _H2ONaCl.stringPolygon_sliceMap_find(self, x)

    def lower_bound(self, x):
        return _H2ONaCl.stringPolygon_sliceMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _H2ONaCl.stringPolygon_sliceMap_upper_bound(self, x)
    __swig_destroy__ = _H2ONaCl.delete_stringPolygon_sliceMap

# Register stringPolygon_sliceMap in _H2ONaCl:
_H2ONaCl.stringPolygon_sliceMap_swigregister(stringPolygon_sliceMap)
class stringLine_sliceMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.stringLine_sliceMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.stringLine_sliceMap___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.stringLine_sliceMap___bool__(self)

    def __len__(self):
        return _H2ONaCl.stringLine_sliceMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _H2ONaCl.stringLine_sliceMap___getitem__(self, key)

    def __delitem__(self, key):
        return _H2ONaCl.stringLine_sliceMap___delitem__(self, key)

    def has_key(self, key):
        return _H2ONaCl.stringLine_sliceMap_has_key(self, key)

    def keys(self):
        return _H2ONaCl.stringLine_sliceMap_keys(self)

    def values(self):
        return _H2ONaCl.stringLine_sliceMap_values(self)

    def items(self):
        return _H2ONaCl.stringLine_sliceMap_items(self)

    def __contains__(self, key):
        return _H2ONaCl.stringLine_sliceMap___contains__(self, key)

    def key_iterator(self):
        return _H2ONaCl.stringLine_sliceMap_key_iterator(self)

    def value_iterator(self):
        return _H2ONaCl.stringLine_sliceMap_value_iterator(self)

    def __setitem__(self, *args):
        return _H2ONaCl.stringLine_sliceMap___setitem__(self, *args)

    def asdict(self):
        return _H2ONaCl.stringLine_sliceMap_asdict(self)

    def __init__(self, *args):
        _H2ONaCl.stringLine_sliceMap_swiginit(self, _H2ONaCl.new_stringLine_sliceMap(*args))

    def empty(self):
        return _H2ONaCl.stringLine_sliceMap_empty(self)

    def size(self):
        return _H2ONaCl.stringLine_sliceMap_size(self)

    def swap(self, v):
        return _H2ONaCl.stringLine_sliceMap_swap(self, v)

    def begin(self):
        return _H2ONaCl.stringLine_sliceMap_begin(self)

    def end(self):
        return _H2ONaCl.stringLine_sliceMap_end(self)

    def rbegin(self):
        return _H2ONaCl.stringLine_sliceMap_rbegin(self)

    def rend(self):
        return _H2ONaCl.stringLine_sliceMap_rend(self)

    def clear(self):
        return _H2ONaCl.stringLine_sliceMap_clear(self)

    def get_allocator(self):
        return _H2ONaCl.stringLine_sliceMap_get_allocator(self)

    def count(self, x):
        return _H2ONaCl.stringLine_sliceMap_count(self, x)

    def erase(self, *args):
        return _H2ONaCl.stringLine_sliceMap_erase(self, *args)

    def find(self, x):
        return _H2ONaCl.stringLine_sliceMap_find(self, x)

    def lower_bound(self, x):
        return _H2ONaCl.stringLine_sliceMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _H2ONaCl.stringLine_sliceMap_upper_bound(self, x)
    __swig_destroy__ = _H2ONaCl.delete_stringLine_sliceMap

# Register stringLine_sliceMap in _H2ONaCl:
_H2ONaCl.stringLine_sliceMap_swigregister(stringLine_sliceMap)
class stringPoint_sliceMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.stringPoint_sliceMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.stringPoint_sliceMap___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.stringPoint_sliceMap___bool__(self)

    def __len__(self):
        return _H2ONaCl.stringPoint_sliceMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _H2ONaCl.stringPoint_sliceMap___getitem__(self, key)

    def __delitem__(self, key):
        return _H2ONaCl.stringPoint_sliceMap___delitem__(self, key)

    def has_key(self, key):
        return _H2ONaCl.stringPoint_sliceMap_has_key(self, key)

    def keys(self):
        return _H2ONaCl.stringPoint_sliceMap_keys(self)

    def values(self):
        return _H2ONaCl.stringPoint_sliceMap_values(self)

    def items(self):
        return _H2ONaCl.stringPoint_sliceMap_items(self)

    def __contains__(self, key):
        return _H2ONaCl.stringPoint_sliceMap___contains__(self, key)

    def key_iterator(self):
        return _H2ONaCl.stringPoint_sliceMap_key_iterator(self)

    def value_iterator(self):
        return _H2ONaCl.stringPoint_sliceMap_value_iterator(self)

    def __setitem__(self, *args):
        return _H2ONaCl.stringPoint_sliceMap___setitem__(self, *args)

    def asdict(self):
        return _H2ONaCl.stringPoint_sliceMap_asdict(self)

    def __init__(self, *args):
        _H2ONaCl.stringPoint_sliceMap_swiginit(self, _H2ONaCl.new_stringPoint_sliceMap(*args))

    def empty(self):
        return _H2ONaCl.stringPoint_sliceMap_empty(self)

    def size(self):
        return _H2ONaCl.stringPoint_sliceMap_size(self)

    def swap(self, v):
        return _H2ONaCl.stringPoint_sliceMap_swap(self, v)

    def begin(self):
        return _H2ONaCl.stringPoint_sliceMap_begin(self)

    def end(self):
        return _H2ONaCl.stringPoint_sliceMap_end(self)

    def rbegin(self):
        return _H2ONaCl.stringPoint_sliceMap_rbegin(self)

    def rend(self):
        return _H2ONaCl.stringPoint_sliceMap_rend(self)

    def clear(self):
        return _H2ONaCl.stringPoint_sliceMap_clear(self)

    def get_allocator(self):
        return _H2ONaCl.stringPoint_sliceMap_get_allocator(self)

    def count(self, x):
        return _H2ONaCl.stringPoint_sliceMap_count(self, x)

    def erase(self, *args):
        return _H2ONaCl.stringPoint_sliceMap_erase(self, *args)

    def find(self, x):
        return _H2ONaCl.stringPoint_sliceMap_find(self, x)

    def lower_bound(self, x):
        return _H2ONaCl.stringPoint_sliceMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _H2ONaCl.stringPoint_sliceMap_upper_bound(self, x)
    __swig_destroy__ = _H2ONaCl.delete_stringPoint_sliceMap

# Register stringPoint_sliceMap in _H2ONaCl:
_H2ONaCl.stringPoint_sliceMap_swigregister(stringPoint_sliceMap)
class stringPoint_sliceVectorMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.stringPoint_sliceVectorMap___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.stringPoint_sliceVectorMap___bool__(self)

    def __len__(self):
        return _H2ONaCl.stringPoint_sliceVectorMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _H2ONaCl.stringPoint_sliceVectorMap___getitem__(self, key)

    def __delitem__(self, key):
        return _H2ONaCl.stringPoint_sliceVectorMap___delitem__(self, key)

    def has_key(self, key):
        return _H2ONaCl.stringPoint_sliceVectorMap_has_key(self, key)

    def keys(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_keys(self)

    def values(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_values(self)

    def items(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_items(self)

    def __contains__(self, key):
        return _H2ONaCl.stringPoint_sliceVectorMap___contains__(self, key)

    def key_iterator(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_key_iterator(self)

    def value_iterator(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_value_iterator(self)

    def __setitem__(self, *args):
        return _H2ONaCl.stringPoint_sliceVectorMap___setitem__(self, *args)

    def asdict(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_asdict(self)

    def __init__(self, *args):
        _H2ONaCl.stringPoint_sliceVectorMap_swiginit(self, _H2ONaCl.new_stringPoint_sliceVectorMap(*args))

    def empty(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_empty(self)

    def size(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_size(self)

    def swap(self, v):
        return _H2ONaCl.stringPoint_sliceVectorMap_swap(self, v)

    def begin(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_begin(self)

    def end(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_end(self)

    def rbegin(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_rbegin(self)

    def rend(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_rend(self)

    def clear(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_clear(self)

    def get_allocator(self):
        return _H2ONaCl.stringPoint_sliceVectorMap_get_allocator(self)

    def count(self, x):
        return _H2ONaCl.stringPoint_sliceVectorMap_count(self, x)

    def erase(self, *args):
        return _H2ONaCl.stringPoint_sliceVectorMap_erase(self, *args)

    def find(self, x):
        return _H2ONaCl.stringPoint_sliceVectorMap_find(self, x)

    def lower_bound(self, x):
        return _H2ONaCl.stringPoint_sliceVectorMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _H2ONaCl.stringPoint_sliceVectorMap_upper_bound(self, x)

    def __str__(self):
        return _H2ONaCl.stringPoint_sliceVectorMap___str__(self)
    __swig_destroy__ = _H2ONaCl.delete_stringPoint_sliceVectorMap

# Register stringPoint_sliceVectorMap in _H2ONaCl:
_H2ONaCl.stringPoint_sliceVectorMap_swigregister(stringPoint_sliceVectorMap)
class stringLine_sliceVectorMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.stringLine_sliceVectorMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.stringLine_sliceVectorMap___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.stringLine_sliceVectorMap___bool__(self)

    def __len__(self):
        return _H2ONaCl.stringLine_sliceVectorMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _H2ONaCl.stringLine_sliceVectorMap___getitem__(self, key)

    def __delitem__(self, key):
        return _H2ONaCl.stringLine_sliceVectorMap___delitem__(self, key)

    def has_key(self, key):
        return _H2ONaCl.stringLine_sliceVectorMap_has_key(self, key)

    def keys(self):
        return _H2ONaCl.stringLine_sliceVectorMap_keys(self)

    def values(self):
        return _H2ONaCl.stringLine_sliceVectorMap_values(self)

    def items(self):
        return _H2ONaCl.stringLine_sliceVectorMap_items(self)

    def __contains__(self, key):
        return _H2ONaCl.stringLine_sliceVectorMap___contains__(self, key)

    def key_iterator(self):
        return _H2ONaCl.stringLine_sliceVectorMap_key_iterator(self)

    def value_iterator(self):
        return _H2ONaCl.stringLine_sliceVectorMap_value_iterator(self)

    def __setitem__(self, *args):
        return _H2ONaCl.stringLine_sliceVectorMap___setitem__(self, *args)

    def asdict(self):
        return _H2ONaCl.stringLine_sliceVectorMap_asdict(self)

    def __init__(self, *args):
        _H2ONaCl.stringLine_sliceVectorMap_swiginit(self, _H2ONaCl.new_stringLine_sliceVectorMap(*args))

    def empty(self):
        return _H2ONaCl.stringLine_sliceVectorMap_empty(self)

    def size(self):
        return _H2ONaCl.stringLine_sliceVectorMap_size(self)

    def swap(self, v):
        return _H2ONaCl.stringLine_sliceVectorMap_swap(self, v)

    def begin(self):
        return _H2ONaCl.stringLine_sliceVectorMap_begin(self)

    def end(self):
        return _H2ONaCl.stringLine_sliceVectorMap_end(self)

    def rbegin(self):
        return _H2ONaCl.stringLine_sliceVectorMap_rbegin(self)

    def rend(self):
        return _H2ONaCl.stringLine_sliceVectorMap_rend(self)

    def clear(self):
        return _H2ONaCl.stringLine_sliceVectorMap_clear(self)

    def get_allocator(self):
        return _H2ONaCl.stringLine_sliceVectorMap_get_allocator(self)

    def count(self, x):
        return _H2ONaCl.stringLine_sliceVectorMap_count(self, x)

    def erase(self, *args):
        return _H2ONaCl.stringLine_sliceVectorMap_erase(self, *args)

    def find(self, x):
        return _H2ONaCl.stringLine_sliceVectorMap_find(self, x)

    def lower_bound(self, x):
        return _H2ONaCl.stringLine_sliceVectorMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _H2ONaCl.stringLine_sliceVectorMap_upper_bound(self, x)

    def __str__(self):
        return _H2ONaCl.stringLine_sliceVectorMap___str__(self)
    __swig_destroy__ = _H2ONaCl.delete_stringLine_sliceVectorMap

# Register stringLine_sliceVectorMap in _H2ONaCl:
_H2ONaCl.stringLine_sliceVectorMap_swigregister(stringLine_sliceVectorMap)
class stringPolygon_sliceVectorMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap___nonzero__(self)

    def __bool__(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap___bool__(self)

    def __len__(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _H2ONaCl.stringPolygon_sliceVectorMap___getitem__(self, key)

    def __delitem__(self, key):
        return _H2ONaCl.stringPolygon_sliceVectorMap___delitem__(self, key)

    def has_key(self, key):
        return _H2ONaCl.stringPolygon_sliceVectorMap_has_key(self, key)

    def keys(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_keys(self)

    def values(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_values(self)

    def items(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_items(self)

    def __contains__(self, key):
        return _H2ONaCl.stringPolygon_sliceVectorMap___contains__(self, key)

    def key_iterator(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_key_iterator(self)

    def value_iterator(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_value_iterator(self)

    def __setitem__(self, *args):
        return _H2ONaCl.stringPolygon_sliceVectorMap___setitem__(self, *args)

    def asdict(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_asdict(self)

    def __init__(self, *args):
        _H2ONaCl.stringPolygon_sliceVectorMap_swiginit(self, _H2ONaCl.new_stringPolygon_sliceVectorMap(*args))

    def empty(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_empty(self)

    def size(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_size(self)

    def swap(self, v):
        return _H2ONaCl.stringPolygon_sliceVectorMap_swap(self, v)

    def begin(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_begin(self)

    def end(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_end(self)

    def rbegin(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_rbegin(self)

    def rend(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_rend(self)

    def clear(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_clear(self)

    def get_allocator(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap_get_allocator(self)

    def count(self, x):
        return _H2ONaCl.stringPolygon_sliceVectorMap_count(self, x)

    def erase(self, *args):
        return _H2ONaCl.stringPolygon_sliceVectorMap_erase(self, *args)

    def find(self, x):
        return _H2ONaCl.stringPolygon_sliceVectorMap_find(self, x)

    def lower_bound(self, x):
        return _H2ONaCl.stringPolygon_sliceVectorMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _H2ONaCl.stringPolygon_sliceVectorMap_upper_bound(self, x)

    def __str__(self):
        return _H2ONaCl.stringPolygon_sliceVectorMap___str__(self)
    __swig_destroy__ = _H2ONaCl.delete_stringPolygon_sliceVectorMap

# Register stringPolygon_sliceVectorMap in _H2ONaCl:
_H2ONaCl.stringPolygon_sliceVectorMap_swigregister(stringPolygon_sliceVectorMap)
class PhaseRegion_Slice(object):
    r"""Struct of phase region of a slice at constant T, P, H, or X. Contains phase region polygon, and some visualization properties."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    regions = property(_H2ONaCl.PhaseRegion_Slice_regions_get, _H2ONaCl.PhaseRegion_Slice_regions_set)
    lines = property(_H2ONaCl.PhaseRegion_Slice_lines_get, _H2ONaCl.PhaseRegion_Slice_lines_set)
    points = property(_H2ONaCl.PhaseRegion_Slice_points_get, _H2ONaCl.PhaseRegion_Slice_points_set)

    def info(self, slice):
        return _H2ONaCl.PhaseRegion_Slice_info(self, slice)

    def __str__(self):
        return _H2ONaCl.PhaseRegion_Slice___str__(self)

    def __init__(self):
        _H2ONaCl.PhaseRegion_Slice_swiginit(self, _H2ONaCl.new_PhaseRegion_Slice())
    __swig_destroy__ = _H2ONaCl.delete_PhaseRegion_Slice

# Register PhaseRegion_Slice in _H2ONaCl:
_H2ONaCl.PhaseRegion_Slice_swigregister(PhaseRegion_Slice)
Fluid_Unknown = _H2ONaCl.Fluid_Unknown
FLUID_Water = _H2ONaCl.FLUID_Water
FLUID_H2O_NaCl = _H2ONaCl.FLUID_H2O_NaCl
class cxThermal(object):
    r"""Top abstract class of the thermodynamic model."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _H2ONaCl.delete_cxThermal
    m_isShowProgressBar = property(_H2ONaCl.cxThermal_m_isShowProgressBar_get, _H2ONaCl.cxThermal_m_isShowProgressBar_set)

    def showProgressBar(self, isShow):
        return _H2ONaCl.cxThermal_showProgressBar(self, isShow)

    @staticmethod
    def validateFluid(fluidName):
        return _H2ONaCl.cxThermal_validateFluid(fluidName)

    def name(self):
        r"""Name of the model"""
        return _H2ONaCl.cxThermal_name(self)

    def Tmin(self):
        r"""Get the minimum temperature in K"""
        return _H2ONaCl.cxThermal_Tmin(self)

    def Tmax(self):
        r"""Get the maximum temperature in K"""
        return _H2ONaCl.cxThermal_Tmax(self)

    def pmin(self):
        r"""Get the minimum pressure in Pa"""
        return _H2ONaCl.cxThermal_pmin(self)

    def pmax(self):
        r"""Get the maximum pressure in Pa"""
        return _H2ONaCl.cxThermal_pmax(self)

    def Ttriple(self):
        r"""Get the triple point temperature in K"""
        return _H2ONaCl.cxThermal_Ttriple(self)

    def T_critical(self):
        r"""Return the critical temperature in K"""
        return _H2ONaCl.cxThermal_T_critical(self)

    def p_critical(self):
        r"""Return the critical pressure in Pa"""
        return _H2ONaCl.cxThermal_p_critical(self)

    def rhomass_critical(self):
        r"""Return the critical mass density in :math:`kg/m^3`"""
        return _H2ONaCl.cxThermal_rhomass_critical(self)

    def molar_mass(self):
        r"""Return the molar mass in kg/mol"""
        return _H2ONaCl.cxThermal_molar_mass(self)

    def rhomolar_critical(self):
        return _H2ONaCl.cxThermal_rhomolar_critical(self)

    def phase_name(self, phase_index):
        return _H2ONaCl.cxThermal_phase_name(self, phase_index)

    def set_num_threads(self, num_threads):
        return _H2ONaCl.cxThermal_set_num_threads(self, num_threads)

    def get_num_threads(self):
        return _H2ONaCl.cxThermal_get_num_threads(self)

    def findPhaseRegion_TPX(self, T, p, X=0):
        return _H2ONaCl.cxThermal_findPhaseRegion_TPX(self, T, p, X)

    def get_UpdateWhichProps(self):
        return _H2ONaCl.cxThermal_get_UpdateWhichProps(self)

    def createLUT_2D(self, *args):
        return _H2ONaCl.cxThermal_createLUT_2D(self, *args)

    def createLUT_3D(self, *args):
        return _H2ONaCl.cxThermal_createLUT_3D(self, *args)

    def save_lut_to_vtk(self, filename, isNormalizeXYZ=True):
        return _H2ONaCl.cxThermal_save_lut_to_vtk(self, filename, isNormalizeXYZ)

    def save_lut_to_binary(self, filename):
        return _H2ONaCl.cxThermal_save_lut_to_binary(self, filename)

    def lookup(self, *args):
        return _H2ONaCl.cxThermal_lookup(self, *args)

    def lookup_only(self, *args):
        return _H2ONaCl.cxThermal_lookup_only(self, *args)

    def loadLUT(self, filename, printStatus=True):
        return _H2ONaCl.cxThermal_loadLUT(self, filename, printStatus)

    def get_pLUT(self):
        return _H2ONaCl.cxThermal_get_pLUT(self)

    def get_pLUT_lookup(self):
        return _H2ONaCl.cxThermal_get_pLUT_lookup(self)

    def get_dim_lut(self):
        return _H2ONaCl.cxThermal_get_dim_lut(self)

    def get_dim_lut_lookup(self):
        return _H2ONaCl.cxThermal_get_dim_lut_lookup(self)

    def Rho_lookup(self, Rho_estimate, Rho_min, Rho_max, T, P):
        return _H2ONaCl.cxThermal_Rho_lookup(self, Rho_estimate, Rho_min, Rho_max, T, P)

    def Boiling_T(self, *args):
        r"""
        *Overload 1:*

        Calculate boiling temperature [K] of water for a given p [Pa]
        :type p: float
        :param p:
        :rtype: float
        :return: 

        |

        *Overload 2:*

        Calculate both boiling temperature and density of liquid and vapor phase.
        :type p: float
        :param p: [Pa]
        :type rho_l: float
        :param rho_l: [kg/m3]
        :type rho_v: float
        :param rho_v: [kg/m3]
        :rtype: float
        :return: 
        """
        return _H2ONaCl.cxThermal_Boiling_T(self, *args)

    def Boiling_p(self, *args):
        r"""
        *Overload 1:*

        Calculate boiling pressure [Pa] of water for a given T [K]
        :type T: float
        :param T:
        :rtype: float
        :return: 

        |

        *Overload 2:*

        Calculate both boiling temperature and density of liquid and vapor phase.
        :type T: float
        :param T: [K]
        :type rho_l: float
        :param rho_l: [kg/m3]
        :type rho_v: float
        :param rho_v: [kg/m3]
        :rtype: float
        :return: 
        """
        return _H2ONaCl.cxThermal_Boiling_p(self, *args)

    def Triangulation(self, x_poly, y_poly, pointInMesh, dxdy, trimesh, normalize=True):
        return _H2ONaCl.cxThermal_Triangulation(self, x_poly, y_poly, pointInMesh, dxdy, trimesh, normalize)

    def writeTriMesh2Txt(self, *args):
        return _H2ONaCl.cxThermal_writeTriMesh2Txt(self, *args)

    def writeXXYYZZ2VTU(self, vtuFile, XX, YY, ZZ, scale_x=1.0, scale_y=1.0, scale_z=1.0):
        return _H2ONaCl.cxThermal_writeXXYYZZ2VTU(self, vtuFile, XX, YY, ZZ, scale_x, scale_y, scale_z)

    def writeLine2VTU(self, vtuFile, X, Y, Z, scale_x=1.0, scale_y=1.0, scale_z=1.0):
        return _H2ONaCl.cxThermal_writeLine2VTU(self, vtuFile, X, Y, Z, scale_x, scale_y, scale_z)

    def writePhaseBoundaries2VTU(self, outputPath, phaseBoundaries, scale_T=1, scale_p=1, scale_X=1):
        return _H2ONaCl.cxThermal_writePhaseBoundaries2VTU(self, outputPath, phaseBoundaries, scale_T, scale_p, scale_X)

    def normalizePhaseBoundaries(self, phaseBoundaries):
        return _H2ONaCl.cxThermal_normalizePhaseBoundaries(self, phaseBoundaries)

    def writeMeshGrid2VTK(self, vtkFile, x, xTitle, y, yTitle, z, zTitle, props, propsInfo, isNormalize=False):
        return _H2ONaCl.cxThermal_writeMeshGrid2VTK(self, vtkFile, x, xTitle, y, yTitle, z, zTitle, props, propsInfo, isNormalize)

    def Boiling_p_props(self, T):
        return _H2ONaCl.cxThermal_Boiling_p_props(self, T)

    def Boiling_T_props(self, p):
        return _H2ONaCl.cxThermal_Boiling_T_props(self, p)

    def UpdateState_TPX(self, *args):
        return _H2ONaCl.cxThermal_UpdateState_TPX(self, *args)

    def UpdateState_HPX(self, *args):
        return _H2ONaCl.cxThermal_UpdateState_HPX(self, *args)

    def getLutInfo(self, file_lut, printSummary=True):
        return _H2ONaCl.cxThermal_getLutInfo(self, file_lut, printSummary)

# Register cxThermal in _H2ONaCl:
_H2ONaCl.cxThermal_swigregister(cxThermal)
cvar = _H2ONaCl.cvar
R = cvar.R


def fill_prop2data(pEOS, prop, update_which_props, data):
    return _H2ONaCl.fill_prop2data(pEOS, prop, update_which_props, data)
ITERATION_MAX = _H2ONaCl.ITERATION_MAX
r"""Maximum iteration step"""
TOL_Pressure = _H2ONaCl.TOL_Pressure
r"""Tolerance for pressure with unit Pa"""
TOL_PTRro = _H2ONaCl.TOL_PTRro
r"""Tolerance for solving saturated :math:`T, P, \rho_l, \rho_v` at phase boundary, or for solving :math:`\rho` by given [T,P], or solving T by given [P, H]"""
class Table4_Driesner2007a_CriticalCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    c = property(_H2ONaCl.Table4_Driesner2007a_CriticalCurve_c_get, _H2ONaCl.Table4_Driesner2007a_CriticalCurve_c_set)
    cA = property(_H2ONaCl.Table4_Driesner2007a_CriticalCurve_cA_get, _H2ONaCl.Table4_Driesner2007a_CriticalCurve_cA_set)
    d = property(_H2ONaCl.Table4_Driesner2007a_CriticalCurve_d_get, _H2ONaCl.Table4_Driesner2007a_CriticalCurve_d_set)

    def __init__(self):
        _H2ONaCl.Table4_Driesner2007a_CriticalCurve_swiginit(self, _H2ONaCl.new_Table4_Driesner2007a_CriticalCurve())
    __swig_destroy__ = _H2ONaCl.delete_Table4_Driesner2007a_CriticalCurve

# Register Table4_Driesner2007a_CriticalCurve in _H2ONaCl:
_H2ONaCl.Table4_Driesner2007a_CriticalCurve_swigregister(Table4_Driesner2007a_CriticalCurve)
T_MIN = cvar.T_MIN
P_MIN = cvar.P_MIN
P_MAX = cvar.P_MAX
T_MAX = cvar.T_MAX
X_MIN = cvar.X_MIN
X_MAX = cvar.X_MAX
T_MAX_VLH = cvar.T_MAX_VLH
T_MIN_VLH = cvar.T_MIN_VLH
T_Peak_VLH = cvar.T_Peak_VLH
P_Peak_VLH = cvar.P_Peak_VLH
T_Peak_VLH_C = cvar.T_Peak_VLH_C
P_Peak_VLH_bar = cvar.P_Peak_VLH_bar

class Coeffs_Estimate_CriticalT(object):
    r"""
    Poly fit coefficient for the estimate critical temperature.

    :math:`T_c = \sum_{i=0}^{9} a_i y^i`, where :math:`y=log_{10}P[Pa]`
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    num = property(_H2ONaCl.Coeffs_Estimate_CriticalT_num_get)
    coeffs = property(_H2ONaCl.Coeffs_Estimate_CriticalT_coeffs_get)

    def __init__(self):
        _H2ONaCl.Coeffs_Estimate_CriticalT_swiginit(self, _H2ONaCl.new_Coeffs_Estimate_CriticalT())
    __swig_destroy__ = _H2ONaCl.delete_Coeffs_Estimate_CriticalT

# Register Coeffs_Estimate_CriticalT in _H2ONaCl:
_H2ONaCl.Coeffs_Estimate_CriticalT_swigregister(Coeffs_Estimate_CriticalT)
class Table6_Pressure_VLH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    num = property(_H2ONaCl.Table6_Pressure_VLH_num_get)
    f = property(_H2ONaCl.Table6_Pressure_VLH_f_get)

    def __init__(self):
        _H2ONaCl.Table6_Pressure_VLH_swiginit(self, _H2ONaCl.new_Table6_Pressure_VLH())
    __swig_destroy__ = _H2ONaCl.delete_Table6_Pressure_VLH

# Register Table6_Pressure_VLH in _H2ONaCl:
_H2ONaCl.Table6_Pressure_VLH_swigregister(Table6_Pressure_VLH)
class Table7_XL_VL(object):
    r"""
    Parameters for liquid composition, :math:`X_{NaCl}^{VL,liq}`, on V+L coexistence surface. V+L liquid branch. See Table 7 of 'Driesner2007Part1'.

    Notes: Change coefficients :math:`h_1, h_2, h_5` (:math:`\times 10^{-5}`) and :math:`h_6, h_7, h_10`  (:math:`\times 10^{-10}`) to make pressure with unit [Pa]. Because :math:`g_1` is the coefficient of :math:`(P_{crit} - P)`, and :math:`g_2` is the coefficient of :math:`(P_{crit}, P)^2`
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    h = property(_H2ONaCl.Table7_XL_VL_h_get)

    def __init__(self):
        _H2ONaCl.Table7_XL_VL_swiginit(self, _H2ONaCl.new_Table7_XL_VL())
    __swig_destroy__ = _H2ONaCl.delete_Table7_XL_VL

# Register Table7_XL_VL in _H2ONaCl:
_H2ONaCl.Table7_XL_VL_swigregister(Table7_XL_VL)
class Table8_VaporComposition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    k = property(_H2ONaCl.Table8_VaporComposition_k_get)

    def __init__(self):
        _H2ONaCl.Table8_VaporComposition_swiginit(self, _H2ONaCl.new_Table8_VaporComposition())
    __swig_destroy__ = _H2ONaCl.delete_Table8_VaporComposition

# Register Table8_VaporComposition in _H2ONaCl:
_H2ONaCl.Table8_VaporComposition_swigregister(Table8_VaporComposition)
class Coeffs_Viscosity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a1 = property(_H2ONaCl.Coeffs_Viscosity_a1_get)
    a2 = property(_H2ONaCl.Coeffs_Viscosity_a2_get)
    b1 = property(_H2ONaCl.Coeffs_Viscosity_b1_get)
    b2 = property(_H2ONaCl.Coeffs_Viscosity_b2_get)
    b3 = property(_H2ONaCl.Coeffs_Viscosity_b3_get)

    def __init__(self):
        _H2ONaCl.Coeffs_Viscosity_swiginit(self, _H2ONaCl.new_Coeffs_Viscosity())
    __swig_destroy__ = _H2ONaCl.delete_Coeffs_Viscosity

# Register Coeffs_Viscosity in _H2ONaCl:
_H2ONaCl.Coeffs_Viscosity_swigregister(Coeffs_Viscosity)
class cH2ONaCl(cxThermal):
    r"""
    Class of :math:`H_2O-NaCl` EOS.

    Image: H2ONaCl/H2ONaCl_isothermal_PX.svg(Isothermal) sections. width=100%
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _H2ONaCl.cH2ONaCl_swiginit(self, _H2ONaCl.new_cH2ONaCl(*args))
    __swig_destroy__ = _H2ONaCl.delete_cH2ONaCl

    def get_pWater(self):
        return _H2ONaCl.cH2ONaCl_get_pWater(self)

    def X_Critical(self, T):
        return _H2ONaCl.cH2ONaCl_X_Critical(self, T)

    def dPdT_VLH(self, T):
        return _H2ONaCl.cH2ONaCl_dPdT_VLH(self, T)

    def Tmax_VLH(self):
        return _H2ONaCl.cH2ONaCl_Tmax_VLH(self)

    def Tmin_VLH(self):
        return _H2ONaCl.cH2ONaCl_Tmin_VLH(self)

    def T_VLH_P0(self, P0):
        return _H2ONaCl.cH2ONaCl_T_VLH_P0(self, P0)

    def T_VL(self, P, X, phase):
        return _H2ONaCl.cH2ONaCl_T_VL(self, P, X, phase)

    def T_VL_L(self, p, X, T_low, T_high):
        return _H2ONaCl.cH2ONaCl_T_VL_L(self, p, X, T_low, T_high)

    def T_VL_V(self, p, X, T_low, T_high):
        return _H2ONaCl.cH2ONaCl_T_VL_V(self, p, X, T_low, T_high)

    def prop_VL(self, T, P, X, prop):
        return _H2ONaCl.cH2ONaCl_prop_VL(self, T, P, X, prop)

    def Mu_phase(self, T, P, X, Mu, phase):
        return _H2ONaCl.cH2ONaCl_Mu_phase(self, T, P, X, Mu, phase)

    def T_HPX(self, *args):
        return _H2ONaCl.cH2ONaCl_T_HPX(self, *args)

    def getPhaseRegion_HPX(self, H, p, X, phase_region, T, S_lvh):
        return _H2ONaCl.cH2ONaCl_getPhaseRegion_HPX(self, H, p, X, phase_region, T, S_lvh)

    def compressibility_VL(self, T0, p0, X0, bulkRho, compressibility, dp=1):
        return _H2ONaCl.cH2ONaCl_compressibility_VL(self, T0, p0, X0, bulkRho, compressibility, dp)

    def compressibility_VH(self, T0, p0, X0, bulkRho, compressibility, dp=1):
        return _H2ONaCl.cH2ONaCl_compressibility_VH(self, T0, p0, X0, bulkRho, compressibility, dp)

    def compressibility_LH(self, T0, p0, X0, bulkRho, compressibility, dp=1):
        return _H2ONaCl.cH2ONaCl_compressibility_LH(self, T0, p0, X0, bulkRho, compressibility, dp)

    def HminHmax_VLH_triangle(self, H_v0, H_l0, H_h0, X_v0, X_l0, X0):
        return _H2ONaCl.cH2ONaCl_HminHmax_VLH_triangle(self, H_v0, H_l0, H_h0, X_v0, X_l0, X0)

    def name(self):
        return _H2ONaCl.cH2ONaCl_name(self)

    def name_backend(self):
        return _H2ONaCl.cH2ONaCl_name_backend(self)

    def Tmin(self):
        return _H2ONaCl.cH2ONaCl_Tmin(self)

    def Tmax(self):
        return _H2ONaCl.cH2ONaCl_Tmax(self)

    def pmin(self):
        return _H2ONaCl.cH2ONaCl_pmin(self)

    def pmax(self):
        return _H2ONaCl.cH2ONaCl_pmax(self)

    def Ttriple(self):
        return _H2ONaCl.cH2ONaCl_Ttriple(self)

    def T_critical(self):
        return _H2ONaCl.cH2ONaCl_T_critical(self)

    def p_critical(self):
        return _H2ONaCl.cH2ONaCl_p_critical(self)

    def rhomass_critical(self):
        return _H2ONaCl.cH2ONaCl_rhomass_critical(self)

    def molar_mass(self):
        return _H2ONaCl.cH2ONaCl_molar_mass(self)

    def findPhaseRegion_TPX(self, T, p, X):
        return _H2ONaCl.cH2ONaCl_findPhaseRegion_TPX(self, T, p, X)

    def UpdateState_HPX_vlh(self, props, H, p, X, T1_T2):
        return _H2ONaCl.cH2ONaCl_UpdateState_HPX_vlh(self, props, H, p, X, T1_T2)

    def UpdateState_HPX_vl_lowXlowP(self, props, H, p, X):
        return _H2ONaCl.cH2ONaCl_UpdateState_HPX_vl_lowXlowP(self, props, H, p, X)

    def PhaseBoundary_HaliteLiquidus_DeformLinear(self, p_max=2500E5, dT=10, dp=50E5):
        return _H2ONaCl.cH2ONaCl_PhaseBoundary_HaliteLiquidus_DeformLinear(self, p_max, dT, dp)

    def PhaseBoundary_VL_DeformLinear(self, VaporOrLiquid, nT=100, np=200):
        return _H2ONaCl.cH2ONaCl_PhaseBoundary_VL_DeformLinear(self, VaporOrLiquid, nT, np)

    def PhaseBoundary_VLH_DeformLinear(self, nT=100, nX=60):
        return _H2ONaCl.cH2ONaCl_PhaseBoundary_VLH_DeformLinear(self, nT, nX)

    def PhaseBoundary_VH_DeformLinear(self, nT=100, np=100):
        return _H2ONaCl.cH2ONaCl_PhaseBoundary_VH_DeformLinear(self, nT, np)

    def calc_PhaseBoundaries(self, *args):
        return _H2ONaCl.cH2ONaCl_calc_PhaseBoundaries(self, *args)

    def PhaseBoundary_HaliteLiquidus(self, *args):
        return _H2ONaCl.cH2ONaCl_PhaseBoundary_HaliteLiquidus(self, *args)

    def Triangulation(self, x_poly, y_poly, xIn, yIn, dx, dy):
        return _H2ONaCl.cH2ONaCl_Triangulation(self, x_poly, y_poly, xIn, yIn, dx, dy)

    def Slice_constP(self, P0, nPoints=500):
        return _H2ONaCl.cH2ONaCl_Slice_constP(self, P0, nPoints)

    def Slice_constT(self, T0, nPoints=500):
        return _H2ONaCl.cH2ONaCl_Slice_constT(self, T0, nPoints)

    def Mol2Wt(self, *args):
        return _H2ONaCl.cH2ONaCl_Mol2Wt(self, *args)

    def Wt2Mol(self, *args):
        return _H2ONaCl.cH2ONaCl_Wt2Mol(self, *args)

    def P_X_Critical(self, *args):
        return _H2ONaCl.cH2ONaCl_P_X_Critical(self, *args)

    def P_Critical(self, *args):
        return _H2ONaCl.cH2ONaCl_P_Critical(self, *args)

    def T_Critical(self, *args):
        return _H2ONaCl.cH2ONaCl_T_Critical(self, *args)

    def T_X_Critical(self, *args):
        return _H2ONaCl.cH2ONaCl_T_X_Critical(self, *args)

    def X_HaliteLiquidus(self, *args):
        return _H2ONaCl.cH2ONaCl_X_HaliteLiquidus(self, *args)

    def P_VLH(self, *args):
        return _H2ONaCl.cH2ONaCl_P_VLH(self, *args)

    def X_VH(self, *args):
        return _H2ONaCl.cH2ONaCl_X_VH(self, *args)

    def X_VLH(self, *args):
        return _H2ONaCl.cH2ONaCl_X_VLH(self, *args)

    def XL_VL(self, *args):
        return _H2ONaCl.cH2ONaCl_XL_VL(self, *args)

    def XV_VL(self, *args):
        return _H2ONaCl.cH2ONaCl_XV_VL(self, *args)

    def X_VL(self, *args):
        return _H2ONaCl.cH2ONaCl_X_VL(self, *args)

    def getPhaseRegion_TPX(self, *args):
        return _H2ONaCl.cH2ONaCl_getPhaseRegion_TPX(self, *args)

    def H_phase(self, *args):
        return _H2ONaCl.cH2ONaCl_H_phase(self, *args)

    def Rho_phase(self, *args):
        return _H2ONaCl.cH2ONaCl_Rho_phase(self, *args)

    def n1n2_Tstar_V(self, P, X):
        return _H2ONaCl.cH2ONaCl_n1n2_Tstar_V(self, P, X)

    def D_Tstar_V(self, T, P, X):
        return _H2ONaCl.cH2ONaCl_D_Tstar_V(self, T, P, X)

    def q1q2_Tstar_H(self, P, X):
        return _H2ONaCl.cH2ONaCl_q1q2_Tstar_H(self, P, X)

# Register cH2ONaCl in _H2ONaCl:
_H2ONaCl.cH2ONaCl_swigregister(cH2ONaCl)
class Params_P2CriticalT(object):
    r"""Parameters for inversion of critical temperature from pressure."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sw = property(_H2ONaCl.Params_P2CriticalT_sw_get, _H2ONaCl.Params_P2CriticalT_sw_set, doc=r"""Pointer of cH2ONaCl class""")
    P = property(_H2ONaCl.Params_P2CriticalT_P_get, _H2ONaCl.Params_P2CriticalT_P_set, doc=r"""Input pressure [Pa]""")

    def __init__(self):
        _H2ONaCl.Params_P2CriticalT_swiginit(self, _H2ONaCl.new_Params_P2CriticalT())
    __swig_destroy__ = _H2ONaCl.delete_Params_P2CriticalT

# Register Params_P2CriticalT in _H2ONaCl:
_H2ONaCl.Params_P2CriticalT_swigregister(Params_P2CriticalT)
class Params_Inversion_PTX(object):
    r"""Parameters for pressure and temperature calculation in VLH zone."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sw = property(_H2ONaCl.Params_Inversion_PTX_sw_get, _H2ONaCl.Params_Inversion_PTX_sw_set, doc=r"""Pointer of cH2ONaCl class""")
    P = property(_H2ONaCl.Params_Inversion_PTX_P_get, _H2ONaCl.Params_Inversion_PTX_P_set)
    X = property(_H2ONaCl.Params_Inversion_PTX_X_get, _H2ONaCl.Params_Inversion_PTX_X_set)
    H = property(_H2ONaCl.Params_Inversion_PTX_H_get, _H2ONaCl.Params_Inversion_PTX_H_set)

    def __init__(self):
        _H2ONaCl.Params_Inversion_PTX_swiginit(self, _H2ONaCl.new_Params_Inversion_PTX())
    __swig_destroy__ = _H2ONaCl.delete_Params_Inversion_PTX

# Register Params_Inversion_PTX in _H2ONaCl:
_H2ONaCl.Params_Inversion_PTX_swigregister(Params_Inversion_PTX)
class Params_PX2T_VL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sw = property(_H2ONaCl.Params_PX2T_VL_sw_get, _H2ONaCl.Params_PX2T_VL_sw_set, doc=r"""Pointer of cH2ONaCl class""")
    P = property(_H2ONaCl.Params_PX2T_VL_P_get, _H2ONaCl.Params_PX2T_VL_P_set, doc=r"""Input pressure [Pa]""")
    X = property(_H2ONaCl.Params_PX2T_VL_X_get, _H2ONaCl.Params_PX2T_VL_X_set, doc=r"""Input salinity [kg/kg]""")
    phase = property(_H2ONaCl.Params_PX2T_VL_phase_get, _H2ONaCl.Params_PX2T_VL_phase_set, doc=r"""Liquid, Vapor""")

    def __init__(self):
        _H2ONaCl.Params_PX2T_VL_swiginit(self, _H2ONaCl.new_Params_PX2T_VL())
    __swig_destroy__ = _H2ONaCl.delete_Params_PX2T_VL

# Register Params_PX2T_VL in _H2ONaCl:
_H2ONaCl.Params_PX2T_VL_swigregister(Params_PX2T_VL)

