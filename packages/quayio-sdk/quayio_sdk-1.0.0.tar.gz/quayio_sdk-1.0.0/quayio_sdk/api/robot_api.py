# coding: utf-8

"""
    Quay Frontend

    This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@quay.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from quayio_sdk.api_client import ApiClient


class RobotApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_org_robot(self, robot_shortname, orgname, body, **kwargs):  # noqa: E501
        """create_org_robot  # noqa: E501

        Create a new robot in the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_org_robot(robot_shortname, orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param str orgname: The name of the organization (required)
        :param CreateRobot body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_org_robot_with_http_info(robot_shortname, orgname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_org_robot_with_http_info(robot_shortname, orgname, body, **kwargs)  # noqa: E501
            return data

    def create_org_robot_with_http_info(self, robot_shortname, orgname, body, **kwargs):  # noqa: E501
        """create_org_robot  # noqa: E501

        Create a new robot in the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_org_robot_with_http_info(robot_shortname, orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param str orgname: The name of the organization (required)
        :param CreateRobot body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_shortname', 'orgname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_org_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_shortname' is set
        if self.api_client.client_side_validation and ('robot_shortname' not in params or
                                                       params['robot_shortname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `robot_shortname` when calling `create_org_robot`")  # noqa: E501
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `create_org_robot`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_org_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_shortname' in params:
            path_params['robot_shortname'] = params['robot_shortname']  # noqa: E501
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/robots/{robot_shortname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_user_robot(self, robot_shortname, body, **kwargs):  # noqa: E501
        """create_user_robot  # noqa: E501

        Create a new user robot with the specified name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_robot(robot_shortname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param CreateRobot body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_user_robot_with_http_info(robot_shortname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_user_robot_with_http_info(robot_shortname, body, **kwargs)  # noqa: E501
            return data

    def create_user_robot_with_http_info(self, robot_shortname, body, **kwargs):  # noqa: E501
        """create_user_robot  # noqa: E501

        Create a new user robot with the specified name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_user_robot_with_http_info(robot_shortname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param CreateRobot body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_shortname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_shortname' is set
        if self.api_client.client_side_validation and ('robot_shortname' not in params or
                                                       params['robot_shortname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `robot_shortname` when calling `create_user_robot`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_user_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_shortname' in params:
            path_params['robot_shortname'] = params['robot_shortname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/user/robots/{robot_shortname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_org_robot(self, robot_shortname, orgname, **kwargs):  # noqa: E501
        """delete_org_robot  # noqa: E501

        Delete an existing organization robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_org_robot(robot_shortname, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_org_robot_with_http_info(robot_shortname, orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_org_robot_with_http_info(robot_shortname, orgname, **kwargs)  # noqa: E501
            return data

    def delete_org_robot_with_http_info(self, robot_shortname, orgname, **kwargs):  # noqa: E501
        """delete_org_robot  # noqa: E501

        Delete an existing organization robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_org_robot_with_http_info(robot_shortname, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_shortname', 'orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_org_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_shortname' is set
        if self.api_client.client_side_validation and ('robot_shortname' not in params or
                                                       params['robot_shortname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `robot_shortname` when calling `delete_org_robot`")  # noqa: E501
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `delete_org_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_shortname' in params:
            path_params['robot_shortname'] = params['robot_shortname']  # noqa: E501
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/robots/{robot_shortname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_robot(self, robot_shortname, **kwargs):  # noqa: E501
        """delete_user_robot  # noqa: E501

        Delete an existing robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_robot(robot_shortname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_robot_with_http_info(robot_shortname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_robot_with_http_info(robot_shortname, **kwargs)  # noqa: E501
            return data

    def delete_user_robot_with_http_info(self, robot_shortname, **kwargs):  # noqa: E501
        """delete_user_robot  # noqa: E501

        Delete an existing robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_robot_with_http_info(robot_shortname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_shortname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_shortname' is set
        if self.api_client.client_side_validation and ('robot_shortname' not in params or
                                                       params['robot_shortname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `robot_shortname` when calling `delete_user_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_shortname' in params:
            path_params['robot_shortname'] = params['robot_shortname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/user/robots/{robot_shortname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_org_robot(self, robot_shortname, orgname, **kwargs):  # noqa: E501
        """get_org_robot  # noqa: E501

        Returns the organization's robot with the specified name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_robot(robot_shortname, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_org_robot_with_http_info(robot_shortname, orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_org_robot_with_http_info(robot_shortname, orgname, **kwargs)  # noqa: E501
            return data

    def get_org_robot_with_http_info(self, robot_shortname, orgname, **kwargs):  # noqa: E501
        """get_org_robot  # noqa: E501

        Returns the organization's robot with the specified name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_robot_with_http_info(robot_shortname, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_shortname', 'orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_org_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_shortname' is set
        if self.api_client.client_side_validation and ('robot_shortname' not in params or
                                                       params['robot_shortname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `robot_shortname` when calling `get_org_robot`")  # noqa: E501
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_org_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_shortname' in params:
            path_params['robot_shortname'] = params['robot_shortname']  # noqa: E501
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/robots/{robot_shortname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_org_robot_permissions(self, robot_shortname, orgname, **kwargs):  # noqa: E501
        """get_org_robot_permissions  # noqa: E501

        Returns the list of repository permissions for the org's robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_robot_permissions(robot_shortname, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_org_robot_permissions_with_http_info(robot_shortname, orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_org_robot_permissions_with_http_info(robot_shortname, orgname, **kwargs)  # noqa: E501
            return data

    def get_org_robot_permissions_with_http_info(self, robot_shortname, orgname, **kwargs):  # noqa: E501
        """get_org_robot_permissions  # noqa: E501

        Returns the list of repository permissions for the org's robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_robot_permissions_with_http_info(robot_shortname, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_shortname', 'orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_org_robot_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_shortname' is set
        if self.api_client.client_side_validation and ('robot_shortname' not in params or
                                                       params['robot_shortname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `robot_shortname` when calling `get_org_robot_permissions`")  # noqa: E501
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_org_robot_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_shortname' in params:
            path_params['robot_shortname'] = params['robot_shortname']  # noqa: E501
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/robots/{robot_shortname}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_org_robots(self, orgname, **kwargs):  # noqa: E501
        """get_org_robots  # noqa: E501

        List the organization's robots.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_robots(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param int limit: If specified, the number of robots to return.
        :param bool token: If false, the robot's token is not returned.
        :param bool permissions: Whether to include repostories and teams in which the robots have permission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_org_robots_with_http_info(orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_org_robots_with_http_info(orgname, **kwargs)  # noqa: E501
            return data

    def get_org_robots_with_http_info(self, orgname, **kwargs):  # noqa: E501
        """get_org_robots  # noqa: E501

        List the organization's robots.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_robots_with_http_info(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param int limit: If specified, the number of robots to return.
        :param bool token: If false, the robot's token is not returned.
        :param bool permissions: Whether to include repostories and teams in which the robots have permission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'limit', 'token', 'permissions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_org_robots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_org_robots`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'permissions' in params:
            query_params.append(('permissions', params['permissions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/robots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_robot(self, robot_shortname, **kwargs):  # noqa: E501
        """get_user_robot  # noqa: E501

        Returns the user's robot with the specified name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_robot(robot_shortname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_robot_with_http_info(robot_shortname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_robot_with_http_info(robot_shortname, **kwargs)  # noqa: E501
            return data

    def get_user_robot_with_http_info(self, robot_shortname, **kwargs):  # noqa: E501
        """get_user_robot  # noqa: E501

        Returns the user's robot with the specified name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_robot_with_http_info(robot_shortname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_shortname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_shortname' is set
        if self.api_client.client_side_validation and ('robot_shortname' not in params or
                                                       params['robot_shortname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `robot_shortname` when calling `get_user_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_shortname' in params:
            path_params['robot_shortname'] = params['robot_shortname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/user/robots/{robot_shortname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_robot_permissions(self, robot_shortname, **kwargs):  # noqa: E501
        """get_user_robot_permissions  # noqa: E501

        Returns the list of repository permissions for the user's robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_robot_permissions(robot_shortname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_robot_permissions_with_http_info(robot_shortname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_robot_permissions_with_http_info(robot_shortname, **kwargs)  # noqa: E501
            return data

    def get_user_robot_permissions_with_http_info(self, robot_shortname, **kwargs):  # noqa: E501
        """get_user_robot_permissions  # noqa: E501

        Returns the list of repository permissions for the user's robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_robot_permissions_with_http_info(robot_shortname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_shortname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_robot_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_shortname' is set
        if self.api_client.client_side_validation and ('robot_shortname' not in params or
                                                       params['robot_shortname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `robot_shortname` when calling `get_user_robot_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_shortname' in params:
            path_params['robot_shortname'] = params['robot_shortname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/user/robots/{robot_shortname}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_robots(self, **kwargs):  # noqa: E501
        """get_user_robots  # noqa: E501

        List the available robots for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_robots(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: If specified, the number of robots to return.
        :param bool token: If false, the robot's token is not returned.
        :param bool permissions: Whether to include repositories and teams in which the robots have permission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_robots_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_user_robots_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_user_robots_with_http_info(self, **kwargs):  # noqa: E501
        """get_user_robots  # noqa: E501

        List the available robots for the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_robots_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: If specified, the number of robots to return.
        :param bool token: If false, the robot's token is not returned.
        :param bool permissions: Whether to include repositories and teams in which the robots have permission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'token', 'permissions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_robots" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'permissions' in params:
            query_params.append(('permissions', params['permissions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/user/robots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def regenerate_org_robot_token(self, robot_shortname, orgname, **kwargs):  # noqa: E501
        """regenerate_org_robot_token  # noqa: E501

        Regenerates the token for an organization robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.regenerate_org_robot_token(robot_shortname, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.regenerate_org_robot_token_with_http_info(robot_shortname, orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.regenerate_org_robot_token_with_http_info(robot_shortname, orgname, **kwargs)  # noqa: E501
            return data

    def regenerate_org_robot_token_with_http_info(self, robot_shortname, orgname, **kwargs):  # noqa: E501
        """regenerate_org_robot_token  # noqa: E501

        Regenerates the token for an organization robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.regenerate_org_robot_token_with_http_info(robot_shortname, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_shortname', 'orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method regenerate_org_robot_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_shortname' is set
        if self.api_client.client_side_validation and ('robot_shortname' not in params or
                                                       params['robot_shortname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `robot_shortname` when calling `regenerate_org_robot_token`")  # noqa: E501
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `regenerate_org_robot_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_shortname' in params:
            path_params['robot_shortname'] = params['robot_shortname']  # noqa: E501
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def regenerate_user_robot_token(self, robot_shortname, **kwargs):  # noqa: E501
        """regenerate_user_robot_token  # noqa: E501

        Regenerates the token for a user's robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.regenerate_user_robot_token(robot_shortname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.regenerate_user_robot_token_with_http_info(robot_shortname, **kwargs)  # noqa: E501
        else:
            (data) = self.regenerate_user_robot_token_with_http_info(robot_shortname, **kwargs)  # noqa: E501
            return data

    def regenerate_user_robot_token_with_http_info(self, robot_shortname, **kwargs):  # noqa: E501
        """regenerate_user_robot_token  # noqa: E501

        Regenerates the token for a user's robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.regenerate_user_robot_token_with_http_info(robot_shortname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str robot_shortname: The short name for the robot, without any user or organization prefix (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_shortname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method regenerate_user_robot_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_shortname' is set
        if self.api_client.client_side_validation and ('robot_shortname' not in params or
                                                       params['robot_shortname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `robot_shortname` when calling `regenerate_user_robot_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_shortname' in params:
            path_params['robot_shortname'] = params['robot_shortname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/user/robots/{robot_shortname}/regenerate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
