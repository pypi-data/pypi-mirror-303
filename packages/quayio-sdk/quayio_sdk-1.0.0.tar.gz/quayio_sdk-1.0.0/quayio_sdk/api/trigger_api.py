# coding: utf-8

"""
    Quay Frontend

    This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@quay.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from quayio_sdk.api_client import ApiClient


class TriggerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_build_trigger(self, repository, trigger_uuid, body, **kwargs):  # noqa: E501
        """activate_build_trigger  # noqa: E501

        Activate the specified build trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_build_trigger(repository, trigger_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :param BuildTriggerActivateRequest body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_build_trigger_with_http_info(repository, trigger_uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_build_trigger_with_http_info(repository, trigger_uuid, body, **kwargs)  # noqa: E501
            return data

    def activate_build_trigger_with_http_info(self, repository, trigger_uuid, body, **kwargs):  # noqa: E501
        """activate_build_trigger  # noqa: E501

        Activate the specified build trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_build_trigger_with_http_info(repository, trigger_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :param BuildTriggerActivateRequest body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'trigger_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_build_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in params or
                                                       params['repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository` when calling `activate_build_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_uuid' is set
        if self.api_client.client_side_validation and ('trigger_uuid' not in params or
                                                       params['trigger_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `trigger_uuid` when calling `activate_build_trigger`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `activate_build_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'trigger_uuid' in params:
            path_params['trigger_uuid'] = params['trigger_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repository/{repository}/trigger/{trigger_uuid}/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_build_trigger(self, repository, trigger_uuid, **kwargs):  # noqa: E501
        """delete_build_trigger  # noqa: E501

        Delete the specified build trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_trigger(repository, trigger_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_build_trigger_with_http_info(repository, trigger_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_build_trigger_with_http_info(repository, trigger_uuid, **kwargs)  # noqa: E501
            return data

    def delete_build_trigger_with_http_info(self, repository, trigger_uuid, **kwargs):  # noqa: E501
        """delete_build_trigger  # noqa: E501

        Delete the specified build trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_build_trigger_with_http_info(repository, trigger_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'trigger_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_build_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in params or
                                                       params['repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository` when calling `delete_build_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_uuid' is set
        if self.api_client.client_side_validation and ('trigger_uuid' not in params or
                                                       params['trigger_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `trigger_uuid` when calling `delete_build_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'trigger_uuid' in params:
            path_params['trigger_uuid'] = params['trigger_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repository/{repository}/trigger/{trigger_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_build_trigger(self, repository, trigger_uuid, **kwargs):  # noqa: E501
        """get_build_trigger  # noqa: E501

        Get information for the specified build trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_trigger(repository, trigger_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_build_trigger_with_http_info(repository, trigger_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_build_trigger_with_http_info(repository, trigger_uuid, **kwargs)  # noqa: E501
            return data

    def get_build_trigger_with_http_info(self, repository, trigger_uuid, **kwargs):  # noqa: E501
        """get_build_trigger  # noqa: E501

        Get information for the specified build trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_build_trigger_with_http_info(repository, trigger_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'trigger_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_build_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in params or
                                                       params['repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository` when calling `get_build_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_uuid' is set
        if self.api_client.client_side_validation and ('trigger_uuid' not in params or
                                                       params['trigger_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `trigger_uuid` when calling `get_build_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'trigger_uuid' in params:
            path_params['trigger_uuid'] = params['trigger_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repository/{repository}/trigger/{trigger_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_build_triggers(self, repository, **kwargs):  # noqa: E501
        """list_build_triggers  # noqa: E501

        List the triggers for the specified repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_build_triggers(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_build_triggers_with_http_info(repository, **kwargs)  # noqa: E501
        else:
            (data) = self.list_build_triggers_with_http_info(repository, **kwargs)  # noqa: E501
            return data

    def list_build_triggers_with_http_info(self, repository, **kwargs):  # noqa: E501
        """list_build_triggers  # noqa: E501

        List the triggers for the specified repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_build_triggers_with_http_info(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_build_triggers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in params or
                                                       params['repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository` when calling `list_build_triggers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repository/{repository}/trigger/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_trigger_recent_builds(self, repository, trigger_uuid, **kwargs):  # noqa: E501
        """list_trigger_recent_builds  # noqa: E501

        List the builds started by the specified trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_trigger_recent_builds(repository, trigger_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :param int limit: The maximum number of builds to return
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_trigger_recent_builds_with_http_info(repository, trigger_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.list_trigger_recent_builds_with_http_info(repository, trigger_uuid, **kwargs)  # noqa: E501
            return data

    def list_trigger_recent_builds_with_http_info(self, repository, trigger_uuid, **kwargs):  # noqa: E501
        """list_trigger_recent_builds  # noqa: E501

        List the builds started by the specified trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_trigger_recent_builds_with_http_info(repository, trigger_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :param int limit: The maximum number of builds to return
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'trigger_uuid', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_trigger_recent_builds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in params or
                                                       params['repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository` when calling `list_trigger_recent_builds`")  # noqa: E501
        # verify the required parameter 'trigger_uuid' is set
        if self.api_client.client_side_validation and ('trigger_uuid' not in params or
                                                       params['trigger_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `trigger_uuid` when calling `list_trigger_recent_builds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'trigger_uuid' in params:
            path_params['trigger_uuid'] = params['trigger_uuid']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repository/{repository}/trigger/{trigger_uuid}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def manually_start_build_trigger(self, repository, trigger_uuid, body, **kwargs):  # noqa: E501
        """manually_start_build_trigger  # noqa: E501

        Manually start a build from the specified trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.manually_start_build_trigger(repository, trigger_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :param RunParameters body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.manually_start_build_trigger_with_http_info(repository, trigger_uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.manually_start_build_trigger_with_http_info(repository, trigger_uuid, body, **kwargs)  # noqa: E501
            return data

    def manually_start_build_trigger_with_http_info(self, repository, trigger_uuid, body, **kwargs):  # noqa: E501
        """manually_start_build_trigger  # noqa: E501

        Manually start a build from the specified trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.manually_start_build_trigger_with_http_info(repository, trigger_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :param RunParameters body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'trigger_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method manually_start_build_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in params or
                                                       params['repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository` when calling `manually_start_build_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_uuid' is set
        if self.api_client.client_side_validation and ('trigger_uuid' not in params or
                                                       params['trigger_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `trigger_uuid` when calling `manually_start_build_trigger`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `manually_start_build_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'trigger_uuid' in params:
            path_params['trigger_uuid'] = params['trigger_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repository/{repository}/trigger/{trigger_uuid}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_build_trigger(self, repository, trigger_uuid, body, **kwargs):  # noqa: E501
        """update_build_trigger  # noqa: E501

        Updates the specified build trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_trigger(repository, trigger_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :param UpdateTrigger body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_build_trigger_with_http_info(repository, trigger_uuid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_build_trigger_with_http_info(repository, trigger_uuid, body, **kwargs)  # noqa: E501
            return data

    def update_build_trigger_with_http_info(self, repository, trigger_uuid, body, **kwargs):  # noqa: E501
        """update_build_trigger  # noqa: E501

        Updates the specified build trigger.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_build_trigger_with_http_info(repository, trigger_uuid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str trigger_uuid: The UUID of the build trigger (required)
        :param UpdateTrigger body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'trigger_uuid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_build_trigger" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in params or
                                                       params['repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository` when calling `update_build_trigger`")  # noqa: E501
        # verify the required parameter 'trigger_uuid' is set
        if self.api_client.client_side_validation and ('trigger_uuid' not in params or
                                                       params['trigger_uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `trigger_uuid` when calling `update_build_trigger`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_build_trigger`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'trigger_uuid' in params:
            path_params['trigger_uuid'] = params['trigger_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repository/{repository}/trigger/{trigger_uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
