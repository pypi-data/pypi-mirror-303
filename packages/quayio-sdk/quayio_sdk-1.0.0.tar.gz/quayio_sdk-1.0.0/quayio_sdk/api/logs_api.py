# coding: utf-8

"""
    Quay Frontend

    This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@quay.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from quayio_sdk.api_client import ApiClient


class LogsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def export_org_logs(self, orgname, body, **kwargs):  # noqa: E501
        """export_org_logs  # noqa: E501

        Exports the logs for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_org_logs(orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param ExportLogs body: Request body contents. (required)
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_org_logs_with_http_info(orgname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.export_org_logs_with_http_info(orgname, body, **kwargs)  # noqa: E501
            return data

    def export_org_logs_with_http_info(self, orgname, body, **kwargs):  # noqa: E501
        """export_org_logs  # noqa: E501

        Exports the logs for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_org_logs_with_http_info(orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param ExportLogs body: Request body contents. (required)
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'body', 'endtime', 'starttime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_org_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `export_org_logs`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `export_org_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/exportlogs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_repo_logs(self, repository, body, **kwargs):  # noqa: E501
        """export_repo_logs  # noqa: E501

        Queues an export of the logs for the specified repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_repo_logs(repository, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param ExportLogs body: Request body contents. (required)
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_repo_logs_with_http_info(repository, body, **kwargs)  # noqa: E501
        else:
            (data) = self.export_repo_logs_with_http_info(repository, body, **kwargs)  # noqa: E501
            return data

    def export_repo_logs_with_http_info(self, repository, body, **kwargs):  # noqa: E501
        """export_repo_logs  # noqa: E501

        Queues an export of the logs for the specified repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_repo_logs_with_http_info(repository, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param ExportLogs body: Request body contents. (required)
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'body', 'endtime', 'starttime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_repo_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in params or
                                                       params['repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository` when calling `export_repo_logs`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `export_repo_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501

        query_params = []
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repository/{repository}/exportlogs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_user_logs(self, body, **kwargs):  # noqa: E501
        """export_user_logs  # noqa: E501

        Returns the aggregated logs for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_user_logs(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportLogs body: Request body contents. (required)
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_user_logs_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.export_user_logs_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def export_user_logs_with_http_info(self, body, **kwargs):  # noqa: E501
        """export_user_logs  # noqa: E501

        Returns the aggregated logs for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_user_logs_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExportLogs body: Request body contents. (required)
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'endtime', 'starttime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_user_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `export_user_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/user/exportlogs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregate_org_logs(self, orgname, **kwargs):  # noqa: E501
        """get_aggregate_org_logs  # noqa: E501

        Gets the aggregated logs for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregate_org_logs(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str performer: Username for which to filter logs.
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregate_org_logs_with_http_info(orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregate_org_logs_with_http_info(orgname, **kwargs)  # noqa: E501
            return data

    def get_aggregate_org_logs_with_http_info(self, orgname, **kwargs):  # noqa: E501
        """get_aggregate_org_logs  # noqa: E501

        Gets the aggregated logs for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregate_org_logs_with_http_info(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str performer: Username for which to filter logs.
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'performer', 'endtime', 'starttime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregate_org_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_aggregate_org_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []
        if 'performer' in params:
            query_params.append(('performer', params['performer']))  # noqa: E501
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/aggregatelogs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregate_repo_logs(self, repository, **kwargs):  # noqa: E501
        """get_aggregate_repo_logs  # noqa: E501

        Returns the aggregated logs for the specified repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregate_repo_logs(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregate_repo_logs_with_http_info(repository, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregate_repo_logs_with_http_info(repository, **kwargs)  # noqa: E501
            return data

    def get_aggregate_repo_logs_with_http_info(self, repository, **kwargs):  # noqa: E501
        """get_aggregate_repo_logs  # noqa: E501

        Returns the aggregated logs for the specified repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregate_repo_logs_with_http_info(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'endtime', 'starttime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregate_repo_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in params or
                                                       params['repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository` when calling `get_aggregate_repo_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501

        query_params = []
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repository/{repository}/aggregatelogs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregate_user_logs(self, **kwargs):  # noqa: E501
        """get_aggregate_user_logs  # noqa: E501

        Returns the aggregated logs for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregate_user_logs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str performer: Username for which to filter logs.
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregate_user_logs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregate_user_logs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_aggregate_user_logs_with_http_info(self, **kwargs):  # noqa: E501
        """get_aggregate_user_logs  # noqa: E501

        Returns the aggregated logs for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregate_user_logs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str performer: Username for which to filter logs.
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['performer', 'endtime', 'starttime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregate_user_logs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'performer' in params:
            query_params.append(('performer', params['performer']))  # noqa: E501
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/user/aggregatelogs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_org_logs(self, orgname, **kwargs):  # noqa: E501
        """list_org_logs  # noqa: E501

        List the logs for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_org_logs(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str next_page: The page token for the next page
        :param str performer: Username for which to filter logs.
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_org_logs_with_http_info(orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.list_org_logs_with_http_info(orgname, **kwargs)  # noqa: E501
            return data

    def list_org_logs_with_http_info(self, orgname, **kwargs):  # noqa: E501
        """list_org_logs  # noqa: E501

        List the logs for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_org_logs_with_http_info(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str next_page: The page token for the next page
        :param str performer: Username for which to filter logs.
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'next_page', 'performer', 'endtime', 'starttime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_org_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `list_org_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []
        if 'next_page' in params:
            query_params.append(('next_page', params['next_page']))  # noqa: E501
        if 'performer' in params:
            query_params.append(('performer', params['performer']))  # noqa: E501
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_repo_logs(self, repository, **kwargs):  # noqa: E501
        """list_repo_logs  # noqa: E501

        List the logs for the specified repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_repo_logs(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str next_page: The page token for the next page
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_repo_logs_with_http_info(repository, **kwargs)  # noqa: E501
        else:
            (data) = self.list_repo_logs_with_http_info(repository, **kwargs)  # noqa: E501
            return data

    def list_repo_logs_with_http_info(self, repository, **kwargs):  # noqa: E501
        """list_repo_logs  # noqa: E501

        List the logs for the specified repository.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_repo_logs_with_http_info(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: The full path of the repository. e.g. namespace/name (required)
        :param str next_page: The page token for the next page
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'next_page', 'endtime', 'starttime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_repo_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if self.api_client.client_side_validation and ('repository' not in params or
                                                       params['repository'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repository` when calling `list_repo_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501

        query_params = []
        if 'next_page' in params:
            query_params.append(('next_page', params['next_page']))  # noqa: E501
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/repository/{repository}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_user_logs(self, **kwargs):  # noqa: E501
        """list_user_logs  # noqa: E501

        List the logs for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_logs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_page: The page token for the next page
        :param str performer: Username for which to filter logs.
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_user_logs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_user_logs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_user_logs_with_http_info(self, **kwargs):  # noqa: E501
        """list_user_logs  # noqa: E501

        List the logs for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_logs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_page: The page token for the next page
        :param str performer: Username for which to filter logs.
        :param str endtime: Latest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :param str starttime: Earliest time for logs. Format: \"%m/%d/%Y\" in UTC.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next_page', 'performer', 'endtime', 'starttime']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_user_logs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next_page' in params:
            query_params.append(('next_page', params['next_page']))  # noqa: E501
        if 'performer' in params:
            query_params.append(('performer', params['performer']))  # noqa: E501
        if 'endtime' in params:
            query_params.append(('endtime', params['endtime']))  # noqa: E501
        if 'starttime' in params:
            query_params.append(('starttime', params['starttime']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/user/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
