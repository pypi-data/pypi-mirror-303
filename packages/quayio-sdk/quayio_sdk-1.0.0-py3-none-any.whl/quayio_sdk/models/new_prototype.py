# coding: utf-8

"""
    Quay Frontend

    This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@quay.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from quayio_sdk.configuration import Configuration


class NewPrototype(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role': 'str',
        'activating_user': 'NewPrototypeActivatingUser',
        'delegate': 'NewPrototypeDelegate'
    }

    attribute_map = {
        'role': 'role',
        'activating_user': 'activating_user',
        'delegate': 'delegate'
    }

    def __init__(self, role=None, activating_user=None, delegate=None, _configuration=None):  # noqa: E501
        """NewPrototype - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._role = None
        self._activating_user = None
        self._delegate = None
        self.discriminator = None

        self.role = role
        if activating_user is not None:
            self.activating_user = activating_user
        self.delegate = delegate

    @property
    def role(self):
        """Gets the role of this NewPrototype.  # noqa: E501

        Role that should be applied to the delegate  # noqa: E501

        :return: The role of this NewPrototype.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this NewPrototype.

        Role that should be applied to the delegate  # noqa: E501

        :param role: The role of this NewPrototype.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["read", "write", "admin"]  # noqa: E501
        if (self._configuration.client_side_validation and
                role not in allowed_values):
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def activating_user(self):
        """Gets the activating_user of this NewPrototype.  # noqa: E501


        :return: The activating_user of this NewPrototype.  # noqa: E501
        :rtype: NewPrototypeActivatingUser
        """
        return self._activating_user

    @activating_user.setter
    def activating_user(self, activating_user):
        """Sets the activating_user of this NewPrototype.


        :param activating_user: The activating_user of this NewPrototype.  # noqa: E501
        :type: NewPrototypeActivatingUser
        """

        self._activating_user = activating_user

    @property
    def delegate(self):
        """Gets the delegate of this NewPrototype.  # noqa: E501


        :return: The delegate of this NewPrototype.  # noqa: E501
        :rtype: NewPrototypeDelegate
        """
        return self._delegate

    @delegate.setter
    def delegate(self, delegate):
        """Sets the delegate of this NewPrototype.


        :param delegate: The delegate of this NewPrototype.  # noqa: E501
        :type: NewPrototypeDelegate
        """
        if self._configuration.client_side_validation and delegate is None:
            raise ValueError("Invalid value for `delegate`, must not be `None`")  # noqa: E501

        self._delegate = delegate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewPrototype, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewPrototype):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewPrototype):
            return True

        return self.to_dict() != other.to_dict()
