# coding: utf-8

"""
    Quay Frontend

    This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@quay.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from quayio_sdk.api_client import ApiClient


class PrototypeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_organization_prototype_permission(self, orgname, body, **kwargs):  # noqa: E501
        """create_organization_prototype_permission  # noqa: E501

        Create a new permission prototype.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization_prototype_permission(orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param NewPrototype body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_organization_prototype_permission_with_http_info(orgname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_organization_prototype_permission_with_http_info(orgname, body, **kwargs)  # noqa: E501
            return data

    def create_organization_prototype_permission_with_http_info(self, orgname, body, **kwargs):  # noqa: E501
        """create_organization_prototype_permission  # noqa: E501

        Create a new permission prototype.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization_prototype_permission_with_http_info(orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param NewPrototype body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_organization_prototype_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `create_organization_prototype_permission`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_organization_prototype_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/prototypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organization_prototype_permission(self, orgname, prototypeid, **kwargs):  # noqa: E501
        """delete_organization_prototype_permission  # noqa: E501

        Delete an existing permission prototype.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_prototype_permission(orgname, prototypeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str prototypeid: The ID of the prototype (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_organization_prototype_permission_with_http_info(orgname, prototypeid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organization_prototype_permission_with_http_info(orgname, prototypeid, **kwargs)  # noqa: E501
            return data

    def delete_organization_prototype_permission_with_http_info(self, orgname, prototypeid, **kwargs):  # noqa: E501
        """delete_organization_prototype_permission  # noqa: E501

        Delete an existing permission prototype.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_prototype_permission_with_http_info(orgname, prototypeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str prototypeid: The ID of the prototype (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'prototypeid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organization_prototype_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `delete_organization_prototype_permission`")  # noqa: E501
        # verify the required parameter 'prototypeid' is set
        if self.api_client.client_side_validation and ('prototypeid' not in params or
                                                       params['prototypeid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prototypeid` when calling `delete_organization_prototype_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501
        if 'prototypeid' in params:
            path_params['prototypeid'] = params['prototypeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/prototypes/{prototypeid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization_prototype_permissions(self, orgname, **kwargs):  # noqa: E501
        """get_organization_prototype_permissions  # noqa: E501

        List the existing prototypes for this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_prototype_permissions(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_prototype_permissions_with_http_info(orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_prototype_permissions_with_http_info(orgname, **kwargs)  # noqa: E501
            return data

    def get_organization_prototype_permissions_with_http_info(self, orgname, **kwargs):  # noqa: E501
        """get_organization_prototype_permissions  # noqa: E501

        List the existing prototypes for this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_prototype_permissions_with_http_info(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_prototype_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_organization_prototype_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/prototypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_organization_prototype_permission(self, orgname, prototypeid, body, **kwargs):  # noqa: E501
        """update_organization_prototype_permission  # noqa: E501

        Update the role of an existing permission prototype.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_prototype_permission(orgname, prototypeid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str prototypeid: The ID of the prototype (required)
        :param PrototypeUpdate body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_organization_prototype_permission_with_http_info(orgname, prototypeid, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_organization_prototype_permission_with_http_info(orgname, prototypeid, body, **kwargs)  # noqa: E501
            return data

    def update_organization_prototype_permission_with_http_info(self, orgname, prototypeid, body, **kwargs):  # noqa: E501
        """update_organization_prototype_permission  # noqa: E501

        Update the role of an existing permission prototype.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_prototype_permission_with_http_info(orgname, prototypeid, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str prototypeid: The ID of the prototype (required)
        :param PrototypeUpdate body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'prototypeid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_organization_prototype_permission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `update_organization_prototype_permission`")  # noqa: E501
        # verify the required parameter 'prototypeid' is set
        if self.api_client.client_side_validation and ('prototypeid' not in params or
                                                       params['prototypeid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `prototypeid` when calling `update_organization_prototype_permission`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_organization_prototype_permission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501
        if 'prototypeid' in params:
            path_params['prototypeid'] = params['prototypeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/prototypes/{prototypeid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
