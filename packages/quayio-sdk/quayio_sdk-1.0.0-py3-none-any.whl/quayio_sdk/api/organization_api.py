# coding: utf-8

"""
    Quay Frontend

    This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations.  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@quay.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from quayio_sdk.api_client import ApiClient


class OrganizationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def change_organization_details(self, orgname, body, **kwargs):  # noqa: E501
        """change_organization_details  # noqa: E501

        Change the details for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_organization_details(orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param UpdateOrg body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_organization_details_with_http_info(orgname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.change_organization_details_with_http_info(orgname, body, **kwargs)  # noqa: E501
            return data

    def change_organization_details_with_http_info(self, orgname, body, **kwargs):  # noqa: E501
        """change_organization_details  # noqa: E501

        Change the details for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_organization_details_with_http_info(orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param UpdateOrg body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_organization_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `change_organization_details`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `change_organization_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_organization(self, body, **kwargs):  # noqa: E501
        """create_organization  # noqa: E501

        Create a new organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewOrg body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_organization_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_organization_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_organization_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_organization  # noqa: E501

        Create a new organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewOrg body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_organization_application(self, orgname, body, **kwargs):  # noqa: E501
        """create_organization_application  # noqa: E501

        Creates a new application under this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization_application(orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param NewApp body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_organization_application_with_http_info(orgname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_organization_application_with_http_info(orgname, body, **kwargs)  # noqa: E501
            return data

    def create_organization_application_with_http_info(self, orgname, body, **kwargs):  # noqa: E501
        """create_organization_application  # noqa: E501

        Creates a new application under this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_organization_application_with_http_info(orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param NewApp body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_organization_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `create_organization_application`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_organization_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/applications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_admined_organization(self, orgname, **kwargs):  # noqa: E501
        """delete_admined_organization  # noqa: E501

        Deletes the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_admined_organization(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_admined_organization_with_http_info(orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_admined_organization_with_http_info(orgname, **kwargs)  # noqa: E501
            return data

    def delete_admined_organization_with_http_info(self, orgname, **kwargs):  # noqa: E501
        """delete_admined_organization  # noqa: E501

        Deletes the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_admined_organization_with_http_info(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_admined_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `delete_admined_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_organization_application(self, client_id, orgname, **kwargs):  # noqa: E501
        """delete_organization_application  # noqa: E501

        Deletes the application under this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_application(client_id, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The OAuth client ID (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_organization_application_with_http_info(client_id, orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_organization_application_with_http_info(client_id, orgname, **kwargs)  # noqa: E501
            return data

    def delete_organization_application_with_http_info(self, client_id, orgname, **kwargs):  # noqa: E501
        """delete_organization_application  # noqa: E501

        Deletes the application under this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_organization_application_with_http_info(client_id, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The OAuth client ID (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_organization_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in params or
                                                       params['client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `delete_organization_application`")  # noqa: E501
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `delete_organization_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']  # noqa: E501
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/applications/{client_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_application_information(self, client_id, **kwargs):  # noqa: E501
        """get_application_information  # noqa: E501

        Get information on the specified application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_information(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The OAuth client ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_application_information_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_application_information_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def get_application_information_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """get_application_information  # noqa: E501

        Get information on the specified application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_information_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The OAuth client ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in params or
                                                       params['client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `get_application_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/app/{client_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization(self, orgname, **kwargs):  # noqa: E501
        """get_organization  # noqa: E501

        Get the details for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_with_http_info(orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_with_http_info(orgname, **kwargs)  # noqa: E501
            return data

    def get_organization_with_http_info(self, orgname, **kwargs):  # noqa: E501
        """get_organization  # noqa: E501

        Get the details for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_with_http_info(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_organization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization_application(self, client_id, orgname, **kwargs):  # noqa: E501
        """get_organization_application  # noqa: E501

        Retrieves the application with the specified client_id under the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_application(client_id, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The OAuth client ID (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_application_with_http_info(client_id, orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_application_with_http_info(client_id, orgname, **kwargs)  # noqa: E501
            return data

    def get_organization_application_with_http_info(self, client_id, orgname, **kwargs):  # noqa: E501
        """get_organization_application  # noqa: E501

        Retrieves the application with the specified client_id under the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_application_with_http_info(client_id, orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The OAuth client ID (required)
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in params or
                                                       params['client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `get_organization_application`")  # noqa: E501
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_organization_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']  # noqa: E501
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/applications/{client_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization_applications(self, orgname, **kwargs):  # noqa: E501
        """get_organization_applications  # noqa: E501

        List the applications for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_applications(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_applications_with_http_info(orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_applications_with_http_info(orgname, **kwargs)  # noqa: E501
            return data

    def get_organization_applications_with_http_info(self, orgname, **kwargs):  # noqa: E501
        """get_organization_applications  # noqa: E501

        List the applications for the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_applications_with_http_info(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_applications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_organization_applications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization_collaborators(self, orgname, **kwargs):  # noqa: E501
        """get_organization_collaborators  # noqa: E501

        List outside collaborators of the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_collaborators(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_collaborators_with_http_info(orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_collaborators_with_http_info(orgname, **kwargs)  # noqa: E501
            return data

    def get_organization_collaborators_with_http_info(self, orgname, **kwargs):  # noqa: E501
        """get_organization_collaborators  # noqa: E501

        List outside collaborators of the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_collaborators_with_http_info(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_collaborators" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_organization_collaborators`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/collaborators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization_member(self, orgname, membername, **kwargs):  # noqa: E501
        """get_organization_member  # noqa: E501

        Retrieves the details of a member of the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_member(orgname, membername, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str membername: The username of the organization member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_member_with_http_info(orgname, membername, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_member_with_http_info(orgname, membername, **kwargs)  # noqa: E501
            return data

    def get_organization_member_with_http_info(self, orgname, membername, **kwargs):  # noqa: E501
        """get_organization_member  # noqa: E501

        Retrieves the details of a member of the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_member_with_http_info(orgname, membername, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str membername: The username of the organization member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'membername']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_organization_member`")  # noqa: E501
        # verify the required parameter 'membername' is set
        if self.api_client.client_side_validation and ('membername' not in params or
                                                       params['membername'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `membername` when calling `get_organization_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501
        if 'membername' in params:
            path_params['membername'] = params['membername']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/members/{membername}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization_members(self, orgname, **kwargs):  # noqa: E501
        """get_organization_members  # noqa: E501

        List the human members of the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_members(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_members_with_http_info(orgname, **kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_members_with_http_info(orgname, **kwargs)  # noqa: E501
            return data

    def get_organization_members_with_http_info(self, orgname, **kwargs):  # noqa: E501
        """get_organization_members  # noqa: E501

        List the human members of the specified organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_members_with_http_info(orgname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `get_organization_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_organization_member(self, orgname, membername, **kwargs):  # noqa: E501
        """remove_organization_member  # noqa: E501

        Removes a member from an organization, revoking all its repository priviledges and removing         it from all teams in the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_organization_member(orgname, membername, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str membername: The username of the organization member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_organization_member_with_http_info(orgname, membername, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_organization_member_with_http_info(orgname, membername, **kwargs)  # noqa: E501
            return data

    def remove_organization_member_with_http_info(self, orgname, membername, **kwargs):  # noqa: E501
        """remove_organization_member  # noqa: E501

        Removes a member from an organization, revoking all its repository priviledges and removing         it from all teams in the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_organization_member_with_http_info(orgname, membername, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str orgname: The name of the organization (required)
        :param str membername: The username of the organization member (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orgname', 'membername']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_organization_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `remove_organization_member`")  # noqa: E501
        # verify the required parameter 'membername' is set
        if self.api_client.client_side_validation and ('membername' not in params or
                                                       params['membername'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `membername` when calling `remove_organization_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501
        if 'membername' in params:
            path_params['membername'] = params['membername']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/members/{membername}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_organization_application(self, client_id, orgname, body, **kwargs):  # noqa: E501
        """update_organization_application  # noqa: E501

        Updates an application under this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_application(client_id, orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The OAuth client ID (required)
        :param str orgname: The name of the organization (required)
        :param UpdateApp body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_organization_application_with_http_info(client_id, orgname, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_organization_application_with_http_info(client_id, orgname, body, **kwargs)  # noqa: E501
            return data

    def update_organization_application_with_http_info(self, client_id, orgname, body, **kwargs):  # noqa: E501
        """update_organization_application  # noqa: E501

        Updates an application under this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_organization_application_with_http_info(client_id, orgname, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: The OAuth client ID (required)
        :param str orgname: The name of the organization (required)
        :param UpdateApp body: Request body contents. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'orgname', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_organization_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in params or
                                                       params['client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `update_organization_application`")  # noqa: E501
        # verify the required parameter 'orgname' is set
        if self.api_client.client_side_validation and ('orgname' not in params or
                                                       params['orgname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orgname` when calling `update_organization_application`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_organization_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']  # noqa: E501
        if 'orgname' in params:
            path_params['orgname'] = params['orgname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['oauth2_implicit']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/organization/{orgname}/applications/{client_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
