{"version":3,"file":"AltairPlot-C3CPWT3f.js","sources":["../../../plot/dist/shared/plot_types/altair_utils.js","../../../plot/dist/shared/plot_types/AltairPlot.svelte"],"sourcesContent":["import { colors as color_palette } from \"@gradio/theme\";\nimport { get_next_color } from \"@gradio/utils\";\nexport function set_config(spec, computed_style, chart_type, colors) {\n    let accentColor = computed_style.getPropertyValue(\"--color-accent\");\n    let bodyTextColor = computed_style.getPropertyValue(\"--body-text-color\");\n    let borderColorPrimary = computed_style.getPropertyValue(\"--border-color-primary\");\n    let fontFamily = computed_style.fontFamily;\n    let titleWeight = computed_style.getPropertyValue(\"--block-title-text-weight\");\n    const fontToPxVal = (font) => {\n        return font.endsWith(\"px\") ? parseFloat(font.slice(0, -2)) : 12;\n    };\n    let textSizeMd = fontToPxVal(computed_style.getPropertyValue(\"--text-md\"));\n    let textSizeSm = fontToPxVal(computed_style.getPropertyValue(\"--text-sm\"));\n    let config = {\n        autosize: { type: \"fit\", contains: \"padding\" },\n        axis: {\n            labelFont: fontFamily,\n            labelColor: bodyTextColor,\n            titleFont: fontFamily,\n            titleColor: bodyTextColor,\n            tickColor: borderColorPrimary,\n            labelFontSize: textSizeSm,\n            gridColor: borderColorPrimary,\n            titleFontWeight: \"normal\",\n            titleFontSize: textSizeSm,\n            labelFontWeight: \"normal\",\n            domain: false,\n            labelAngle: 0\n        },\n        legend: {\n            labelColor: bodyTextColor,\n            labelFont: fontFamily,\n            titleColor: bodyTextColor,\n            titleFont: fontFamily,\n            titleFontWeight: \"normal\",\n            titleFontSize: textSizeSm,\n            labelFontWeight: \"normal\",\n            offset: 2\n        },\n        title: {\n            color: bodyTextColor,\n            font: fontFamily,\n            fontSize: textSizeMd,\n            fontWeight: titleWeight,\n            anchor: \"middle\"\n        },\n        view: {\n            stroke: borderColorPrimary\n        }\n    };\n    spec.config = config;\n    // @ts-ignore (unsure why the following are not typed in Spec)\n    let encoding = spec.encoding;\n    // @ts-ignore\n    let layer = spec.layer;\n    switch (chart_type) {\n        case \"scatter\":\n            spec.config.mark = { stroke: accentColor };\n            if (encoding.color && encoding.color.type == \"nominal\") {\n                encoding.color.scale.range = encoding.color.scale.range.map((_, i) => get_color(colors, i));\n            }\n            else if (encoding.color && encoding.color.type == \"quantitative\") {\n                encoding.color.scale.range = [\"#eff6ff\", \"#1e3a8a\"];\n                encoding.color.scale.range.interpolate = \"hsl\";\n            }\n            break;\n        case \"line\":\n            spec.config.mark = { stroke: accentColor, cursor: \"crosshair\" };\n            layer.forEach((d) => {\n                if (d.encoding.color) {\n                    d.encoding.color.scale.range = d.encoding.color.scale.range.map((_, i) => get_color(colors, i));\n                }\n            });\n            break;\n        case \"bar\":\n            spec.config.mark = { opacity: 0.8, fill: accentColor };\n            if (encoding.color) {\n                encoding.color.scale.range = encoding.color.scale.range.map((_, i) => get_color(colors, i));\n            }\n            break;\n    }\n    return spec;\n}\nfunction get_color(colors, index) {\n    let current_color = colors[index % colors.length];\n    if (current_color && current_color in color_palette) {\n        return color_palette[current_color]?.primary;\n    }\n    else if (!current_color) {\n        return color_palette[get_next_color(index)]\n            .primary;\n    }\n    return current_color;\n}\n","<script>import { set_config } from \"./altair_utils\";\nimport { onMount, onDestroy } from \"svelte\";\nimport vegaEmbed from \"vega-embed\";\nexport let value;\nexport let colors = [];\nexport let caption;\nexport let show_actions_button;\nexport let gradio;\nlet element;\nlet parent_element;\nlet view;\nexport let _selectable;\nlet computed_style = window.getComputedStyle(document.body);\nlet old_spec;\nlet spec_width;\n$:\n  plot = value?.plot;\n$:\n  spec = JSON.parse(plot);\n$:\n  if (spec && spec.params && !_selectable) {\n    spec.params = spec.params.filter((param) => param.name !== \"brush\");\n  }\n$:\n  if (old_spec !== spec) {\n    old_spec = spec;\n    spec_width = spec.width;\n  }\n$:\n  if (value.chart) {\n    spec = set_config(spec, computed_style, value.chart, colors);\n  }\n$:\n  fit_width_to_parent = spec.encoding?.column?.field || spec.encoding?.row?.field || value.chart === void 0 ? false : true;\nconst get_width = () => {\n  return Math.min(\n    parent_element.offsetWidth,\n    spec_width || parent_element.offsetWidth\n  );\n};\nlet resize_callback = () => {\n};\nconst renderPlot = () => {\n  if (fit_width_to_parent) {\n    spec.width = get_width();\n  }\n  vegaEmbed(element, spec, { actions: show_actions_button }).then(\n    function(result) {\n      view = result.view;\n      resize_callback = () => {\n        view.signal(\"width\", get_width()).run();\n      };\n      if (!_selectable)\n        return;\n      const callback = (event, item) => {\n        const brushValue = view.signal(\"brush\");\n        if (brushValue) {\n          if (Object.keys(brushValue).length === 0) {\n            gradio.dispatch(\"select\", {\n              value: null,\n              index: null,\n              selected: false\n            });\n          } else {\n            const key = Object.keys(brushValue)[0];\n            let range = brushValue[key].map(\n              (x) => x / 1e3\n            );\n            gradio.dispatch(\"select\", {\n              value: brushValue,\n              index: range,\n              selected: true\n            });\n          }\n        }\n      };\n      view.addEventListener(\"mouseup\", callback);\n      view.addEventListener(\"touchup\", callback);\n    }\n  );\n};\nlet resizeObserver = new ResizeObserver(() => {\n  if (fit_width_to_parent && spec.width !== parent_element.offsetWidth) {\n    resize_callback();\n  }\n});\nonMount(() => {\n  renderPlot();\n  resizeObserver.observe(parent_element);\n});\nonDestroy(() => {\n  resizeObserver.disconnect();\n});\n</script>\n\n<div data-testid={\"altair\"} class=\"altair layout\" bind:this={parent_element}>\n\t<div bind:this={element}></div>\n\t{#if caption}\n\t\t<div class=\"caption layout\">\n\t\t\t{caption}\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.altair :global(canvas) {\n\t\tpadding: 6px;\n\t}\n\t.altair :global(.vega-embed) {\n\t\tpadding: 0px !important;\n\t}\n\t.altair :global(.vega-actions) {\n\t\tright: 0px !important;\n\t}\n\t.layout {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\twidth: var(--size-full);\n\t\theight: var(--size-full);\n\t\tcolor: var(--body-text-color);\n\t}\n\t.altair {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\twidth: var(--size-full);\n\t\theight: var(--size-full);\n\t}\n\t.caption {\n\t\tfont-size: var(--text-sm);\n\t\tmargin-bottom: 6px;\n\t}\n\t:global(#vg-tooltip-element) {\n\t\tfont-family: var(--font) !important;\n\t\tfont-size: var(--text-xs) !important;\n\t\tbox-shadow: none !important;\n\t\tbackground-color: var(--block-background-fill) !important;\n\t\tborder: 1px solid var(--border-color-primary) !important;\n\t\tcolor: var(--body-text-color) !important;\n\t}\n\t:global(#vg-tooltip-element .key) {\n\t\tcolor: var(--body-text-color-subdued) !important;\n\t}\n</style>\n"],"names":["set_config","spec","computed_style","chart_type","colors","accentColor","bodyTextColor","borderColorPrimary","fontFamily","titleWeight","fontToPxVal","font","textSizeMd","textSizeSm","config","encoding","layer","_","i","get_color","d","index","current_color","color_palette","get_next_color","ctx","insert","target","div","anchor","create_if_block","div1","append","div0","value","$$props","caption","show_actions_button","gradio","element","parent_element","view","_selectable","old_spec","spec_width","get_width","resize_callback","renderPlot","fit_width_to_parent","vegaEmbed","result","callback","event","item","brushValue","key","range","x","resizeObserver","onMount","onDestroy","$$value","$$invalidate","plot","param"],"mappings":"mQAEO,SAASA,EAAWC,EAAMC,EAAgBC,EAAYC,EAAQ,CACjE,IAAIC,EAAcH,EAAe,iBAAiB,gBAAgB,EAC9DI,EAAgBJ,EAAe,iBAAiB,mBAAmB,EACnEK,EAAqBL,EAAe,iBAAiB,wBAAwB,EAC7EM,EAAaN,EAAe,WAC5BO,EAAcP,EAAe,iBAAiB,2BAA2B,EAC7E,MAAMQ,EAAeC,GACVA,EAAK,SAAS,IAAI,EAAI,WAAWA,EAAK,MAAM,EAAG,EAAE,CAAC,EAAI,GAEjE,IAAIC,EAAaF,EAAYR,EAAe,iBAAiB,WAAW,CAAC,EACrEW,EAAaH,EAAYR,EAAe,iBAAiB,WAAW,CAAC,EACrEY,EAAS,CACT,SAAU,CAAE,KAAM,MAAO,SAAU,SAAW,EAC9C,KAAM,CACF,UAAWN,EACX,WAAYF,EACZ,UAAWE,EACX,WAAYF,EACZ,UAAWC,EACX,cAAeM,EACf,UAAWN,EACX,gBAAiB,SACjB,cAAeM,EACf,gBAAiB,SACjB,OAAQ,GACR,WAAY,CACf,EACD,OAAQ,CACJ,WAAYP,EACZ,UAAWE,EACX,WAAYF,EACZ,UAAWE,EACX,gBAAiB,SACjB,cAAeK,EACf,gBAAiB,SACjB,OAAQ,CACX,EACD,MAAO,CACH,MAAOP,EACP,KAAME,EACN,SAAUI,EACV,WAAYH,EACZ,OAAQ,QACX,EACD,KAAM,CACF,OAAQF,CACX,CACT,EACIN,EAAK,OAASa,EAEd,IAAIC,EAAWd,EAAK,SAEhBe,EAAQf,EAAK,MACjB,OAAQE,EAAU,CACd,IAAK,UACDF,EAAK,OAAO,KAAO,CAAE,OAAQI,CAAW,EACpCU,EAAS,OAASA,EAAS,MAAM,MAAQ,UACzCA,EAAS,MAAM,MAAM,MAAQA,EAAS,MAAM,MAAM,MAAM,IAAI,CAACE,EAAGC,IAAMC,EAAUf,EAAQc,CAAC,CAAC,EAErFH,EAAS,OAASA,EAAS,MAAM,MAAQ,iBAC9CA,EAAS,MAAM,MAAM,MAAQ,CAAC,UAAW,SAAS,EAClDA,EAAS,MAAM,MAAM,MAAM,YAAc,OAE7C,MACJ,IAAK,OACDd,EAAK,OAAO,KAAO,CAAE,OAAQI,EAAa,OAAQ,aAClDW,EAAM,QAASI,GAAM,CACbA,EAAE,SAAS,QACXA,EAAE,SAAS,MAAM,MAAM,MAAQA,EAAE,SAAS,MAAM,MAAM,MAAM,IAAI,CAACH,EAAGC,IAAMC,EAAUf,EAAQc,CAAC,CAAC,EAElH,CAAa,EACD,MACJ,IAAK,MACDjB,EAAK,OAAO,KAAO,CAAE,QAAS,GAAK,KAAMI,GACrCU,EAAS,QACTA,EAAS,MAAM,MAAM,MAAQA,EAAS,MAAM,MAAM,MAAM,IAAI,CAACE,EAAGC,IAAMC,EAAUf,EAAQc,CAAC,CAAC,GAE9F,KACP,CACD,OAAOjB,CACX,CACA,SAASkB,EAAUf,EAAQiB,EAAO,CAC9B,IAAIC,EAAgBlB,EAAOiB,EAAQjB,EAAO,MAAM,EAChD,OAAIkB,GAAiBA,KAAiBC,EAC3BA,EAAcD,CAAa,GAAG,QAE/BA,GACCC,EAAcC,EAAeH,CAAK,CAAC,EACrC,OAGb,iDCMII,EAAO,CAAA,CAAA,uDADTC,EAEKC,EAAAC,EAAAC,CAAA,0BADHJ,EAAO,CAAA,CAAA,4CAFLA,EAAO,CAAA,GAAAK,EAAAL,CAAA,oEAFK,QAAQ,sDAA1BC,EAOKC,EAAAI,EAAAF,CAAA,EANJG,EAA8BD,EAAAE,CAAA,oDACzBR,EAAO,CAAA,iJA9FF,MAAAS,CAAK,EAAAC,GACL,OAAA/B,EAAM,EAAA,EAAA+B,GACN,QAAAC,CAAO,EAAAD,GACP,oBAAAE,CAAmB,EAAAF,GACnB,OAAAG,CAAM,EAAAH,EACbI,EACAC,EACAC,GACO,YAAAC,CAAW,EAAAP,EAClBjC,EAAiB,OAAO,iBAAiB,SAAS,IAAI,EACtDyC,EACAC,QAoBEC,EAAS,IACN,KAAK,IACVL,EAAe,YACfI,GAAcJ,EAAe,WAAA,MAG7BM,EAAe,IAAA,SAEbC,EAAU,IAAA,CACVC,OACF/C,EAAK,MAAQ4C,EAAS,EAAA5C,CAAA,EAExBgD,EAAUV,EAAStC,EAAI,CAAI,QAASoC,EAAmB,EAAI,KAAI,SACpDa,EAAM,IACbT,EAAOS,EAAO,KACdJ,EAAe,IAAA,CACbL,EAAK,OAAO,QAASI,EAAS,GAAI,IAAG,IAElCH,EAAW,aAEVS,EAAQ,CAAIC,GAAOC,KAAI,CACrB,MAAAC,EAAab,EAAK,OAAO,OAAO,KAClCa,EACE,GAAA,OAAO,KAAKA,CAAU,EAAE,SAAW,EACrChB,EAAO,SAAS,SAAQ,CACtB,MAAO,KACP,MAAO,KACP,SAAU,UAGN,MAAAiB,EAAM,OAAO,KAAKD,CAAU,EAAE,CAAC,MACjCE,EAAQF,EAAWC,CAAG,EAAE,IACzBE,GAAMA,EAAI,GAAA,EAEbnB,EAAO,SAAS,SAAQ,CACtB,MAAOgB,EACP,MAAOE,EACP,SAAU,OAKlBf,EAAK,iBAAiB,UAAWU,CAAQ,EACzCV,EAAK,iBAAiB,UAAWU,CAAQ,KAI3C,IAAAO,MAAqB,eAAc,IAAA,CACjCV,GAAuB/C,EAAK,QAAUuC,EAAe,aACvDM,MAGJa,EAAO,IAAA,CACLZ,IACAW,EAAe,QAAQlB,CAAc,IAEvCoB,EAAS,IAAA,CACPF,EAAe,WAAU,6CAKVnB,EAAOsB,oDADqCrB,EAAcqB,sRA/EzEC,EAAA,GAAAC,EAAO7B,GAAO,IAAI,uBAElBjC,EAAO,KAAK,MAAM8D,CAAI,CAAA,kBAElB9D,GAAQA,EAAK,SAAWyC,GAC1BoB,EAAA,EAAA7D,EAAK,OAASA,EAAK,OAAO,OAAQ+D,GAAUA,EAAM,OAAS,OAAO,EAAA/D,CAAA,kBAQhEiC,EAAM,WACRjC,EAAOD,EAAWC,EAAMC,EAAgBgC,EAAM,MAAO9B,CAAM,CAAA,kBANzDuC,IAAa1C,IACf6D,EAAA,EAAAnB,EAAW1C,CAAI,EACf2C,EAAa3C,EAAK,wBAOpB+C,EAAsB,EAAA/C,EAAK,UAAU,QAAQ,OAASA,EAAK,UAAU,KAAK,OAASiC,EAAM,QAAK"}