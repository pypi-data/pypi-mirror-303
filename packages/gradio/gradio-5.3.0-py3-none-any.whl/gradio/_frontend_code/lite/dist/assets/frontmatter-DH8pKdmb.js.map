{"version":3,"file":"frontmatter-DH8pKdmb.js","sources":["../../../code/dist/shared/frontmatter.js"],"sourcesContent":["import { parseMixed } from \"@lezer/common\";\nimport { yaml } from \"@codemirror/legacy-modes/mode/yaml\";\nimport { foldInside, foldNodeProp, StreamLanguage } from \"@codemirror/language\";\nimport { styleTags, tags } from \"@lezer/highlight\";\nconst frontMatterFence = /^---\\s*$/m;\nexport const frontmatter = {\n    defineNodes: [{ name: \"Frontmatter\", block: true }, \"FrontmatterMark\"],\n    props: [\n        styleTags({\n            Frontmatter: [tags.documentMeta, tags.monospace],\n            FrontmatterMark: tags.processingInstruction\n        }),\n        foldNodeProp.add({\n            Frontmatter: foldInside,\n            FrontmatterMark: () => null\n        })\n    ],\n    wrap: parseMixed((node) => {\n        const { parser } = StreamLanguage.define(yaml);\n        if (node.type.name === \"Frontmatter\") {\n            return {\n                parser,\n                overlay: [{ from: node.from + 4, to: node.to - 4 }]\n            };\n        }\n        return null;\n    }),\n    parseBlock: [\n        {\n            name: \"Frontmatter\",\n            before: \"HorizontalRule\",\n            parse: (cx, line) => {\n                let end = undefined;\n                const children = new Array();\n                if (cx.lineStart === 0 && frontMatterFence.test(line.text)) {\n                    children.push(cx.elt(\"FrontmatterMark\", 0, 4));\n                    while (cx.nextLine()) {\n                        if (frontMatterFence.test(line.text)) {\n                            end = cx.lineStart + 4;\n                            break;\n                        }\n                    }\n                    if (end !== undefined) {\n                        children.push(cx.elt(\"FrontmatterMark\", end - 4, end));\n                        cx.addElement(cx.elt(\"Frontmatter\", 0, end, children));\n                    }\n                    return true;\n                }\n                return false;\n            }\n        }\n    ]\n};\n"],"names":["frontMatterFence","frontmatter","styleTags","tags","foldNodeProp","foldInside","parseMixed","node","parser","StreamLanguage","yaml","cx","line","end","children"],"mappings":"kHAIA,MAAMA,EAAmB,YACZC,EAAc,CACvB,YAAa,CAAC,CAAE,KAAM,cAAe,MAAO,EAAM,EAAE,iBAAiB,EACrE,MAAO,CACHC,EAAU,CACN,YAAa,CAACC,EAAK,aAAcA,EAAK,SAAS,EAC/C,gBAAiBA,EAAK,qBAClC,CAAS,EACDC,EAAa,IAAI,CACb,YAAaC,EACb,gBAAiB,IAAM,IACnC,CAAS,CACJ,EACD,KAAMC,EAAYC,GAAS,CACvB,KAAM,CAAE,OAAAC,CAAQ,EAAGC,EAAe,OAAOC,CAAI,EAC7C,OAAIH,EAAK,KAAK,OAAS,cACZ,CACH,OAAAC,EACA,QAAS,CAAC,CAAE,KAAMD,EAAK,KAAO,EAAG,GAAIA,EAAK,GAAK,EAAG,CAClE,EAEe,IACf,CAAK,EACD,WAAY,CACR,CACI,KAAM,cACN,OAAQ,iBACR,MAAO,CAACI,EAAIC,IAAS,CACjB,IAAIC,EACJ,MAAMC,EAAW,IAAI,MACrB,GAAIH,EAAG,YAAc,GAAKX,EAAiB,KAAKY,EAAK,IAAI,EAAG,CAExD,IADAE,EAAS,KAAKH,EAAG,IAAI,kBAAmB,EAAG,CAAC,CAAC,EACtCA,EAAG,YACN,GAAIX,EAAiB,KAAKY,EAAK,IAAI,EAAG,CAClCC,EAAMF,EAAG,UAAY,EACrB,KACH,CAEL,OAAIE,IAAQ,SACRC,EAAS,KAAKH,EAAG,IAAI,kBAAmBE,EAAM,EAAGA,CAAG,CAAC,EACrDF,EAAG,WAAWA,EAAG,IAAI,cAAe,EAAGE,EAAKC,CAAQ,CAAC,GAElD,EACV,CACD,MAAO,EACV,CACJ,CACJ,CACL"}