{"version":3,"file":"DownloadLink-E9rgDYEZ.js","sources":["../../../wasm/dist/svelte/DownloadLink.svelte"],"sourcesContent":["<script>import { createEventDispatcher, onMount } from \"svelte\";\nimport { getWorkerProxyContext } from \"./context\";\nimport { should_proxy_wasm_src } from \"./file-url\";\nimport { getHeaderValue } from \"../src/http\";\nexport let href = void 0;\nexport let download;\nconst dispatch = createEventDispatcher();\nlet is_downloading = false;\nconst worker_proxy = getWorkerProxyContext();\nasync function wasm_click_handler() {\n  if (is_downloading) {\n    return;\n  }\n  dispatch(\"click\");\n  if (href == null) {\n    throw new Error(\"href is not defined.\");\n  }\n  if (worker_proxy == null) {\n    throw new Error(\"Wasm worker proxy is not available.\");\n  }\n  const url = new URL(href, window.location.href);\n  const path = url.pathname;\n  is_downloading = true;\n  worker_proxy.httpRequest({\n    method: \"GET\",\n    path,\n    headers: {},\n    query_string: \"\"\n  }).then((response) => {\n    if (response.status !== 200) {\n      throw new Error(`Failed to get file ${path} from the Wasm worker.`);\n    }\n    const blob = new Blob([response.body], {\n      type: getHeaderValue(response.headers, \"content-type\")\n    });\n    const blobUrl = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = blobUrl;\n    link.download = download;\n    link.click();\n    URL.revokeObjectURL(blobUrl);\n  }).finally(() => {\n    is_downloading = false;\n  });\n}\n</script>\n\n{#if worker_proxy && should_proxy_wasm_src(href)}\n\t{#if is_downloading}\n\t\t<slot />\n\t{:else}\n\t\t<a {...$$restProps} {href} on:click|preventDefault={wasm_click_handler}>\n\t\t\t<slot />\n\t\t</a>\n\t{/if}\n{:else}\n\t<a\n\t\tstyle:position=\"relative\"\n\t\tclass=\"download-link\"\n\t\t{href}\n\t\ttarget={typeof window !== \"undefined\" && window.__is_colab__\n\t\t\t? \"_blank\"\n\t\t\t: null}\n\t\trel=\"noopener noreferrer\"\n\t\t{download}\n\t\t{...$$restProps}\n\t\ton:click={dispatch.bind(null, \"click\")}\n\t>\n\t\t<slot />\n\t</a>\n{/if}\n\n<style>\n\t.unstyled-link {\n\t\tall: unset;\n\t\tcursor: pointer;\n\t}\n</style>\n"],"names":["a_target_value","ctx","insert","target","a","anchor","dispose","listen","should_proxy_wasm_src","href","$$props","download","dispatch","createEventDispatcher","is_downloading","worker_proxy","getWorkerProxyContext","wasm_click_handler","path","$$invalidate","response","blob","getHeaderValue","blobUrl","link"],"mappings":"yWA4DiB,OAAAA,EAAA,OAAA,OAAW,KAAe,OAAO,aAC7C,SACA,kDAGCC,EAAW,CAAA,gJAThBC,EAaGC,EAAAC,EAAAC,CAAA,0BAHQC,EAAAC,EAAAH,EAAA,QAAAH,EAAS,CAAA,EAAA,KAAK,KAAM,OAAO,CAAA,qNADjCA,EAAW,CAAA,yMAjBXA,EAAc,CAAA,EAAA,+WAGXA,EAAW,CAAA,EAAA,CAAA,KAAAA,EAAA,CAAA,CAAA,CAAA,oHAAlBC,EAEGC,EAAAC,EAAAC,CAAA,0CAFiDJ,EAAkB,CAAA,CAAA,CAAA,oGAA/DA,EAAW,CAAA,mdAJfA,EAAY,CAAA,GAAIO,EAAsBP,EAAI,CAAA,CAAA,yYA3CpC,CAAA,KAAAQ,QAAa,EAAAC,GACb,SAAAC,CAAQ,EAAAD,EACb,MAAAE,EAAWC,IACb,IAAAC,EAAiB,GACf,MAAAC,EAAeC,mBACNC,GAAkB,IAC3BH,SAIA,GADJF,EAAS,OAAO,EACZH,GAAQ,KACA,MAAA,IAAA,MAAM,sBAAsB,EAEpC,GAAAM,GAAgB,KACR,MAAA,IAAA,MAAM,qCAAqC,QAGjDG,EADG,IAAO,IAAIT,EAAM,OAAO,SAAS,IAAI,EAC7B,SACjBU,EAAA,EAAAL,EAAiB,EAAI,EACrBC,EAAa,YAAW,CACtB,OAAQ,MACR,KAAAG,EACA,QAAO,CAAA,EACP,aAAc,EACb,CAAA,EAAA,KAAME,GAAQ,IACXA,EAAS,SAAW,IACZ,MAAA,IAAA,4BAA4BF,CAAI,wBAAA,EAEtC,MAAAG,EAAW,IAAA,KAAM,CAAAD,EAAS,IAAI,GAClC,KAAME,EAAeF,EAAS,QAAS,cAAc,IAEjDG,EAAU,IAAI,gBAAgBF,CAAI,EAClCG,EAAO,SAAS,cAAc,GAAG,EACvCA,EAAK,KAAOD,EACZC,EAAK,SAAWb,EAChBa,EAAK,MAAK,EACV,IAAI,gBAAgBD,CAAO,IAC1B,QAAO,IAAA,CACRJ,EAAA,EAAAL,EAAiB,EAAK"}