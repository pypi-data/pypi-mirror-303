# coding: utf-8           使用学习生长法进行思考，  认真开始分析，  题不在多，在于精

'''
      题目：给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？

        输入: 3
        输出: 5
        解释:
        给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

           1         3     3      2      1
            \       /     /      / \      \
             3     2     1      1   3      2
            /     /       \                 \
           2     1         2                 3


      分析：

        假设n个节点存在二叉排序树的个数是res(n)     【注意起点要求是  二叉排序树】

        当n = 0时，结果为1，
        当n = 1时， 结果为1，
        当n = 2时， 结果为2，
        当n = 3时， 结果为5，从上面题目的解释里可以看到：
            *当1是根节点的时候，左子树节点个数（比1小的数的个数）为0，右子树节点个数为 3-1-0 = 2， 所以这种情况的答案总共有res(0) * res(2)，
            *当2是根节点的时候，左子树节点个数为1， 右子树节点个数为3-1-1 = 1，答案共有res（1） * res(1)
            *当3是根节点的时候，左子树节点个数为2，右子树节点个数为0，答案共有res(2) * res(0)
            所以实际上res(3) = 5 = res(0) * res(2) + res(1) * res(1) + res(2) * res(0)

        可得出通项公式res(n) = res(0)*res(n-1) + res(1) * res(n-2) +......+ res(n-2) * res(2) + res(n-1) * res(0)，
        即卡特兰数，h(n)=C(2n,n)/(n+1) (n=0,1,2,...)


      但是找规律的方法 算不算旁门左道

      思路：

'''

class Solution(object):
    def numTrees(self, n):
        """
        :type n: int
        :rtype: int
        """
        res = [0] * (n + 1)
        res[0] = 1
        res[1] = 1
        for i in range(2, n + 1):
            for j in range(i):
                res[i] += res[j] * res[i - j - 1]

        return res[n]


#___________________________________    练习1   ______________________________#

#  这里就从  之前解析处的 推断来 设定方程吧，   可以获知 通项式子，满足卡特兰数的公式情况：h(n)=C(2n,n)/(n+1)
def fun1(n):
    # 设定初始 推断项。   res是指i+1树的目标搜索树数量
    res=[0] * (n+1)
    res[0]=1
    res[1]=1

    #  进行自下往上的  式子推进，借用 卡特兰数
    for i in range(2,n+1):
        #通式中的C部分， 会逐减做累乘
        for j in range(i):
            #公式代入
            res[i]+=res[j]*res[i-j-1]

    # 最终的结果。最后一个位置
    return res[n]


#___________________________________    练习2（非找规律方法）   ______________________________#