
'''
    题目：

        给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
        说明：
        你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
          例子：
             输入: [2,2,1]
             输出: 1

    思路：
        非常简单和经典的一道题，我觉得直接  异或，利用位运算就解出来了，感觉是剑指的原题。           要求不用空间，时间复杂度为O(N)

'''

#___________________________________    练习1   ______________________________#
def singleNumber(self, nums):
    """
    :type nums: List[int]
    :rtype: int
    """
    # 直接的位运算，就可以最后剩下来唯一一个  出现一次的数，其他的都被异或为0没了。   0和任何异或都是任何本身
    a = 0
    for num in nums:
        a = a ^ num

    return a