# coding: utf-8           使用学习生长法进行思考，  认真开始分析，  题不在多，在于精

'''
      题目：给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。
      找到所有在 [1, n] 范围之间没有出现在数组中的数字。
      您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。

              示例:
                输入:
                [4,3,2,7,8,2,3,1]
                输出:
                [5,6]


      分析：


      思路：线性扫描整个数组，用数组元素的值作为下标访问对应的元素，如果是第一次访问，就把对应元素转相反数。
            最后再扫描一次整个数组，如果还有数组元素的值为正，就代表其下标对应的值没有在数组里出现过。
            用abs（x）是为了保证下标一定为正，用p - 1是为了把 1- n 映射到0 - n-1, 避免数组溢出。

            好精简的解法...

'''
class Solution(object):
    def findDisappearedNumbers(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        res = list()

        for i, x in enumerate(nums):
            p = abs(x)
            if nums[p - 1] > 0:
                nums[p - 1] *= -1
        # print nums
        return [i + 1 for i, x in enumerate(nums) if x > 0]

#___________________________________    练习1   ______________________________#
#  这题的 题目非常简单，主要是  有限制在不使用额外空间且时间复杂度为O(n)  ，所以就不能使用哈希表.
#  而且这里1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。这是个重要的点，一个是长度，另一个是两次
#  很简单，就是线性扫描整个数组，置负数，并在后面进行判别中，为正的就是没出现过的。  按照索引找到没看到的索引数字即可
#有点绕脑，绕明白就好，一个是索引标号-1  +1，第二个就是索引值和实际值的意义

def fun1(nums):

    # 对于数组中出现的数字，进行附加-1 置负
    for i,x in enumerate(nums):
        print('nums:',x)
        #  必须用abs，因为后面num需要按照其去索引
        p=abs(x)

        # 注意这里 有>0 判断，所以重复出现的数字  不会乘两次，放心    p-1表示第p个值所对应的索引
        if nums[p-1]>0:
            nums[p-1]*=-1

    print('nums:', nums)
    # print nums   因为之前是使用的索引，所以这里就按照i+1对应的索引 找到位置即可，很简单，i表示的所有数字上的遍历。
    return [i + 1 for i, x in enumerate(nums) if x > 0]

print(fun1([4,3,2,7,8,2,3,1]))