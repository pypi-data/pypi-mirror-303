"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .tweet import Tweet, TweetTypedDict
from .twitteruser import TwitterUser, TwitterUserTypedDict
from enum import Enum
from exfunc_sdk import utils
from exfunc_sdk.types import BaseModel
from typing import List, Optional, Union
from typing_extensions import NotRequired, TypedDict


class Type(str, Enum):
    r"""The type of search"""

    TOP = "top"
    PHOTOS = "photos"
    VIDEOS = "videos"
    PEOPLE = "people"
    LATEST = "latest"


class SearchTwitterRequestBodyTypedDict(TypedDict):
    query: str
    r"""The search query string"""
    type: NotRequired[Type]
    r"""The type of search"""
    count: NotRequired[int]
    r"""The number of results to retrieve"""


class SearchTwitterRequestBody(BaseModel):
    query: str
    r"""The search query string"""

    type: Optional[Type] = None
    r"""The type of search"""

    count: Optional[int] = None
    r"""The number of results to retrieve"""


class SearchTwitterTwitterResponseResponseBodyData(BaseModel):
    message: Optional[str] = None
    r"""Error message string"""


class SearchTwitterTwitterResponseResponseBody(Exception):
    r"""Search API server error response"""

    data: SearchTwitterTwitterResponseResponseBodyData

    def __init__(self, data: SearchTwitterTwitterResponseResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, SearchTwitterTwitterResponseResponseBodyData
        )


class SearchTwitterTwitterResponseBodyData(BaseModel):
    message: Optional[str] = None
    r"""Error message string"""


class SearchTwitterTwitterResponseBody(Exception):
    r"""Search API user error response"""

    data: SearchTwitterTwitterResponseBodyData

    def __init__(self, data: SearchTwitterTwitterResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, SearchTwitterTwitterResponseBodyData)


ResultsTypedDict = Union[TwitterUserTypedDict, TweetTypedDict]


Results = Union[TwitterUser, Tweet]


class SearchTwitterResponseBodyTypedDict(TypedDict):
    r"""Search API successful response"""

    results: NotRequired[List[ResultsTypedDict]]


class SearchTwitterResponseBody(BaseModel):
    r"""Search API successful response"""

    results: Optional[List[Results]] = None
