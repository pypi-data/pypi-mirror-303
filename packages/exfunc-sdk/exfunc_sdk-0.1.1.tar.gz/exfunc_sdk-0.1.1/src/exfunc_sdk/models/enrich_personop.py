"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .linkedinperson import LinkedInPerson, LinkedInPersonTypedDict
from exfunc_sdk import utils
from exfunc_sdk.types import BaseModel
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class EnrichPersonRequestBodyTypedDict(TypedDict):
    person_url: str
    r"""The URL of the person to enrich"""


class EnrichPersonRequestBody(BaseModel):
    person_url: str
    r"""The URL of the person to enrich"""


class EnrichPersonLinkedinResponseResponseBodyData(BaseModel):
    message: Optional[str] = None
    r"""Error message string"""


class EnrichPersonLinkedinResponseResponseBody(Exception):
    r"""EnrichPerson API server error response"""

    data: EnrichPersonLinkedinResponseResponseBodyData

    def __init__(self, data: EnrichPersonLinkedinResponseResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(
            self.data, EnrichPersonLinkedinResponseResponseBodyData
        )


class EnrichPersonLinkedinResponseBodyData(BaseModel):
    message: Optional[str] = None
    r"""Error message string"""


class EnrichPersonLinkedinResponseBody(Exception):
    r"""EnrichPerson API user error response"""

    data: EnrichPersonLinkedinResponseBodyData

    def __init__(self, data: EnrichPersonLinkedinResponseBodyData):
        self.data = data

    def __str__(self) -> str:
        return utils.marshal_json(self.data, EnrichPersonLinkedinResponseBodyData)


class EnrichPersonResponseBodyTypedDict(TypedDict):
    r"""EnrichPerson API successful response"""

    person: NotRequired[LinkedInPersonTypedDict]


class EnrichPersonResponseBody(BaseModel):
    r"""EnrichPerson API successful response"""

    person: Optional[LinkedInPerson] = None
