(function(v,f){typeof exports=="object"&&typeof module<"u"?f(exports):typeof define=="function"&&define.amd?define(["exports"],f):(v=typeof globalThis<"u"?globalThis:v||self,f(v.pan3d_components={}))})(this,function(v){"use strict";const{ref:f,toRefs:_,watch:b,onMounted:p}=window.Vue,w={PreviewBounds:{props:{preview:{default:null},axes:{default:null},coordinates:{default:null}},emits:["update-bounds"],setup(x,{emit:r}){const c=f(),{preview:B,coordinates:R}=_(x),T=f(),o=f(),h=f(),u=f([0,0,0,0]);let e=null;function m(){const s=new Image;s.onload=()=>{const i=300/s.width;o.value=[300,Math.round(s.height*i)],h.value=`0 0 ${o.value.join(" ")}`},s.src=B.value}function g(){if(!o.value)return;let s,i,n,a;x.coordinates.forEach(l=>{if(l.name===x.axes.x){let t=(l.bounds[0]-l.full_bounds[0])/(l.full_bounds[1]-l.full_bounds[0])*o.value[0],d=(l.bounds[1]-l.full_bounds[0])/(l.full_bounds[1]-l.full_bounds[0])*o.value[0];l.reverse_order==="True"?(s=o.value[0]-d,i=o.value[0]-t):(s=t,i=d)}else if(l.name===x.axes.y){let t=(l.bounds[0]-l.full_bounds[0])/(l.full_bounds[1]-l.full_bounds[0])*o.value[1],d=(l.bounds[1]-l.full_bounds[0])/(l.full_bounds[1]-l.full_bounds[0])*o.value[1];l.reverse_order!=="True"?(n=o.value[1]-d,a=o.value[1]-t):(n=t,a=d)}}),u.value=[s,n,i,a]}function P(s){const n=c.value.getBoundingClientRect(),a=[s.clientX-n.x,s.clientY-n.y];a[0]>=u.value[0]-5&&a[0]<=u.value[2]+5&&a[1]>=u.value[1]-5&&a[1]<=u.value[3]+5&&(e={from:a,xMin:!1,xMax:!1,yMin:!1,yMax:!1,wholeBox:!0},Math.abs(a[0]-u.value[0])<=5*2&&(e.xMin=!0,e.wholeBox=!1),Math.abs(a[0]-u.value[2])<=5*2&&(e.xMax=!0,e.wholeBox=!1),Math.abs(a[1]-u.value[1])<=5*2&&(e.yMin=!0,e.wholeBox=!1),Math.abs(a[1]-u.value[3])<=5*2&&(e.yMax=!0,e.wholeBox=!1))}function j(s){if(e){const i=c.value.getBoundingClientRect(),n=[s.clientX-i.x,s.clientY-i.y],[a,l]=[n[0]-e.from[0],n[1]-e.from[1]];e.from=n;let t=u.value[0],d=u.value[1],M=u.value[2],y=u.value[3];(e.xMin||e.xMax||e.wholeBox)&&((e.xMin||e.wholeBox)&&(t+=a),(e.xMax||e.wholeBox)&&(M+=a),t>=0&&M<=o.value[0]&&(u.value[0]=t,u.value[2]=M)),(e.yMin||e.yMax||e.wholeBox)&&((e.yMin||e.wholeBox)&&(d+=l),(e.yMax||e.wholeBox)&&(y+=l),d>=0&&y<=o.value[1]&&(u.value[1]=d,u.value[3]=y))}}function E(){if(e){e=null;let s,i;x.coordinates.forEach(n=>{var a=n.full_bounds[1]-n.full_bounds[0];if(n.name===x.axes.x){let l=u.value[0],t=u.value[2];n.reverse_order==="True"&&(l=o.value[0]-u.value[2],t=o.value[0]-u.value[0]),s=[l/o.value[0]*a+n.full_bounds[0],t/o.value[0]*a+n.full_bounds[0]]}else if(n.name===x.axes.y){let l=u.value[1],t=u.value[3];n.reverse_order!=="True"&&(l=o.value[1]-u.value[3],t=o.value[1]-u.value[1]),i=[l/o.value[1]*a+n.full_bounds[0],t/o.value[1]*a+n.full_bounds[0]]}}),r("update-bounds",{name:x.axes.x,bounds:s.map(n=>Math.round(n))}),r("update-bounds",{name:x.axes.y,bounds:i.map(n=>Math.round(n))})}}return p(m),b(B,m),b(o,g,{deep:!0}),b(R,g,{deep:!0}),{svg:c,preview:B,previewImage:T,viewBox:h,boundsBox:u,onMouseMove:j,onMousePress:P,onMouseRelease:E,color:"rgb(255, 0, 0)",outline:"4px solid rgb(0, 100, 255)",radius:7}},template:`
  <svg
    ref="svg"
    :viewBox="viewBox"
    @mousedown.prevent="onMousePress"
    @mousemove="onMouseMove"
    @mouseup="onMouseRelease"
    @mouseleave="onMouseRelease"
    :style="'cursor: pointer; outline:'+outline"
  >
    <image
      ref="previewImage"
      :href="preview"
      style="width: 300px"
    />
    <circle
      :cx="boundsBox[0]"
      :cy="boundsBox[1]"
      :r="radius"
      :fill="color"
    />
    <circle
      :cx="boundsBox[2]"
      :cy="boundsBox[1]"
      :r="radius"
      :fill="color"
    />
    <circle
      :cx="boundsBox[0]"
      :cy="boundsBox[3]"
      :r="radius"
      :fill="color"
    />
    <circle
      :cx="boundsBox[2]"
      :cy="boundsBox[3]"
      :r="radius"
      :fill="color"
    />
    <line
      :x1="boundsBox[0]"
      :y1="boundsBox[1]"
      :x2="boundsBox[2]"
      :y2="boundsBox[1]"
      :style="'stroke-width:5;stroke:'+color"
    />
    <line
      :x1="boundsBox[0]"
      :y1="boundsBox[1]"
      :x2="boundsBox[0]"
      :y2="boundsBox[3]"
      :style="'stroke-width:5;stroke:'+color"
    />
    <line
      :x1="boundsBox[2]"
      :y1="boundsBox[1]"
      :x2="boundsBox[2]"
      :y2="boundsBox[3]"
      :style="'stroke-width:5;stroke:'+color"
    />
    <line
      :x1="boundsBox[0]"
      :y1="boundsBox[3]"
      :x2="boundsBox[2]"
      :y2="boundsBox[3]"
      :style="'stroke-width:5;stroke:'+color"
    />
  </svg>
`}};function k(x){Object.keys(w).forEach(r=>{x.component(r,w[r])})}v.install=k,Object.defineProperty(v,Symbol.toStringTag,{value:"Module"})});
