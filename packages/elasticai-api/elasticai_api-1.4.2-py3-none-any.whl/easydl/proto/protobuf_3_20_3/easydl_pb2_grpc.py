# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import easydl_pb2 as easydl__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class EasyDLStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.persist_metrics = channel.unary_unary(
                '/proto.EasyDL/persist_metrics',
                request_serializer=easydl__pb2.JobMetrics.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.optimize = channel.unary_unary(
                '/proto.EasyDL/optimize',
                request_serializer=easydl__pb2.OptimizeRequest.SerializeToString,
                response_deserializer=easydl__pb2.OptimizeResponse.FromString,
                )
        self.get_config = channel.unary_unary(
                '/proto.EasyDL/get_config',
                request_serializer=easydl__pb2.ConfigRequest.SerializeToString,
                response_deserializer=easydl__pb2.ConfigResponse.FromString,
                )
        self.get_job_metrics = channel.unary_unary(
                '/proto.EasyDL/get_job_metrics',
                request_serializer=easydl__pb2.JobMetricsRequest.SerializeToString,
                response_deserializer=easydl__pb2.JobMetricsResponse.FromString,
                )
        self.process_kube_watch_event = channel.unary_unary(
                '/proto.EasyDL/process_kube_watch_event',
                request_serializer=easydl__pb2.KubeWatchEvent.SerializeToString,
                response_deserializer=easydl__pb2.Response.FromString,
                )
        self.monitor_job_optimization = channel.unary_unary(
                '/proto.EasyDL/monitor_job_optimization',
                request_serializer=easydl__pb2.OptimizeMonitorRequest.SerializeToString,
                response_deserializer=easydl__pb2.Response.FromString,
                )


class EasyDLServicer(object):
    """Missing associated documentation comment in .proto file."""

    def persist_metrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def optimize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_config(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_job_metrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def process_kube_watch_event(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def monitor_job_optimization(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EasyDLServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'persist_metrics': grpc.unary_unary_rpc_method_handler(
                    servicer.persist_metrics,
                    request_deserializer=easydl__pb2.JobMetrics.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'optimize': grpc.unary_unary_rpc_method_handler(
                    servicer.optimize,
                    request_deserializer=easydl__pb2.OptimizeRequest.FromString,
                    response_serializer=easydl__pb2.OptimizeResponse.SerializeToString,
            ),
            'get_config': grpc.unary_unary_rpc_method_handler(
                    servicer.get_config,
                    request_deserializer=easydl__pb2.ConfigRequest.FromString,
                    response_serializer=easydl__pb2.ConfigResponse.SerializeToString,
            ),
            'get_job_metrics': grpc.unary_unary_rpc_method_handler(
                    servicer.get_job_metrics,
                    request_deserializer=easydl__pb2.JobMetricsRequest.FromString,
                    response_serializer=easydl__pb2.JobMetricsResponse.SerializeToString,
            ),
            'process_kube_watch_event': grpc.unary_unary_rpc_method_handler(
                    servicer.process_kube_watch_event,
                    request_deserializer=easydl__pb2.KubeWatchEvent.FromString,
                    response_serializer=easydl__pb2.Response.SerializeToString,
            ),
            'monitor_job_optimization': grpc.unary_unary_rpc_method_handler(
                    servicer.monitor_job_optimization,
                    request_deserializer=easydl__pb2.OptimizeMonitorRequest.FromString,
                    response_serializer=easydl__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.EasyDL', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EasyDL(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def persist_metrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EasyDL/persist_metrics',
            easydl__pb2.JobMetrics.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def optimize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EasyDL/optimize',
            easydl__pb2.OptimizeRequest.SerializeToString,
            easydl__pb2.OptimizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_config(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EasyDL/get_config',
            easydl__pb2.ConfigRequest.SerializeToString,
            easydl__pb2.ConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_job_metrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EasyDL/get_job_metrics',
            easydl__pb2.JobMetricsRequest.SerializeToString,
            easydl__pb2.JobMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def process_kube_watch_event(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EasyDL/process_kube_watch_event',
            easydl__pb2.KubeWatchEvent.SerializeToString,
            easydl__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def monitor_job_optimization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.EasyDL/monitor_job_optimization',
            easydl__pb2.OptimizeMonitorRequest.SerializeToString,
            easydl__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OptimizeProcessorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.process = channel.unary_unary(
                '/proto.OptimizeProcessor/process',
                request_serializer=easydl__pb2.OptimizeEvent.SerializeToString,
                response_deserializer=easydl__pb2.OptimizeProcessResponse.FromString,
                )
        self.optimize = channel.unary_unary(
                '/proto.OptimizeProcessor/optimize',
                request_serializer=easydl__pb2.OptimizeRequest.SerializeToString,
                response_deserializer=easydl__pb2.OptimizeResponse.FromString,
                )
        self.customized = channel.unary_unary(
                '/proto.OptimizeProcessor/customized',
                request_serializer=easydl__pb2.CustomizedRequest.SerializeToString,
                response_deserializer=easydl__pb2.Response.FromString,
                )


class OptimizeProcessorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def process(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def optimize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def customized(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OptimizeProcessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'process': grpc.unary_unary_rpc_method_handler(
                    servicer.process,
                    request_deserializer=easydl__pb2.OptimizeEvent.FromString,
                    response_serializer=easydl__pb2.OptimizeProcessResponse.SerializeToString,
            ),
            'optimize': grpc.unary_unary_rpc_method_handler(
                    servicer.optimize,
                    request_deserializer=easydl__pb2.OptimizeRequest.FromString,
                    response_serializer=easydl__pb2.OptimizeResponse.SerializeToString,
            ),
            'customized': grpc.unary_unary_rpc_method_handler(
                    servicer.customized,
                    request_deserializer=easydl__pb2.CustomizedRequest.FromString,
                    response_serializer=easydl__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.OptimizeProcessor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OptimizeProcessor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def process(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.OptimizeProcessor/process',
            easydl__pb2.OptimizeEvent.SerializeToString,
            easydl__pb2.OptimizeProcessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def optimize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.OptimizeProcessor/optimize',
            easydl__pb2.OptimizeRequest.SerializeToString,
            easydl__pb2.OptimizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def customized(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.OptimizeProcessor/customized',
            easydl__pb2.CustomizedRequest.SerializeToString,
            easydl__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ExternalOptimizerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.optimize = channel.unary_unary(
                '/proto.ExternalOptimizer/optimize',
                request_serializer=easydl__pb2.OptimizeRequest.SerializeToString,
                response_deserializer=easydl__pb2.OptimizeResponse.FromString,
                )
        self.stop_rl_env = channel.unary_unary(
                '/proto.ExternalOptimizer/stop_rl_env',
                request_serializer=easydl__pb2.JobMeta.SerializeToString,
                response_deserializer=easydl__pb2.Response.FromString,
                )


class ExternalOptimizerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def optimize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop_rl_env(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExternalOptimizerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'optimize': grpc.unary_unary_rpc_method_handler(
                    servicer.optimize,
                    request_deserializer=easydl__pb2.OptimizeRequest.FromString,
                    response_serializer=easydl__pb2.OptimizeResponse.SerializeToString,
            ),
            'stop_rl_env': grpc.unary_unary_rpc_method_handler(
                    servicer.stop_rl_env,
                    request_deserializer=easydl__pb2.JobMeta.FromString,
                    response_serializer=easydl__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.ExternalOptimizer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExternalOptimizer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def optimize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.ExternalOptimizer/optimize',
            easydl__pb2.OptimizeRequest.SerializeToString,
            easydl__pb2.OptimizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop_rl_env(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.ExternalOptimizer/stop_rl_env',
            easydl__pb2.JobMeta.SerializeToString,
            easydl__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
