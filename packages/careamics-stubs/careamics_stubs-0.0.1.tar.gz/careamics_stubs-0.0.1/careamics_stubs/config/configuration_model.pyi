from .data_model import DataConfig as DataConfig
from .fcn_algorithm_model import FCNAlgorithmConfig as FCNAlgorithmConfig
from .references import CARE as CARE, CAREDescription as CAREDescription, CARERef as CARERef, CUSTOM as CUSTOM, N2N as N2N, N2NDescription as N2NDescription, N2NRef as N2NRef, N2V as N2V, N2V2 as N2V2, N2V2Description as N2V2Description, N2V2Ref as N2V2Ref, N2VDescription as N2VDescription, N2VRef as N2VRef, STRUCT_N2V as STRUCT_N2V, STRUCT_N2V2 as STRUCT_N2V2, StructN2V2Description as StructN2V2Description, StructN2VDescription as StructN2VDescription, StructN2VRef as StructN2VRef
from .support import SupportedAlgorithm as SupportedAlgorithm, SupportedPixelManipulation as SupportedPixelManipulation, SupportedTransform as SupportedTransform
from .training_model import TrainingConfig as TrainingConfig
from .transformations.n2v_manipulate_model import N2VManipulateModel as N2VManipulateModel
from .vae_algorithm_model import VAEAlgorithmConfig as VAEAlgorithmConfig
from _typeshed import Incomplete
from bioimageio.spec.generic.v0_3 import CiteEntry as CiteEntry
from pathlib import Path
from pydantic import BaseModel
from typing import Literal
from typing_extensions import Self

class Configuration(BaseModel):
    model_config: Incomplete
    version: Literal['0.1.0']
    experiment_name: str
    algorithm_config: FCNAlgorithmConfig | VAEAlgorithmConfig
    data_config: DataConfig
    training_config: TrainingConfig
    @classmethod
    def no_symbol(cls, name: str) -> str: ...
    def validate_3D(self) -> Self: ...
    def validate_algorithm_and_data(self) -> Self: ...
    def set_3D(self, is_3D: bool, axes: str, patch_size: list[int]) -> None: ...
    def set_N2V2(self, use_n2v2: bool) -> None: ...
    def set_structN2V(self, mask_axis: Literal['horizontal', 'vertical', 'none'], mask_span: int) -> None: ...
    def get_algorithm_flavour(self) -> str: ...
    def get_algorithm_description(self) -> str: ...
    def get_algorithm_citations(self) -> list[CiteEntry]: ...
    def get_algorithm_references(self) -> str: ...
    def get_algorithm_keywords(self) -> list[str]: ...
    def model_dump(self, exclude_defaults: bool = False, exclude_none: bool = True, **kwargs: dict) -> dict: ...

def load_configuration(path: str | Path) -> Configuration: ...
def save_configuration(config: Configuration, path: str | Path) -> Path: ...
