from ..config.support import SupportedLoss as SupportedLoss
from .fcn.losses import mae_loss as mae_loss, mse_loss as mse_loss, n2v_loss as n2v_loss
from .lvae.losses import denoisplit_loss as denoisplit_loss, denoisplit_musplit_loss as denoisplit_musplit_loss, musplit_loss as musplit_loss
from careamics.models.lvae.likelihoods import GaussianLikelihood as GaussianLikelihood, NoiseModelLikelihood as NoiseModelLikelihood
from careamics.models.lvae.noise_models import GaussianMixtureNoiseModel as GaussianMixtureNoiseModel, MultiChannelNoiseModel as MultiChannelNoiseModel
from dataclasses import dataclass
from torch import Tensor as tensor
from typing import Callable, Literal

NoiseModel = GaussianMixtureNoiseModel | MultiChannelNoiseModel

@dataclass
class FCNLossParameters:
    prediction: tensor
    targets: tensor
    mask: tensor
    current_epoch: int
    loss_weight: float
    def __init__(self, prediction, targets, mask, current_epoch, loss_weight) -> None: ...

@dataclass
class LVAELossParameters:
    noise_model_likelihood: NoiseModelLikelihood | None = ...
    gaussian_likelihood: GaussianLikelihood | None = ...
    current_epoch: int = ...
    reconstruction_weight: float = ...
    musplit_weight: float = ...
    denoisplit_weight: float = ...
    kl_type: Literal['kl', 'kl_restricted', 'kl_spatial', 'kl_channelwise'] = ...
    kl_weight: float = ...
    kl_annealing: bool = ...
    kl_start: int = ...
    kl_annealtime: int = ...
    non_stochastic: bool = ...
    def __init__(self, noise_model_likelihood=..., gaussian_likelihood=..., current_epoch=..., reconstruction_weight=..., musplit_weight=..., denoisplit_weight=..., kl_type=..., kl_weight=..., kl_annealing=..., kl_start=..., kl_annealtime=..., non_stochastic=...) -> None: ...

def loss_parameters_factory(type: SupportedLoss) -> FCNLossParameters | LVAELossParameters: ...
def loss_factory(loss: SupportedLoss | str) -> Callable: ...
