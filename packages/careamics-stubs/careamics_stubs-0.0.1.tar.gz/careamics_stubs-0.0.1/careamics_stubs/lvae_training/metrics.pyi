import torch
from _typeshed import Incomplete
from careamics.models.lvae.utils import allow_numpy as allow_numpy

class RunningPSNR:
    N: Incomplete
    mse_sum: Incomplete
    max: Incomplete
    def __init__(self) -> None: ...
    def reset(self) -> None: ...
    min: Incomplete
    def update(self, rec: torch.Tensor, tar: torch.Tensor) -> None: ...
    def get(self): ...

def zero_mean(x): ...
def fix_range(gt, x): ...
def fix(gt, x): ...
def PSNR(gt, pred, range_: Incomplete | None = None): ...
def RangeInvariantPsnr(gt: torch.Tensor, pred: torch.Tensor): ...
def avg_range_inv_psnr(target, prediction): ...
def avg_psnr(target, prediction): ...
def compute_masked_psnr(mask, tar1, tar2, pred1, pred2): ...
def avg_ssim(target, prediction): ...
def range_invariant_multiscale_ssim(gt_, pred_): ...
def compute_multiscale_ssim(gt_, pred_, range_invariant: bool = True): ...
