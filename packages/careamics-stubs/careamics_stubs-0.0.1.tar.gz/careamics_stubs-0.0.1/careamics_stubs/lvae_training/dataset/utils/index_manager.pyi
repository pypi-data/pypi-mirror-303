from careamics.lvae_training.dataset.types import TilingMode as TilingMode
from dataclasses import dataclass

@dataclass
class GridIndexManager:
    data_shape: tuple
    grid_shape: tuple
    patch_shape: tuple
    tiling_mode: TilingMode
    def __post_init__(self) -> None: ...
    def patch_offset(self): ...
    def get_individual_dim_grid_count(self, dim: int): ...
    def total_grid_count(self): ...
    def grid_count(self, dim: int): ...
    def get_grid_index(self, dim: int, coordinate: int): ...
    def dataset_idx_from_grid_idx(self, grid_idx: tuple): ...
    def get_patch_location_from_dataset_idx(self, dataset_idx: int): ...
    def get_dataset_idx_from_grid_location(self, location: tuple): ...
    def get_gridstart_location_from_dim_index(self, dim: int, dim_index: int): ...
    def get_location_from_dataset_idx(self, dataset_idx: int): ...
    def on_boundary(self, dataset_idx: int, dim: int, only_end: bool = False): ...
    def next_grid_along_dim(self, dataset_idx: int, dim: int): ...
    def prev_grid_along_dim(self, dataset_idx: int, dim: int): ...
    def __init__(self, data_shape, grid_shape, patch_shape, tiling_mode) -> None: ...
