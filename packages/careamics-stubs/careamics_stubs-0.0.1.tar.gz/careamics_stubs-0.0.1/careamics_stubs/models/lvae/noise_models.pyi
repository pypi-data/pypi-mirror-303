import torch
import torch.nn as nn
from _typeshed import Incomplete
from careamics.config import GaussianMixtureNMConfig as GaussianMixtureNMConfig, MultiChannelNMConfig as MultiChannelNMConfig

def noise_model_factory(model_config: MultiChannelNMConfig | None) -> MultiChannelNoiseModel | None: ...
def train_gm_noise_model(model_config: GaussianMixtureNMConfig) -> GaussianMixtureNoiseModel: ...

class MultiChannelNoiseModel(nn.Module):
    def __init__(self, nmodels: list[GaussianMixtureNoiseModel]) -> None: ...
    def likelihood(self, obs: torch.Tensor, signal: torch.Tensor) -> torch.Tensor: ...

def fastShuffle(series, num): ...

class GaussianMixtureNoiseModel(nn.Module):
    min_sigma: Incomplete
    n_gaussian: Incomplete
    n_coeff: Incomplete
    weight: Incomplete
    min_signal: Incomplete
    max_signal: Incomplete
    tol: Incomplete
    def __init__(self, config: GaussianMixtureNMConfig) -> None: ...
    def make_learnable(self) -> None: ...
    def to_device(self, cuda_tensor) -> None: ...
    def polynomialRegressor(self, weightParams, signals): ...
    def normalDens(self, x: torch.Tensor, m_: torch.Tensor = 0.0, std_: torch.Tensor = None) -> torch.Tensor: ...
    def likelihood(self, observations: torch.Tensor, signals: torch.Tensor) -> torch.Tensor: ...
    def getGaussianParameters(self, signals: torch.Tensor) -> list[torch.Tensor]: ...
    def getSignalObservationPairs(self, signal, observation, lowerClip, upperClip): ...
    def forward(self, x, y): ...
    def train_noise_model(self, signal, observation, learning_rate: float = 0.1, batchSize: int = 250000, n_epochs: int = 2000, name: str = 'GMMNoiseModel.npz', lowerClip: int = 0, upperClip: int = 100): ...
