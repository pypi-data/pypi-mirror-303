import numpy as np
import torch
from _typeshed import Incomplete
from careamics.config.likelihood_model import GaussianLikelihoodConfig as GaussianLikelihoodConfig, NMLikelihoodConfig as NMLikelihoodConfig
from careamics.models.lvae.noise_models import GaussianMixtureNoiseModel as GaussianMixtureNoiseModel, MultiChannelNoiseModel as MultiChannelNoiseModel
from torch import nn
from typing import Any, Literal

NoiseModel = GaussianMixtureNoiseModel | MultiChannelNoiseModel

def likelihood_factory(config: GaussianLikelihoodConfig | NMLikelihoodConfig | None): ...

class LikelihoodModule(nn.Module):
    def distr_params(self, x: Any) -> None: ...
    def set_params_to_same_device_as(self, correct_device_tensor: Any) -> None: ...
    @staticmethod
    def logvar(params: Any) -> None: ...
    @staticmethod
    def mean(params: Any) -> None: ...
    @staticmethod
    def mode(params: Any) -> None: ...
    @staticmethod
    def sample(params: Any) -> None: ...
    def log_likelihood(self, x: Any, params: Any) -> None: ...
    def get_mean_lv(self, x: torch.Tensor) -> tuple[torch.Tensor, torch.Tensor | None]: ...
    def forward(self, input_: torch.Tensor, x: torch.Tensor | None) -> tuple[torch.Tensor, dict[str, torch.Tensor]]: ...

class GaussianLikelihood(LikelihoodModule):
    predict_logvar: Incomplete
    logvar_lowerbound: Incomplete
    def __init__(self, predict_logvar: Literal['pixelwise'] | None = None, logvar_lowerbound: float | None = None) -> None: ...
    def get_mean_lv(self, x: torch.Tensor) -> tuple[torch.Tensor, torch.Tensor | None]: ...
    def distr_params(self, x: torch.Tensor) -> dict[str, torch.Tensor]: ...
    @staticmethod
    def mean(params: dict[str, torch.Tensor]) -> torch.Tensor: ...
    @staticmethod
    def mode(params: dict[str, torch.Tensor]) -> torch.Tensor: ...
    @staticmethod
    def sample(params: dict[str, torch.Tensor]) -> torch.Tensor: ...
    @staticmethod
    def logvar(params: dict[str, torch.Tensor]) -> torch.Tensor: ...
    def log_likelihood(self, x: torch.Tensor, params: dict[str, torch.Tensor | None]): ...

def log_normal(x: torch.Tensor, mean: torch.Tensor, logvar: torch.Tensor) -> torch.Tensor: ...

class NoiseModelLikelihood(LikelihoodModule):
    data_mean: Incomplete
    data_std: Incomplete
    noiseModel: Incomplete
    def __init__(self, data_mean: np.ndarray | torch.Tensor, data_std: np.ndarray | torch.Tensor, noiseModel: NoiseModel) -> None: ...
    def get_mean_lv(self, x: torch.Tensor) -> tuple[torch.Tensor, None]: ...
    def distr_params(self, x: torch.Tensor) -> dict[str, torch.Tensor]: ...
    @staticmethod
    def mean(params: dict[str, torch.Tensor]) -> torch.Tensor: ...
    @staticmethod
    def mode(params: dict[str, torch.Tensor]) -> torch.Tensor: ...
    @staticmethod
    def sample(params: dict[str, torch.Tensor]) -> torch.Tensor: ...
    def log_likelihood(self, x: torch.Tensor, params: dict[str, torch.Tensor]): ...
