# sporosdk/client.py

import os
import requests
from typing import Optional

class SporoClient:
    def __init__(
        self,
        api_key: Optional[str] = None,
        base_url: str = "http://fastapi-alb-575182040.us-east-1.elb.amazonaws.com/api/v1",
        timeout: int = 29
    ):
        """
        Initializes the SporoClient.

        Args:
            api_key (str, optional): Your API key. If not provided, it will look for the environment variable 'SPORO_API_KEY'.
            base_url (str, optional): Base URL for the API.
            timeout (int, optional): Request timeout in seconds.
        """
        self.api_key = api_key or os.getenv('SPORO_API_KEY')
        if not self.api_key:
            raise ValueError("API key must be provided either as a parameter or through the 'SPORO_API_KEY' environment variable.")
        self.base_url = base_url
        self.timeout = timeout
        self.headers = {
            'x-api-key': self.api_key
        }
        self.session = requests.Session()
        retries = requests.adapters.Retry(
            total=5,
            backoff_factor=1,
            status_forcelist=[502, 503, 504],
            allowed_methods=["POST"]
        )
        adapter = requests.adapters.HTTPAdapter(max_retries=retries)
        self.session.mount('http://', adapter)
        self.session.mount('https://', adapter)

    def generate_summary(
        self,
        transcript: str,
        temperature: float = 0.7,
        max_tokens: int = 512,
        llm: str = "gpt4o-mini"
    ) -> str:
        """
        Generates a summary from the given transcript.

        Args:
            transcript (str): The transcript text to summarize.
            temperature (float, optional): Sampling temperature.
            max_tokens (int, optional): Maximum number of tokens in the summary.
            llm (str, optional): Language model to use.

        Returns:
            str: The summary generated by the API.
        """
        url = f"{self.base_url}/generate_summary"
        files = {
            'transcript': (None, transcript),
            'temperature': (None, str(temperature)),
            'max_tokens': (None, str(max_tokens)),
            'llm': (None, llm),
        }

        response = self.session.post(url, files=files, headers=self.headers, timeout=self.timeout)

        if response.status_code == 200:
            try:
                data = response.json()
                return data['data']['summary']
            except (ValueError, KeyError) as e:
                raise ValueError("Invalid response format") from e
        else:
            raise requests.HTTPError(f"API request failed with status code {response.status_code}: {response.text}")
