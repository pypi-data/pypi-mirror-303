# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class WellTest(BaseModel):
    """
    WellTest
    """ # noqa: E501
    well_xid: StrictStr = Field(description="Xecta unique well identifier", alias="wellXid")
    uwi: StrictStr = Field(description="Unique Well Identifier")
    var_date: datetime = Field(description="Datetime offset (with timezone) in ISO 8601 format. Example: 2022-09-27T16:28:37+0000", alias="date")
    oil_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Oil Flow Rate, STB/d", alias="oilRate")
    gas_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Gas Flow Rate, Mscf/d", alias="gasRate")
    water_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Water Flow Rate, STB/d", alias="waterRate")
    tubing_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tubing / wellhead pressure, psig", alias="tubingPressure")
    tubing_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Tubing / wellhead temperature, degF", alias="tubingTemperature")
    casing_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Casing pressure, psig", alias="casingPressure")
    casing_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Casing temperature, degF", alias="casingTemperature")
    gauge_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Downhole gauge pressure (downhole gauge must be available in downhole equipment table), psig", alias="gaugePressure")
    gauge_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Downhole gauge temperature (downhole gauge must be available in downhole equipment table), degF", alias="gaugeTemperature")
    choke: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Choke opening, %")
    upstream_choke_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Upstream choke pressure, psig", alias="upstreamChokePressure")
    downstream_choke_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Downstream choke pressure, psig", alias="downstreamChokePressure")
    basic_sediment_and_water: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage basic sediment and water, %", alias="basicSedimentAndWater")
    duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Well test duration, hr")
    separator_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Test separator pressure, psig", alias="separatorPressure")
    separator_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Test separator temperature, degF", alias="separatorTemperature")
    __properties: ClassVar[List[str]] = ["wellXid", "uwi", "date", "oilRate", "gasRate", "waterRate", "tubingPressure", "tubingTemperature", "casingPressure", "casingTemperature", "gaugePressure", "gaugeTemperature", "choke", "upstreamChokePressure", "downstreamChokePressure", "basicSedimentAndWater", "duration", "separatorPressure", "separatorTemperature"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WellTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if tubing_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.tubing_pressure is None and "tubing_pressure" in self.model_fields_set:
            _dict['tubingPressure'] = None

        # set to None if tubing_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.tubing_temperature is None and "tubing_temperature" in self.model_fields_set:
            _dict['tubingTemperature'] = None

        # set to None if casing_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.casing_pressure is None and "casing_pressure" in self.model_fields_set:
            _dict['casingPressure'] = None

        # set to None if casing_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.casing_temperature is None and "casing_temperature" in self.model_fields_set:
            _dict['casingTemperature'] = None

        # set to None if gauge_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.gauge_pressure is None and "gauge_pressure" in self.model_fields_set:
            _dict['gaugePressure'] = None

        # set to None if gauge_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.gauge_temperature is None and "gauge_temperature" in self.model_fields_set:
            _dict['gaugeTemperature'] = None

        # set to None if choke (nullable) is None
        # and model_fields_set contains the field
        if self.choke is None and "choke" in self.model_fields_set:
            _dict['choke'] = None

        # set to None if upstream_choke_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.upstream_choke_pressure is None and "upstream_choke_pressure" in self.model_fields_set:
            _dict['upstreamChokePressure'] = None

        # set to None if downstream_choke_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.downstream_choke_pressure is None and "downstream_choke_pressure" in self.model_fields_set:
            _dict['downstreamChokePressure'] = None

        # set to None if basic_sediment_and_water (nullable) is None
        # and model_fields_set contains the field
        if self.basic_sediment_and_water is None and "basic_sediment_and_water" in self.model_fields_set:
            _dict['basicSedimentAndWater'] = None

        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict['duration'] = None

        # set to None if separator_pressure (nullable) is None
        # and model_fields_set contains the field
        if self.separator_pressure is None and "separator_pressure" in self.model_fields_set:
            _dict['separatorPressure'] = None

        # set to None if separator_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.separator_temperature is None and "separator_temperature" in self.model_fields_set:
            _dict['separatorTemperature'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WellTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "wellXid": obj.get("wellXid"),
            "uwi": obj.get("uwi"),
            "date": obj.get("date"),
            "oilRate": obj.get("oilRate") if obj.get("oilRate") is not None else 0.0,
            "gasRate": obj.get("gasRate") if obj.get("gasRate") is not None else 0.0,
            "waterRate": obj.get("waterRate") if obj.get("waterRate") is not None else 0.0,
            "tubingPressure": obj.get("tubingPressure"),
            "tubingTemperature": obj.get("tubingTemperature"),
            "casingPressure": obj.get("casingPressure"),
            "casingTemperature": obj.get("casingTemperature"),
            "gaugePressure": obj.get("gaugePressure"),
            "gaugeTemperature": obj.get("gaugeTemperature"),
            "choke": obj.get("choke"),
            "upstreamChokePressure": obj.get("upstreamChokePressure"),
            "downstreamChokePressure": obj.get("downstreamChokePressure"),
            "basicSedimentAndWater": obj.get("basicSedimentAndWater"),
            "duration": obj.get("duration"),
            "separatorPressure": obj.get("separatorPressure"),
            "separatorTemperature": obj.get("separatorTemperature")
        })
        return _obj


