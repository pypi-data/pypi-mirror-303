# coding: utf-8

"""
    Production API

    API exposing endpoints for managing well  and daily production.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class WellInput(BaseModel):
    """
    WellInput
    """ # noqa: E501
    source_id: StrictStr = Field(description="Well sourceId (commonly OpenWells or WellView ID - used to link to other construction data)", alias="sourceId")
    uwi: StrictStr = Field(description="Well UWI (commonly the API number - used to link to daily production)")
    name: StrictStr = Field(description="Well Name")
    group1: Optional[StrictStr] = Field(default=None, description="Group 1 - used for primary group navigation in the application")
    group2: Optional[StrictStr] = Field(default=None, description="Group 2 - used for secondary sorting in the well tree and grouping in the application")
    group3: Optional[StrictStr] = Field(default=None, description="Group 3 - used for secondary sorting in the well tree and grouping in the application")
    type: Optional[StrictStr] = Field(default='PRODUCER', description="Well type: PRODUCER, INJECTOR")
    fluid: Optional[StrictStr] = Field(default='OIL', description="Primary fluid of the well: OIL, GAS, WATER")
    lift_type: Optional[StrictStr] = Field(default='NATURAL_FLOW', description="Current lift type of the well: NATURAL_FLOW, GAS_LIFT, ROD_PUMP, ESP, PLUNGER_LIFT, GAS_ASSISTED_PLUNGER_LIFT", alias="liftType")
    lat: Union[StrictFloat, StrictInt] = Field(description="Surface latitude in WGS84, decimal degrees")
    lon: Union[StrictFloat, StrictInt] = Field(description="Surface longitude in WGS84, decimal degrees")
    mud_line: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mud line for offshore wells, ft", alias="mudLine")
    status: Optional[StrictStr] = Field(default='ACTIVE', description="Well Status: ACTIVE, INACTIVE, ABANDONED")
    bottomhole_lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="bottomholeLat")
    bottomhole_lon: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="bottomholeLon")
    __properties: ClassVar[List[str]] = ["sourceId", "uwi", "name", "group1", "group2", "group3", "type", "fluid", "liftType", "lat", "lon", "mudLine", "status", "bottomholeLat", "bottomholeLon"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRODUCER', 'INJECTOR']):
            raise ValueError("must be one of enum values ('PRODUCER', 'INJECTOR')")
        return value

    @field_validator('fluid')
    def fluid_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OIL', 'GAS', 'WATER']):
            raise ValueError("must be one of enum values ('OIL', 'GAS', 'WATER')")
        return value

    @field_validator('lift_type')
    def lift_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NATURAL_FLOW', 'GAS_LIFT', 'ROD_PUMP', 'ESP', 'PCP', 'PLUNGER_LIFT', 'GAS_ASSISTED_PLUNGER_LIFT']):
            raise ValueError("must be one of enum values ('NATURAL_FLOW', 'GAS_LIFT', 'ROD_PUMP', 'ESP', 'PCP', 'PLUNGER_LIFT', 'GAS_ASSISTED_PLUNGER_LIFT')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'INACTIVE', 'ABANDONED']):
            raise ValueError("must be one of enum values ('ACTIVE', 'INACTIVE', 'ABANDONED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WellInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if group1 (nullable) is None
        # and model_fields_set contains the field
        if self.group1 is None and "group1" in self.model_fields_set:
            _dict['group1'] = None

        # set to None if group2 (nullable) is None
        # and model_fields_set contains the field
        if self.group2 is None and "group2" in self.model_fields_set:
            _dict['group2'] = None

        # set to None if group3 (nullable) is None
        # and model_fields_set contains the field
        if self.group3 is None and "group3" in self.model_fields_set:
            _dict['group3'] = None

        # set to None if mud_line (nullable) is None
        # and model_fields_set contains the field
        if self.mud_line is None and "mud_line" in self.model_fields_set:
            _dict['mudLine'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if bottomhole_lat (nullable) is None
        # and model_fields_set contains the field
        if self.bottomhole_lat is None and "bottomhole_lat" in self.model_fields_set:
            _dict['bottomholeLat'] = None

        # set to None if bottomhole_lon (nullable) is None
        # and model_fields_set contains the field
        if self.bottomhole_lon is None and "bottomhole_lon" in self.model_fields_set:
            _dict['bottomholeLon'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WellInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceId": obj.get("sourceId"),
            "uwi": obj.get("uwi"),
            "name": obj.get("name"),
            "group1": obj.get("group1"),
            "group2": obj.get("group2"),
            "group3": obj.get("group3"),
            "type": obj.get("type") if obj.get("type") is not None else 'PRODUCER',
            "fluid": obj.get("fluid") if obj.get("fluid") is not None else 'OIL',
            "liftType": obj.get("liftType") if obj.get("liftType") is not None else 'NATURAL_FLOW',
            "lat": obj.get("lat"),
            "lon": obj.get("lon"),
            "mudLine": obj.get("mudLine"),
            "status": obj.get("status") if obj.get("status") is not None else 'ACTIVE',
            "bottomholeLat": obj.get("bottomholeLat"),
            "bottomholeLon": obj.get("bottomholeLon")
        })
        return _obj


