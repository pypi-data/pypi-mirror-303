from typing import Any, Iterator
from _collections_abc import dict_items, dict_keys, dict_values
import sys
class namedtuple(tuple):
    __namedvalues__: dict[str, Any]
    @property
    def unnamed_values(self) -> tuple: ...
    @property
    def named_values(self) -> dict: ...
    def keys(self) -> dict_keys[str, Any]: ...
    def values(self) -> dict_values[str, Any]: ...
    def items(self) -> dict_items[str, Any]: ...
    def __len__(self) -> int: ...
    def __contains__(self, key: Any) -> bool: ...
    def __getattr__(self, name: str) -> Any: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __repr__(self) -> str: ...
    def __lt__(self, value) -> bool: ...
    def __le__(self, value: tuple[Any, ...]) -> bool: ...
    def __gt__(self, value: tuple[Any, ...]) -> bool: ...
    def __ge__(self, value: tuple[Any, ...]) -> bool: ...
    def __eq__(self, value: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def __add__(self, value: tuple[Any, ...]) -> namedtuple[Any, ...]: ...
    def count(self, value: Any) -> int: ...
    def index(self, value: Any, start = 0, stop = sys.maxsize, /) -> int: ...