"use strict";(self.webpackChunkjupyterlab_collaborative_chat_extension=self.webpackChunkjupyterlab_collaborative_chat_extension||[]).push([[509],{8509:(e,t,a)=>{a.r(t),a.d(t,{default:()=>b});var o=a(5749),n=a(4715),r=a(7909),i=a(2200),c=a(1473),l=a(6887),s=a(9480),d=a(5215),h=a(4614),m=a(2678),u=a(7460),p=a(2488);const g="Chat",C="jupyterlab-collaborative-chat-extension:factory",y={id:"jupyterlab-collaborative-chat-extension:autocompletionRegistry",description:"An autocompletion registry",autoStart:!0,provides:o.IAutocompletionRegistry,activate:e=>new o.AutocompletionRegistry},v={id:C,description:"A document factories for collaborative chat",autoStart:!0,requires:[d.IRenderMimeRegistry],optional:[p.IActiveCellManagerToken,o.IAutocompletionRegistry,n.ICollaborativeDrive,r.ILayoutRestorer,p.ISelectionWatcherToken,h.ISettingRegistry,i.IThemeManager,i.IToolbarWidgetRegistry,m.ITranslator],provides:p.IChatFactory,activate:(e,t,a,o,n,r,c,l,s,d,h)=>{const u=null!=h?h:m.nullTranslator;let y;const v=new p.WidgetConfig({});function f(e){v.config={sendWithShiftEnter:e.get("sendWithShiftEnter").composite,stackMessages:e.get("stackMessages").composite,unreadNotifications:e.get("unreadNotifications").composite,enableCodeToolbar:e.get("enableCodeToolbar").composite,sendTypingNotification:e.get("sendTypingNotification").composite}}l&&(d&&(y=(0,i.createToolbarFactory)(d,l,g,C,u)),Promise.all([e.restored,l.load(C)]).then((([,e])=>{f(e),e.changed.connect(f)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const I=new i.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(p.chatFileType),n){const e=()=>p.YChat.create();n.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,o=new p.CollaborativeChatModelFactory({user:t,widgetConfig:v,commands:e.commands,activeCellManager:a,selectionWatcher:c});e.docRegistry.addModelFactory(o)})).catch((e=>console.error("The collaborative chat model factory is not initialized",e)));const b=new p.ChatWidgetFactory({name:g,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:s,rmRegistry:t,toolbarFactory:y,translator:u,autocompletionRegistry:o});return b.widgetCreated.connect(((t,a)=>{a.context.pathChanged.connect((()=>{I.save(a)})),I.add(a),a.model.unreadChanged.connect((()=>e.commands.notifyCommandChanged(p.CommandIDs.markAsRead)))})),e.docRegistry.addWidgetFactory(b),r&&r.restore(I,{command:"docmanager:open",args:e=>({path:e.context.path,factory:g}),name:e=>e.context.path,when:e.serviceManager.ready}),{widgetConfig:v,tracker:I}}},f={id:"jupyterlab-collaborative-chat-extension:commands",description:"The commands to create or open a chat",autoStart:!0,requires:[n.ICollaborativeDrive,p.IChatFactory],optional:[p.IActiveCellManagerToken,p.IChatPanel,i.ICommandPalette,l.ILauncher,p.ISelectionWatcherToken],activate:(e,t,a,n,r,l,s,d)=>{const{commands:h}=e,{tracker:m,widgetConfig:u}=a;h.addCommand(p.CommandIDs.createChat,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:o.chatIcon,execute:async e=>{var a,o;const n=null!==(a=e.inSidePanel)&&void 0!==a&&a;let r=null!==(o=e.name)&&void 0!==o?o:null,c="";if(r||(r=(await i.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===r)return;r&&(c=r.endsWith(p.chatFileType.extensions[0])?r:`${r}${p.chatFileType.extensions[0]}`);let l=!0;if(c?await t.get(c,{content:!1}).catch((()=>{l=!1})):l=!1,!l){let e=await t.newUntitled({type:"file",ext:p.chatFileType.extensions[0]});if(c&&(e=await t.rename(e.path,c)),!e)return(0,i.showErrorMessage)("Error creating a chat","An error occured while creating the chat"),"";c=e.path}if(h.hasCommand(p.CommandIDs.openChat))return h.execute(p.CommandIDs.openChat,{filepath:c,inSidePanel:n});h.execute("docmanager:open",{path:`RTC:${c}`,factory:g})}}),l&&l.addItem({category:"Chat",command:p.CommandIDs.createChat,args:{isPalette:!0}}),s&&s.add({command:p.CommandIDs.createChat,category:"Chat",rank:1}),h.addCommand(p.CommandIDs.markAsRead,{caption:"Mark chat as read",icon:o.readIcon,isEnabled:()=>null!==m.currentWidget&&m.currentWidget===e.shell.currentWidget&&m.currentWidget.model.unreadMessages.length>0,execute:async t=>{const a=e.shell.currentWidget;a&&a instanceof p.CollaborativeChatPanel&&Array.from(e.shell.widgets("main")).includes(a)?a.model.unreadMessages=[]:console.error(`The command '${p.CommandIDs.markAsRead}' should be executed from the toolbar button only`)}}),m.currentChanged.connect((()=>{h.notifyCommandChanged(p.CommandIDs.markAsRead)})),e.serviceManager.ready.then((()=>{const a=e.serviceManager.user.identity;h.addCommand(p.CommandIDs.openChat,{label:"Open a chat",execute:async o=>{var l,s;const m=null!==(l=o.inSidePanel)&&void 0!==l&&l;let C=null!==(s=o.filepath)&&void 0!==s?s:null;if(null===C&&(C=(await i.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!C)return;let y=!0;if(await t.get(C,{content:!1}).catch((()=>{y=!1})),y)if(m&&r){if(e.shell.activateById(r.id),r.openIfExists(C))return;const o=await t.get(C),i=t.sharedModelFactory.createNew({path:o.path,format:o.format,contentType:p.chatFileType.contentType,collaborative:!0}),l=new p.CollaborativeChatModel({user:a,sharedModel:i,widgetConfig:u,commands:e.commands,activeCellManager:n,selectionWatcher:d});r.addChat(l,c.PathExt.join(c.PathExt.dirname(o.path),c.PathExt.basename(o.name,p.chatFileType.extensions[0])),o.path)}else h.execute("docmanager:open",{path:`RTC:${C}`,factory:g});else(0,i.showErrorMessage)("Error opening chat",`'${C}' is not a valid path`)}}),l&&l.addItem({category:"Chat",command:p.CommandIDs.openChat})})).catch((e=>console.error("The command to open a chat is not initialized\n",e))),h.addCommand(p.CommandIDs.focusInput,{caption:"Focus the input of the current chat widget",isEnabled:()=>null!==m.currentWidget,execute:async()=>{const t=m.currentWidget;t&&t instanceof p.CollaborativeChatPanel&&Array.from(e.shell.widgets("main")).includes(t)&&(e.shell.activateById(t.id),t.model.focusInput())}})}},I={id:"jupyterlab-collaborative-chat-extension:chat-panel",description:"A chat extension for Jupyter",autoStart:!0,provides:p.IChatPanel,requires:[n.ICollaborativeDrive,d.IRenderMimeRegistry],optional:[o.IAutocompletionRegistry,r.ILayoutRestorer,s.INotebookTracker,i.IThemeManager],activate:(e,t,a,n,r,i,c)=>{const{commands:l}=e,s=new p.ChatPanel({commands:l,drive:t,rmRegistry:a,themeManager:c,autocompletionRegistry:n});s.id="JupyterCollaborationChat:sidepanel",s.title.icon=o.chatIcon,s.title.caption="Jupyter Chat",e.shell.add(s,"left",{rank:2e3}),r&&r.add(s,"jupyter-chat");const d=["create","delete","rename"];return e.serviceManager.events.stream.connect(((e,t)=>{if("https://events.jupyter.org/jupyter_server/contents_service/v1"===t.schema_id){const e=t.action;d.includes(e)&&s.updateChatNames()}})),l.addCommand(p.CommandIDs.moveToSide,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:u.launchIcon,isEnabled:()=>l.hasCommand(p.CommandIDs.openChat),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof p.CollaborativeChatPanel&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${p.CommandIDs.moveToSide}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();l.execute(p.CommandIDs.openChat,{filepath:a,inSidePanel:!0}),t.dispose()}}),s}},b=[{id:"jupyterlab-collaborative-chat-extension:activeCellManager",description:"the active cell manager plugin",autoStart:!0,requires:[s.INotebookTracker],provides:p.IActiveCellManagerToken,activate:(e,t)=>new o.ActiveCellManager({tracker:t,shell:e.shell})},y,f,I,v,{id:"jupyterlab-collaborative-chat-extension:selectionWatcher",description:"the selection watcher plugin",autoStart:!0,requires:[],provides:p.ISelectionWatcherToken,activate:e=>new o.SelectionWatcher({shell:e.shell})}]}}]);