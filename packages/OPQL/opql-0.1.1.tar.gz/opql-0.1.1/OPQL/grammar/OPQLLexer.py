# Generated from OPQL.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,54,444,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,170,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,3,14,225,8,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,241,8,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,
        3,29,282,8,29,1,29,1,29,1,29,1,29,1,30,4,30,289,8,30,11,30,12,30,
        290,1,30,1,30,4,30,295,8,30,11,30,12,30,296,3,30,299,8,30,1,31,1,
        31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
        34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,
        39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,
        45,1,46,1,46,1,47,1,47,1,48,1,48,5,48,348,8,48,10,48,12,48,351,9,
        48,1,49,1,49,1,49,5,49,356,8,49,10,49,12,49,359,9,49,1,49,1,49,1,
        50,1,50,1,50,1,50,3,50,367,8,50,1,51,4,51,370,8,51,11,51,12,51,371,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,
        386,8,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,
        1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,63,
        1,63,1,63,5,63,414,8,63,10,63,12,63,417,9,63,1,63,1,63,1,63,1,63,
        1,63,1,63,5,63,425,8,63,10,63,12,63,428,9,63,1,63,3,63,431,8,63,
        1,63,1,63,3,63,435,8,63,3,63,437,8,63,1,64,1,64,1,65,1,65,1,66,1,
        66,0,0,67,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,0,109,
        0,111,0,113,0,115,0,117,0,119,0,121,0,123,0,125,0,127,54,129,0,131,
        0,133,0,1,0,18,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,2,0,
        34,34,92,92,7,0,47,47,92,92,98,98,102,102,110,110,114,114,116,116,
        8,0,160,160,5760,5760,6158,6158,8192,8202,8232,8233,8239,8239,8287,
        8287,12288,12288,1,0,32,32,1,0,9,9,1,0,10,10,1,0,11,11,1,0,12,12,
        1,0,13,13,1,0,28,28,1,0,29,29,1,0,30,30,1,0,31,31,1,0,42,42,2,0,
        10,10,13,13,1,0,47,47,459,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
        1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,
        127,1,0,0,0,1,135,1,0,0,0,3,137,1,0,0,0,5,140,1,0,0,0,7,142,1,0,
        0,0,9,144,1,0,0,0,11,147,1,0,0,0,13,150,1,0,0,0,15,169,1,0,0,0,17,
        171,1,0,0,0,19,178,1,0,0,0,21,185,1,0,0,0,23,190,1,0,0,0,25,195,
        1,0,0,0,27,204,1,0,0,0,29,224,1,0,0,0,31,240,1,0,0,0,33,242,1,0,
        0,0,35,248,1,0,0,0,37,255,1,0,0,0,39,257,1,0,0,0,41,259,1,0,0,0,
        43,261,1,0,0,0,45,263,1,0,0,0,47,265,1,0,0,0,49,267,1,0,0,0,51,269,
        1,0,0,0,53,271,1,0,0,0,55,273,1,0,0,0,57,275,1,0,0,0,59,281,1,0,
        0,0,61,288,1,0,0,0,63,300,1,0,0,0,65,303,1,0,0,0,67,307,1,0,0,0,
        69,311,1,0,0,0,71,315,1,0,0,0,73,318,1,0,0,0,75,321,1,0,0,0,77,324,
        1,0,0,0,79,326,1,0,0,0,81,328,1,0,0,0,83,331,1,0,0,0,85,333,1,0,
        0,0,87,335,1,0,0,0,89,337,1,0,0,0,91,339,1,0,0,0,93,341,1,0,0,0,
        95,343,1,0,0,0,97,345,1,0,0,0,99,352,1,0,0,0,101,362,1,0,0,0,103,
        369,1,0,0,0,105,385,1,0,0,0,107,387,1,0,0,0,109,389,1,0,0,0,111,
        391,1,0,0,0,113,393,1,0,0,0,115,395,1,0,0,0,117,397,1,0,0,0,119,
        399,1,0,0,0,121,401,1,0,0,0,123,403,1,0,0,0,125,405,1,0,0,0,127,
        436,1,0,0,0,129,438,1,0,0,0,131,440,1,0,0,0,133,442,1,0,0,0,135,
        136,5,64,0,0,136,2,1,0,0,0,137,138,5,65,0,0,138,139,5,83,0,0,139,
        4,1,0,0,0,140,141,5,69,0,0,141,6,1,0,0,0,142,143,5,79,0,0,143,8,
        1,0,0,0,144,145,5,45,0,0,145,146,5,62,0,0,146,10,1,0,0,0,147,148,
        5,60,0,0,148,149,5,45,0,0,149,12,1,0,0,0,150,151,5,80,0,0,151,152,
        5,65,0,0,152,153,5,84,0,0,153,154,5,84,0,0,154,155,5,69,0,0,155,
        156,5,82,0,0,156,157,5,78,0,0,157,14,1,0,0,0,158,159,5,83,0,0,159,
        170,5,84,0,0,160,161,5,83,0,0,161,162,5,85,0,0,162,163,5,66,0,0,
        163,164,5,74,0,0,164,165,5,69,0,0,165,166,5,67,0,0,166,167,5,84,
        0,0,167,168,5,84,0,0,168,170,5,79,0,0,169,158,1,0,0,0,169,160,1,
        0,0,0,170,16,1,0,0,0,171,172,5,70,0,0,172,173,5,73,0,0,173,174,5,
        76,0,0,174,175,5,84,0,0,175,176,5,69,0,0,176,177,5,82,0,0,177,18,
        1,0,0,0,178,179,5,82,0,0,179,180,5,69,0,0,180,181,5,84,0,0,181,182,
        5,85,0,0,182,183,5,82,0,0,183,184,5,78,0,0,184,20,1,0,0,0,185,186,
        5,79,0,0,186,187,5,67,0,0,187,188,5,69,0,0,188,189,5,76,0,0,189,
        22,1,0,0,0,190,191,5,75,0,0,191,192,5,69,0,0,192,193,5,69,0,0,193,
        194,5,80,0,0,194,24,1,0,0,0,195,196,5,68,0,0,196,197,5,73,0,0,197,
        198,5,83,0,0,198,199,5,84,0,0,199,200,5,73,0,0,200,201,5,78,0,0,
        201,202,5,67,0,0,202,203,5,84,0,0,203,26,1,0,0,0,204,205,5,79,0,
        0,205,206,5,82,0,0,206,207,5,68,0,0,207,208,5,69,0,0,208,209,5,82,
        0,0,209,210,5,66,0,0,210,211,5,89,0,0,211,28,1,0,0,0,212,213,5,65,
        0,0,213,214,5,83,0,0,214,225,5,67,0,0,215,216,5,65,0,0,216,217,5,
        83,0,0,217,218,5,67,0,0,218,219,5,69,0,0,219,220,5,78,0,0,220,221,
        5,68,0,0,221,222,5,73,0,0,222,223,5,78,0,0,223,225,5,71,0,0,224,
        212,1,0,0,0,224,215,1,0,0,0,225,30,1,0,0,0,226,227,5,68,0,0,227,
        228,5,69,0,0,228,229,5,83,0,0,229,241,5,67,0,0,230,231,5,68,0,0,
        231,232,5,69,0,0,232,233,5,83,0,0,233,234,5,67,0,0,234,235,5,69,
        0,0,235,236,5,78,0,0,236,237,5,68,0,0,237,238,5,73,0,0,238,239,5,
        78,0,0,239,241,5,71,0,0,240,226,1,0,0,0,240,230,1,0,0,0,241,32,1,
        0,0,0,242,243,5,76,0,0,243,244,5,73,0,0,244,245,5,77,0,0,245,246,
        5,73,0,0,246,247,5,84,0,0,247,34,1,0,0,0,248,249,5,66,0,0,249,250,
        5,73,0,0,250,251,5,78,0,0,251,252,5,78,0,0,252,253,5,69,0,0,253,
        254,5,68,0,0,254,36,1,0,0,0,255,256,5,46,0,0,256,38,1,0,0,0,257,
        258,5,44,0,0,258,40,1,0,0,0,259,260,5,58,0,0,260,42,1,0,0,0,261,
        262,5,40,0,0,262,44,1,0,0,0,263,264,5,41,0,0,264,46,1,0,0,0,265,
        266,5,91,0,0,266,48,1,0,0,0,267,268,5,93,0,0,268,50,1,0,0,0,269,
        270,5,42,0,0,270,52,1,0,0,0,271,272,2,48,57,0,272,54,1,0,0,0,273,
        274,2,49,57,0,274,56,1,0,0,0,275,276,5,45,0,0,276,277,5,105,0,0,
        277,278,5,110,0,0,278,279,5,102,0,0,279,58,1,0,0,0,280,282,5,43,
        0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,284,5,105,
        0,0,284,285,5,110,0,0,285,286,5,102,0,0,286,60,1,0,0,0,287,289,3,
        53,26,0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,
        1,0,0,0,291,298,1,0,0,0,292,294,5,46,0,0,293,295,3,53,26,0,294,293,
        1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,299,
        1,0,0,0,298,292,1,0,0,0,298,299,1,0,0,0,299,62,1,0,0,0,300,301,5,
        79,0,0,301,302,5,82,0,0,302,64,1,0,0,0,303,304,5,88,0,0,304,305,
        5,79,0,0,305,306,5,82,0,0,306,66,1,0,0,0,307,308,5,65,0,0,308,309,
        5,78,0,0,309,310,5,68,0,0,310,68,1,0,0,0,311,312,5,78,0,0,312,313,
        5,79,0,0,313,314,5,84,0,0,314,70,1,0,0,0,315,316,5,61,0,0,316,317,
        5,61,0,0,317,72,1,0,0,0,318,319,5,60,0,0,319,320,5,61,0,0,320,74,
        1,0,0,0,321,322,5,62,0,0,322,323,5,61,0,0,323,76,1,0,0,0,324,325,
        5,62,0,0,325,78,1,0,0,0,326,327,5,60,0,0,327,80,1,0,0,0,328,329,
        5,33,0,0,329,330,5,61,0,0,330,82,1,0,0,0,331,332,5,43,0,0,332,84,
        1,0,0,0,333,334,5,45,0,0,334,86,1,0,0,0,335,336,3,51,25,0,336,88,
        1,0,0,0,337,338,5,47,0,0,338,90,1,0,0,0,339,340,5,37,0,0,340,92,
        1,0,0,0,341,342,5,94,0,0,342,94,1,0,0,0,343,344,5,34,0,0,344,96,
        1,0,0,0,345,349,7,0,0,0,346,348,7,1,0,0,347,346,1,0,0,0,348,351,
        1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,98,1,0,0,0,351,349,1,
        0,0,0,352,357,3,95,47,0,353,356,3,101,50,0,354,356,8,2,0,0,355,353,
        1,0,0,0,355,354,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,
        1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,360,361,3,95,47,0,361,100,
        1,0,0,0,362,366,5,92,0,0,363,364,5,92,0,0,364,367,5,34,0,0,365,367,
        7,3,0,0,366,363,1,0,0,0,366,365,1,0,0,0,367,102,1,0,0,0,368,370,
        3,105,52,0,369,368,1,0,0,0,370,371,1,0,0,0,371,369,1,0,0,0,371,372,
        1,0,0,0,372,104,1,0,0,0,373,386,3,107,53,0,374,386,3,109,54,0,375,
        386,3,111,55,0,376,386,3,113,56,0,377,386,3,115,57,0,378,386,3,117,
        58,0,379,386,3,119,59,0,380,386,3,121,60,0,381,386,3,123,61,0,382,
        386,3,125,62,0,383,386,7,4,0,0,384,386,3,127,63,0,385,373,1,0,0,
        0,385,374,1,0,0,0,385,375,1,0,0,0,385,376,1,0,0,0,385,377,1,0,0,
        0,385,378,1,0,0,0,385,379,1,0,0,0,385,380,1,0,0,0,385,381,1,0,0,
        0,385,382,1,0,0,0,385,383,1,0,0,0,385,384,1,0,0,0,386,106,1,0,0,
        0,387,388,7,5,0,0,388,108,1,0,0,0,389,390,7,6,0,0,390,110,1,0,0,
        0,391,392,7,7,0,0,392,112,1,0,0,0,393,394,7,8,0,0,394,114,1,0,0,
        0,395,396,7,9,0,0,396,116,1,0,0,0,397,398,7,10,0,0,398,118,1,0,0,
        0,399,400,7,11,0,0,400,120,1,0,0,0,401,402,7,12,0,0,402,122,1,0,
        0,0,403,404,7,13,0,0,404,124,1,0,0,0,405,406,7,14,0,0,406,126,1,
        0,0,0,407,408,5,47,0,0,408,409,5,42,0,0,409,415,1,0,0,0,410,414,
        3,129,64,0,411,412,5,42,0,0,412,414,3,133,66,0,413,410,1,0,0,0,413,
        411,1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,
        418,1,0,0,0,417,415,1,0,0,0,418,419,5,42,0,0,419,437,5,47,0,0,420,
        421,5,47,0,0,421,422,5,47,0,0,422,426,1,0,0,0,423,425,3,131,65,0,
        424,423,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,
        427,430,1,0,0,0,428,426,1,0,0,0,429,431,3,117,58,0,430,429,1,0,0,
        0,430,431,1,0,0,0,431,434,1,0,0,0,432,435,3,111,55,0,433,435,5,0,
        0,1,434,432,1,0,0,0,434,433,1,0,0,0,435,437,1,0,0,0,436,407,1,0,
        0,0,436,420,1,0,0,0,437,128,1,0,0,0,438,439,8,15,0,0,439,130,1,0,
        0,0,440,441,8,16,0,0,441,132,1,0,0,0,442,443,8,17,0,0,443,134,1,
        0,0,0,20,0,169,224,240,281,290,296,298,349,355,357,366,371,385,413,
        415,426,430,434,436,0
    ]

class OPQLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    PATTERN_TKN = 7
    SUBJECT_TO_TKN = 8
    FILTER_TKN = 9
    RETURN_TKN = 10
    OCEL_TKN = 11
    KEEP_TKN = 12
    DISTINCT_TKN = 13
    ORDER_BY_TKN = 14
    ASC_TKN = 15
    DESC_TKN = 16
    LIMIT_TKN = 17
    BINNED_TKN = 18
    DOT = 19
    LSEP = 20
    COLON = 21
    LEFT_BR = 22
    RIGHT_BR = 23
    LEFT_SBR = 24
    RIGHT_SBR = 25
    ASTERISK = 26
    DIGIT = 27
    DIGIT_EX_ZERO = 28
    NEG_INF_TKN = 29
    POS_INF_TKN = 30
    CONSTANTNUM = 31
    OR = 32
    XOR = 33
    AND = 34
    NOT = 35
    EQUAL_TO = 36
    LE = 37
    GE = 38
    GT = 39
    LT = 40
    NOT_EQUAL = 41
    PLUS = 42
    SUB = 43
    MULT = 44
    DIV = 45
    MOD = 46
    CARET = 47
    DQ = 48
    SYMBOLICNAME = 49
    STRING = 50
    ESC_SEQ = 51
    SP = 52
    WHITESPACE = 53
    Comment = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@'", "'AS'", "'E'", "'O'", "'->'", "'<-'", "'PATTERN'", "'FILTER'", 
            "'RETURN'", "'OCEL'", "'KEEP'", "'DISTINCT'", "'ORDERBY'", "'LIMIT'", 
            "'BINNED'", "'.'", "','", "':'", "'('", "')'", "'['", "']'", 
            "'*'", "'-inf'", "'=='", "'<='", "'>='", "'>'", "'<'", "'!='", 
            "'+'", "'-'", "'/'", "'%'", "'^'", "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "PATTERN_TKN", "SUBJECT_TO_TKN", "FILTER_TKN", "RETURN_TKN", 
            "OCEL_TKN", "KEEP_TKN", "DISTINCT_TKN", "ORDER_BY_TKN", "ASC_TKN", 
            "DESC_TKN", "LIMIT_TKN", "BINNED_TKN", "DOT", "LSEP", "COLON", 
            "LEFT_BR", "RIGHT_BR", "LEFT_SBR", "RIGHT_SBR", "ASTERISK", 
            "DIGIT", "DIGIT_EX_ZERO", "NEG_INF_TKN", "POS_INF_TKN", "CONSTANTNUM", 
            "OR", "XOR", "AND", "NOT", "EQUAL_TO", "LE", "GE", "GT", "LT", 
            "NOT_EQUAL", "PLUS", "SUB", "MULT", "DIV", "MOD", "CARET", "DQ", 
            "SYMBOLICNAME", "STRING", "ESC_SEQ", "SP", "WHITESPACE", "Comment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "PATTERN_TKN", 
                  "SUBJECT_TO_TKN", "FILTER_TKN", "RETURN_TKN", "OCEL_TKN", 
                  "KEEP_TKN", "DISTINCT_TKN", "ORDER_BY_TKN", "ASC_TKN", 
                  "DESC_TKN", "LIMIT_TKN", "BINNED_TKN", "DOT", "LSEP", 
                  "COLON", "LEFT_BR", "RIGHT_BR", "LEFT_SBR", "RIGHT_SBR", 
                  "ASTERISK", "DIGIT", "DIGIT_EX_ZERO", "NEG_INF_TKN", "POS_INF_TKN", 
                  "CONSTANTNUM", "OR", "XOR", "AND", "NOT", "EQUAL_TO", 
                  "LE", "GE", "GT", "LT", "NOT_EQUAL", "PLUS", "SUB", "MULT", 
                  "DIV", "MOD", "CARET", "DQ", "SYMBOLICNAME", "STRING", 
                  "ESC_SEQ", "SP", "WHITESPACE", "SPACE", "TAB", "LF", "VT", 
                  "FF", "CR", "FS", "GS", "RS", "US", "Comment", "Comment_1", 
                  "Comment_3", "Comment_2" ]

    grammarFileName = "OPQL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


